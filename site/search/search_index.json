{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DWES","text":"\u00cdndice de unidades tem\u00e1ticas bloque unidad tem\u00e1tica bloque IPHP UT 01 Arquitectura Web UT 02 Lenguaje PHP UT 03 PHP Orientado a Objetos UT 04 Programaci\u00f3n Web UT 05 Acceso a base de datos bloque IILaravel UT 06 Herramientas Web UT 07 Framework Laravel UT 08 Laravel: controladores UT 09 Laravel: modelo de datos UT 10 Laravel: formularios y validaciones UT 11 Laravel: servicios REST UT 12 Laravel: autenticaci\u00f3n de usuarios <p>!!!cc \"Licencia\"     { align=left width=150 height=150}Uso de estos materiales sujeto a una licencia Creative Commons CC BY-NC-SA{:target=\"blank\"}.Derivado a partir de materiales:     \u00a0\u00a0\u00a0\u00a0- Curso Desarrollo Web en Entorno Servido, de Aitor Medrano y Luis Alema\u00f1{:target=\"blank\"}.     \u00a0\u00a0\u00a0\u00a0- Curso de Laravel, de Nacho Iborra{:target=\"blank\"}.</p>"},{"location":"ut01/ut0101/","title":"1.1. Introducci\u00f3n","text":"<p>Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor.</p> <p>Duraci\u00f3n estimada: 4 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. a) Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web. b) Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web. c) Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web. d) Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web. e) Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor. f) Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor. g) Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor."},{"location":"ut01/ut0102/","title":"1.2. Cliente/Servidor","text":"<p>Uno o varios clientes acceden a un servidor. </p> <p>Las nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes.</p> Modelo Cliente-Servidor <p>En las aplicaciones web, el cliente es el navegador web.</p> <p>El cliente hace la petici\u00f3n (request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde (response).</p>"},{"location":"ut01/ut0102/#21-pagina-web-dinamica","title":"2.1. P\u00e1gina web din\u00e1mica","text":"<p>Si la p\u00e1gina web \u00fanicamente contiene HTML + CSS se considera una p\u00e1gina est\u00e1tica. Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas:</p> <p>\u200b   a) Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos.</p> <p>\u200b   b) Utilizar servicios REST de terceros invocados desde JS.</p> Diferencia gr\u00e1fica entre p\u00e1gina est\u00e1tica y p\u00e1gina din\u00e1mica <p>Las tecnolog\u00edas empleadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son:</p> perfil herramienta tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript /td&gt;  Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp <p>!!!info \"Perfil full-stack\"     En las ofertas de trabajo, cuando hacen referencia a un Full-stack developer, est\u00e1n buscando un perfil que domina tanto el front-end como el back-end.</p>"},{"location":"ut01/ut0102/#22-single-page-application","title":"2.2. Single Page Application","text":"<p>A d\u00eda de hoy gran parte del desarrollo web est\u00e1 transitando de una arquitectura web cliente-servidor cl\u00e1sica, donde el cliente realiza una llamada al backend, por una arquitectura SPA (arquitectura de una sola p\u00e1gina) donde el cliente gana mucho mayor peso y sigue una programaci\u00f3n reactiva que accede a servicios remotos REST que realizan las operaciones (comunic\u00e1ndose mediante JSON).</p> Diferencia entre ciclo de vida tradicional de una p\u00e1gina y el ciclo de vida de la arquitectura SPA"},{"location":"ut01/ut0103/","title":"1.3. Arquitectura de 3 capas","text":"<p>Hay que distinguir entre capas f\u00edsicas (tier) y capas l\u00f3gicas (layer).</p>"},{"location":"ut01/ut0103/#31-tier","title":"3.1. Tier","text":"<p>Capa f\u00edsica (tiers) de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN.</p> <p>Ejemplo de arquitectura en tres capas f\u00edsicas (3 tier):</p> <ul> <li>Servidor Web</li> <li>Servidor de Aplicaciones</li> <li>Servidor de base de datos</li> </ul> Capas f\u00edsicas (tiers) <p>!!!note \"Cl\u00faster en tiers\"     No confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cl\u00faster, para ofrecer tolerancia a errores y escalabilidad horizontal.</p>"},{"location":"ut01/ut0103/#32-layer","title":"3.2. Layer","text":"<p>En cambio, las capas l\u00f3gicas (layers) organizan el c\u00f3digo respecto a su funcionalidad:</p> <ul> <li>Presentaci\u00f3n</li> <li>Negocio / Aplicaci\u00f3n / Proceso</li> <li>Datos / Persistencia</li> </ul> <p>Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas.</p> Capas l\u00f3gicas (layers)"},{"location":"ut01/ut0104/","title":"1.4. MVC","text":"<p>Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede v\u00eda el controlador.</li> <li>Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interact\u00faa con la vista y realiza nuevas peticiones al controlador.</li> <li>Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> </ul> Modelo-Vista-Controlador (MVC)"},{"location":"ut01/ut0105/","title":"1.5. Decisiones de dise\u00f1o","text":"<p>??? question \"\u00bfQu\u00e9 tama\u00f1o tiene el proyecto?\"     El tama\u00f1o del proyecto influye directamente en la complejidad de la arquitectura, la elecci\u00f3n de herramientas y la planificaci\u00f3n de recursos. Para proyectos peque\u00f1os, una soluci\u00f3n simple y directa podr\u00eda ser suficiente, mientras que los proyectos m\u00e1s grandes requerir\u00e1n una arquitectura m\u00e1s escalable, pruebas m\u00e1s rigurosas y una gesti\u00f3n m\u00e1s detallada del c\u00f3digo.</p> <p>??? question \"\u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo?\"     Usar un lenguaje que ya conoces puede acelerar el desarrollo, ya que te sentir\u00e1s m\u00e1s c\u00f3modo y eficiente. Sin embargo, si el proyecto requiere caracter\u00edsticas espec\u00edficas que se manejan mejor con otro lenguaje, o si aprender uno nuevo te abre mejores oportunidades a largo plazo, puede valer la pena el esfuerzo. Debes considerar el tiempo de aprendizaje y c\u00f3mo impacta en el cronograma del proyecto.</p> <p>??? question \"\u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales?\"     Las herramientas de c\u00f3digo abierto suelen ser m\u00e1s econ\u00f3micas y flexibles, pero pueden requerir m\u00e1s soporte y mantenimiento por tu parte. Las soluciones comerciales pueden ofrecer m\u00e1s soporte y caracter\u00edsticas avanzadas, pero suelen tener un coste asociado. Deber\u00e1s evaluar el presupuesto disponible y las necesidades de soporte y funcionalidad del proyecto.</p> <p>??? question \"\u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores?\"     Si trabajas solo, puedes tomar decisiones m\u00e1s flexibles y r\u00e1pidas, adaptadas a tus preferencias y habilidades. Si trabajas en un equipo, la colaboraci\u00f3n y la coherencia en el c\u00f3digo se vuelven m\u00e1s importantes, por lo que deber\u00e1s considerar herramientas de control de versiones, gu\u00edas de estilo de c\u00f3digo, y plataformas de comunicaci\u00f3n y gesti\u00f3n de proyectos.</p> <p>??? question \"\u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario?\"     Si ya tienes servidores o gestores de bases de datos disponibles, deber\u00e1s asegurarte de que las tecnolog\u00edas elegidas sean compatibles con ellos. Si tienes libertad para elegir, podr\u00e1s seleccionar las tecnolog\u00edas que mejor se adapten a las necesidades del proyecto en t\u00e9rminos de rendimiento, escalabilidad y facilidad de uso.</p> <p>??? question \"\u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle?\"     La licencia que elijas afectar\u00e1 c\u00f3mo otros pueden usar, modificar y distribuir tu software. Si planeas mantener el control y limitar el uso comercial, una licencia m\u00e1s restrictiva como GPL puede ser adecuada. Si prefieres permitir un uso m\u00e1s libre, una licencia como MIT o Apache podr\u00eda ser mejor. Tambi\u00e9n debes considerar c\u00f3mo las licencias de las herramientas y librer\u00edas que utilices impactan en tu proyecto.</p> <p>Cada una de estas preguntas influir\u00e1 en c\u00f3mo abordas el desarrollo de tu aplicaci\u00f3n web, y reflexionar sobre ellas te ayudar\u00e1 a tomar decisiones m\u00e1s informadas y coherentes con tus objetivos.</p>"},{"location":"ut01/ut0106/","title":"1.6. Herramientas","text":"<p>Software que recibe peticiones HTTP (GET, POST, DELETE, ...). Devuelve el recurso solicitado (HTML, CSS, JS, JSON, im\u00e1genes, etc...)</p> <p>El producto m\u00e1s implantando es Apache Web Server (https://httpd.apache.org{:target=\"_blank\"}), creado en 1995.</p> <ul> <li>Software libre y multiplataforma.</li> <li>Sistema de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl.</li> <li>Utiliza el archivo <code>.htaccess</code> para su configuraci\u00f3n.</li> </ul> <p>En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx (https://www.nginx.com{:target=\"_blank\"}). Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache.</p> <p>En este enlace podemos observar una comparativa de servidores web: https://w3techs.com/technologies/history_overview/web_server/ms/q{:target=\"_blank\"}.</p>"},{"location":"ut01/ut0106/#2-servidor-de-aplicaciones","title":"2. Servidor de Aplicaciones","text":"<p>Software que ofrece servicios adicionales a los de un servidor web:</p> <ul> <li>Clustering.</li> <li>Balanceo de carga.</li> <li>Tolerancia a fallos.</li> </ul> <p>Tomcat (http://tomcat.apache.org/{:target=\"_blank\"}) es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java. Contiene un contenedor Web Java que interpreta Servlets y JSP.</p> <p>!!!info \"Estudio de servidores web y servidores de aplicaciones\"     Tanto los servidores web como los servidores de aplicaciones los estudiaremos en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\".</p>"},{"location":"ut01/ut0106/#3-lenguajes-en-el-servidor","title":"3. Lenguajes en el servidor","text":"<p>Las aplicaciones que generan las p\u00e1ginas web se programan en alguno de los siguientes lenguajes:</p> <ul> <li>PHP</li> <li>JavaEE: Servlets / JSP</li> <li>Python</li> <li>ASP.NET \u2192 Visual Basic .NET / C#</li> <li>Ruby</li> <li>...</li> </ul>"},{"location":"ut01/ut0106/#javaee","title":"JavaEE","text":"<p>Java Enterprise Edition es la soluci\u00f3n Java para el desarrollo de aplicaciones enterprise. Ofrece una arquitectura muy completa y compleja, escalable y tolerante a fallos. Planteada para aplicaciones en grandes sistemas.</p> Capas del lenguaje Java Enterprise Edition."},{"location":"ut01/ut0106/#php","title":"PHP","text":"<ul> <li>Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas.</li> <li>En un principio, lenguaje no tipado.</li> <li>Actualmente se encuentra en la versi\u00f3n 8; se recomienda al menos utilizar una versi\u00f3n superior a la 7.0.</li> <li>C\u00f3digo embebido en el HTML.</li> <li>Instrucciones entre etiquetas <code>&lt;?php</code>  y  <code>?&gt;</code>  ; para generar c\u00f3digo dentro de PHP, podemos usar la instrucci\u00f3n <code>echo</code>.</li> <li>Multitud de librer\u00edas y frameworks (Laravel, Symfony, Codeigniter, Zend, ...).</li> </ul> <p>Su documentaci\u00f3n es bastante completa:   https://www.php.net/manual/es/index.php{:target=\"_blank\"}.</p> Mapa mental de resumen de elementos del lenguaje PHP. <p>Durante las siguientes unidades vamos a estudiar PHP en profundidad.</p>"},{"location":"ut01/ut0107/","title":"1.7. Puesta en marcha","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con las herramientas comentadas. </p> <p>!!!info \"Versiones\"     A lo largo del curso vamos a usar <code>PHP 8.0</code>.</p>"},{"location":"ut01/ut0107/#1-opcion-1-xampp","title":"1. Opci\u00f3n 1: XAMPP","text":"<p>XAMPP ( https://www.apachefriends.org/es/index.html{:target=\"_blank\"}) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas:</p> <ul> <li>X para el sistema operativo (de ah\u00ed que se conozca tambi\u00e9n como LAMP o WAMP).</li> <li>A para Apache.</li> <li>M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web.</li> <li>P para PHP.</li> <li>P para Perl.</li> </ul> <p>Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha.</p> <p>!!!tip \"XAMPP vs Docker en Windows\"     Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajar con Windows como sistema operativo.</p>"},{"location":"ut01/ut0107/#2-opcion-2-docker","title":"2. Opci\u00f3n 2: Docker","text":"<p>Docker (https://www.docker.com{:target=\"_blank\"}) es un gestor de contenedores; considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo.</p> <p>El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales.</p> <p>As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker.</p> <p>!!!inst \"Instalaci\u00f3n\"     === \"\"         ### 1. Actualizar el Sistema         Antes de comenzar, es recomendable actualizar los paquetes existentes en tu sistema:</p> <pre><code>    ```bash\n    sudo apt update\n    sudo apt upgrade -y\n    ```\n\n    ### 2. Instalar las Dependencias\n    Instala las dependencias necesarias para Docker:\n\n    ```bash\n    sudo apt install -y ca-certificates curl gnupg lsb-release\n    ```\n\n    ### 3. Agregar la Clave GPG de Docker\n    Agrega la clave GPG oficial de Docker a tu sistema:\n\n    ```bash\n    sudo mkdir -m 0755 -p /etc/apt/keyrings\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n    ```\n\n    ### 4. Agregar el Repositorio de Docker\n    A\u00f1ade el repositorio de Docker a tus fuentes de APT:\n\n    ```bash\n    echo \\\n      \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n      $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n    ```\n\n    ### 5. Actualizar el \u00cdndice de Paquetes\n    Actualiza el \u00edndice de paquetes de APT nuevamente para incluir el nuevo repositorio:\n\n    ```bash\n    sudo apt update\n    ```\n\n    ### 6. Instalar Docker Engine, Docker CLI y Containerd\n\n    Ahora, instala Docker usando el comando apt:\n\n    ```bash\n    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n    ```\n\n    ### 7. Verificar la Instalaci\u00f3n de Docker\n\n    Para verificar que Docker se haya instalado correctamente, ejecuta:\n\n    ```bash\n    sudo docker --version\n    ```\n\n    Deber\u00edas ver la versi\u00f3n de Docker instalada.\n\n    ### 8. Permitir Ejecuci\u00f3n de Docker sin Sudo (Opcional)\n\n    Si quieres ejecutar Docker sin usar `sudo`, agrega tu usuario al grupo `docker`:\n\n    ```bash\n    sudo usermod -aG docker $USER\n    ```\n\n    Despu\u00e9s de ejecutar este comando, cierra la sesi\u00f3n y vuelve a iniciarla para que los cambios tengan efecto.\n\n    ### 9. Probar Docker\n\n    Verifica que Docker est\u00e9 funcionando correctamente ejecutando un contenedor de prueba:\n\n    ```bash\n    docker run hello-world\n    ```\n\n    Este comando descargar\u00e1 una imagen de prueba y ejecutar\u00e1 un contenedor que deber\u00eda mostrar un mensaje de confirmaci\u00f3n en la terminal.\n\n    ### 10. Instalar Docker Desktop en Ubuntu (Opcional)\n\n    Si deseas usar Docker Desktop en Ubuntu, sigue estos pasos adicionales:\n\n    10.1) **Descargar Docker Desktop para Linux**: Visita la p\u00e1gina de descarga de Docker Desktop y descarga la versi\u00f3n para Linux.\n\n    10.2) **Instalar Docker Desktop**: Descomprime el archivo descargado y ejecuta el instalador:\n\n       ```bash\n       sudo apt-get install ./docker-desktop-&lt;version&gt;-&lt;arch&gt;.deb\n       ```\n\n    10.3) **Ejecutar Docker Desktop**: Inicia Docker Desktop desde tu entorno gr\u00e1fico o ejecutando `docker-desktop` en la terminal.\n\n    10.4) **Configurar Docker Desktop**: Cuando se inicie Docker Desktop por primera vez, puedes configurarlo para usar WSL 2 o bien ejecutar contenedores nativos en Linux.\n\n    ### 11. Configurar Docker Desktop (Opcional)\n\n    Si deseas hacer configuraciones adicionales como la cantidad de recursos que Docker puede usar, puedes hacerlo desde la interfaz gr\u00e1fica de Docker Desktop.\n\n    Con estos pasos, deber\u00edas tener Docker y Docker Desktop completamente instalados y listos para usar en tu sistema Ubuntu.\n    &lt;hr&gt;\n\n    Si a\u00fan as\u00ed no se pudiera lanzar Docker Desktop en Ubuntu, podemos instalar el **contenedor Portainer** (puedes ver c\u00f3mo funciona en el siguiente punto **docker de gesti\u00f3n de dockers Portainer**).\n\n=== \"&lt;div style=\"text-align:center;\"&gt;&lt;img src=\"../../img/windows.png\" alt=\"windows\" width=40 height=40 \" /&gt;&lt;/div&gt;\"\n    ### 1. Instalaci\u00f3n de Docker-Desktop\n    Para una instalaci\u00f3n en Windows lo ideal es instalar la aplicaci\u00f3n **Docker Desktop** ( [https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop){:target=\"_blank\"}  ) en nuestros entornos de desarrollo (el cual ya incluye en n\u00facleo de *Docker* y la herramienta *Docker Compose*).\n    Esta instalaci\u00f3n requiere de un software adicional **WSL2**, el cual es un subsistema de *Linux* dentro de *Windows*; [aqu\u00ed](https://learn.microsoft.com/es-es/windows/wsl/install){:target=\"_blank\"}  podemos consultar sus m\u00e9todos de instalaci\u00f3n. \n    Por suerte, con la misma instalaci\u00f3n de *Docker Desktop*, viene tambi\u00e9n la de *WSL* (solo deberemos tener en cuenta tener el check de instalaci\u00f3n activado).\n\n    Cuando termine la instalaci\u00f3n, reinicia tu m\u00e1quina.\n    &lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;&lt;img src=\"../../img/ut01/dockerdesktop.png\" alt=\"dockerdesktop\" style=\"zoom:70%;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;Interfaz programa Docker Desktop&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;\n\n    ### 2. Verificar la instalaci\u00f3n\n    Una vez Docker est\u00e9 instalado, abre **PowerShell** o **Command Prompt** y verifica la instalaci\u00f3n:\n    ````powershell\n    docker --version\n    docker-compose --version\n    ````\n\n    ### 3. Crear o abrir el archivo `docker-compose.yml`\n    Aseg\u00farate de tener un archivo `docker-compose.yml` en el directorio en el que vas a trabajar. Este archivo define la configuraci\u00f3n de tus servicios.\n    Ejemplo de un archivo docker-compose.yml sencillo:\n    ````yaml\n    version: '3'\n    services:\n      web:\n        image: nginx\n        ports:\n          - \"8080:80\"\n    ````\n\n    ### 4. Levantar el contenedor usando Docker Compose\n    4.1) Abre una ventana de PowerShell, Command Prompt o Terminal (si usas WSL).&lt;br /&gt;\n    4.2) Navega al directorio donde se encuentra tu archivo docker-compose.yml.&lt;br /&gt;\n    ````powershell\n    cd ruta/al/directorio\n    ````\n    4.3) Una vez est\u00e9s en el directorio adecuado, ejecuta el siguiente comando para levantar los servicios definidos en el archivo:\n    ````powershell\n    docker-compose up -d\n    ````\n\n    ### 5. Verificar que los contenedores est\u00e1n corriendo\n    Despu\u00e9s de ejecutar docker-compose up, puedes verificar que los contenedores est\u00e1n en ejecuci\u00f3n con:\n    ````powershell\n    docker ps\n    ````\n        Si todo est\u00e1 correcto, deber\u00edas ver los contenedores definidos en el archivo `docker-compose.yml` listados.&lt;br /&gt;\n\n    ### 6. Acceso a los servicios\n    Si el archivo `docker-compose.yml` incluye servicios con puertos expuestos (como en el ejemplo de Nginx), puedes acceder a ellos desde tu navegador usando localhost y el puerto definido, por ejemplo:\n    ````powershell\n    http://localhost:8080\n    ````\n</code></pre> <p>???note \"docker de gesti\u00f3n de dockers Portainer\"     Portainer es una forma c\u00f3moda de gestionar entornos de contenedores distribuidos. </p> <pre><code>El software se instala como un contenedor Docker y, por tanto, se ejecuta pr\u00e1cticamente en cualquier lugar. Mostramos la rutina de instalaci\u00f3n y aportamos \u00fatiles consejos.\n\n### Instalar\n\n```sh\n$ sudo docker volume create portainer_data\n$ sudo docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n```\n\n&lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;&lt;img src=\"../../img/ut01/docker_portainer1.png\" alt=\"docker_portainer1\" style=\"zoom:100%;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;Instalaci\u00f3n del contenedor Portainer desde terminal.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;\n\n### Lanzar\n\nComo otro contenedor, podremos acceder a \u00e9l mediante un navegador (Firefox, Chrome, ...) introduciendo la URL: **localhost:9443**\n\n&lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;&lt;img src=\"../../img/ut01/docker_portainer2.png\" alt=\"docker_portainer2\" style=\"zoom:80%; border: 2px solid #fff2c9;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;Acceso a docker Portainer desde el puerto 9000.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;\n\nSi muestra el siguiente texto, debemos reiniciar el contenedor del Docker Portainer:\n\n&lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;&lt;img src=\"../../img/ut01/docker_portainer3.png\" alt=\"docker_portainer3\" style=\"zoom:80%; border: 2px solid #fff2c9;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;Pesta\u00f1a indicando reiniciar el docker Portainer.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;\n\nVolvemos a acceder v\u00eda **localhost:9000**:\n\n&lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;&lt;img src=\"../../img/ut01/docker_portainer4.png\" alt=\"docker_portainer4\" style=\"zoom:80%; border: 2px solid #fff2c9;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;Pesta\u00f1a de inicio de docker Portainer.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;\n\n### Funciona como un docker\n\nPara ver el ID de contenedor podemos listar los contenedores:\n\n```sh\n$ sudo docker ps -a\n```\n\nPara parar el contenedor:\n\n```sh\n$ sudo docker stop [ID]\n```\n\nPara volver a lanzar el contenedor:\n\n```sh\n$ sudo docker start [ID]\n```\n</code></pre> <p>A lo largo del curso iremos creando diferentes contenedores con los servicios necesarios, de manera que cada vez s\u00f3lo trabajemos con el software m\u00ednimo.</p> <p>Respecto a <code>Docker</code>, para escribir los apuntes hemos utilizado la version <code>20.10</code> y en Docker Compose la version <code>2.19</code>.</p> <p>Finalmente, la versi\u00f3n de <code>Docker Desktop</code> que hemos utilizado es la <code>4.0</code>.</p>"},{"location":"ut01/ut0107/#21-plantilla-servidor-web-php","title":"2.1. Plantilla Servidor Web + PHP","text":"<p>Docker se basa en el uso de im\u00e1genes para crear contenedores. Docker Compose simplifica el trabajo con m\u00faltiples contenedores, y por ello, para facilitar el arranque, nos centraremos en Docker Compose utilizando una plantilla que \u00fanicamente va a contener como servicios Apache/Nginx y PHP.</p> <p>Para ello, vamos crear una carpeta de nombre <code>proyecto1</code>, y dentro de este el archivo <code>docker-compose.yaml</code> con:</p> <p>!!!note \"proyecto1 con distintos servidores en <code>docker-compose.yml</code>\"     === \"Apache y PHP\"         * Estructura del proyecto: <code>bash         proyecto1/         \u2502         \u251c\u2500\u2500 docker-compose.yml         \u2514\u2500\u2500 src/    # Carpeta del proyecto</code>         * Fichero <code>docker-compose.yml</code>:         ```yaml         version: '3.8'</p> <pre><code>    services:\n      web:\n        image: php:8.2-apache\n        container_name: apache_php\n        ports:\n          - \"8081:80\"\n        volumes:\n          - ./src:/var/www/html\n        environment:\n          APACHE_RUN_USER: www-data\n          APACHE_RUN_GROUP: www-data\n          APACHE_LOG_DIR: /var/log/apache2\n        networks:\n          - webnet\n\n    networks:\n      webnet:\n        driver: bridge\n    ```             \n=== \"Nginx y PHP\"\n    * **Estructura del proyecto**:&lt;br /&gt;\n    ```bash\n    proyecto2/\n    \u2502\n    \u251c\u2500\u2500 docker-compose.yml\n    \u251c\u2500\u2500 .docker\n    \u2502   \u251c\u2500\u2500\u2500 nginx\n    \u2502   \u2502   \u2514\u2500\u2500 conf.d\n    \u2502   \u2502      \u2514\u2500\u2500 php.conf  # Archivo configuraci\u00f3n php en Nginx\n    \u2514\u2500\u2500 src/    # Carpeta del proyecto\n    ```\n    * **Fichero `docker-compose.yml`**:&lt;br /&gt;\n    ```yaml\n    version: '3.8'\n\n    services:\n      nginx:\n        image: nginx:1.19\n        ports:\n          - \"8082:80\"  # Aseg\u00farate de que el puerto est\u00e1 correctamente mapeado\n        volumes:\n          - ./src:/var/www/php\n          - ./.docker/nginx/conf.d:/etc/nginx/conf.d  # Configuraci\u00f3n personalizada de Nginx\n        depends_on:\n          - php\n        networks:\n          - webnet\n\n      php:\n        image: php:8.0-fpm\n        working_dir: /var/www/php\n        volumes:\n          - ./src:/var/www/php\n        networks:\n          - webnet\n\n    networks:\n      webnet:\n        driver: bridge\n    ``` \n    Aseg\u00farate de que tu archivo de configuraci\u00f3n de Nginx est\u00e1 correctamente configurado. Aqu\u00ed hay un ejemplo b\u00e1sico que debes colocar en **./.docker/nginx/conf.d/default.conf**:\n\n    ```yaml\n    server {\n        listen 80;\n        server_name localhost;\n\n        root /var/www/php;\n        index index.php index.html index.htm;\n\n        location / {\n            try_files $uri $uri/ /index.php?$args;\n        }\n\n        location ~ \\.php$ {\n            include fastcgi_params;\n            fastcgi_pass php:9000;  # Aseg\u00farate de que este nombre coincide con el nombre del servicio PHP\n            fastcgi_index index.php;\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        }\n    }\n    ```\n</code></pre> <p>Dentro de la carpeta que contenga dicho archivo, hemos de crear una carpeta <code>src</code> donde colocaremos nuestro c\u00f3digo fuente.</p> <p>Para facilitar la puesta en marcha, ten\u00e9is las plantillas de:</p> <ul> <li>Apache/PHP{:target=\"blank\"} (versi\u00f3n 2{:target=\"blank\"} con <code>a2enmod rewrite</code>) o </li> <li>Nginx/PHP{:target=\"blank\"} </li> </ul> <p>disponibles para su descarga.</p> <p>???hint \"\u00d3rdenes en Docker\"     Cuando estemos listos, lanzaremos el servicio mediante:</p> <pre><code>```sh\ndocker-compose up -d\n```\nDocker Compose primero buscar\u00e1 la imagen definida en su sistema local, y si no puede encontrar la imagen, descargar\u00e1 la imagen desde Docker Hub. Ver\u00e1s un resultado como este:\n&lt;div style=\"text-align:center;\"&gt;&lt;img src=\"../../img/ut01/docker-compose-up-d.png\" alt=\"holamundo\" style=\"zoom:80%; border: 2px solid #fff2c9;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;Descarga e instalaci\u00f3n de im\u00e1genes de docker-compose.yml&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;\nSi queremos ver el contenido de los archivos de **log** del servicio utilizaremos:\n\n```sh\ndocker-compose logs -f\n```\n\nPara **copiar un archivo** desde nuestro sistema al interior del contenedor:\n\n```sh\ndocker cp ./miFichero idContenedor:/tmp\n```\n\nY al rev\u00e9s, si queremos consultar un archivo contenido dentro de un contenedor, lo copiaremos a nuestro sistema:\n\n```sh\ndocker cp idContenedor:/tmp/archivoAConsultar.txt ./\n```\n\nFinalmente, si queremos acceder a un terminal interactivo dentro del contenedor:\n\n```sh\ndocker exec -it nombreContenedor bash\n```\n\nOtros comandos que podemos llegar a utilizar son:\n\n- `docker ps`: Ver los contenedores que se estan ejecutando.\n- `docker ps -a`: Ver todos los contenedores.\n- `docker start nombreContenedor`: Arrancar un contenedor.\n- `docker images`: Ver las im\u00e1genes que tenemos descargadas.\n- `docker stop $(docker ps -a -q)`: Detener todos los contenedores en ejecuci\u00f3n.\n- `docker rm $(docker ps -a -q)`: Eliminar todos los contenedores detenidos.\n</code></pre> <p>!!!info \"Docker stack\"     Existen diversas opciones mediante Docker que ofrecen soluciones completas y empaquetadas para todo el stack de desarrollo. En posteriores sesiones podremo utilizar tanto Devilbox (http://devilbox.org{:target=\"_blank\"}) como Laradock (https://laradock.io{:target=\"_blank\"}).</p> <p>!!!info \"... pero quiero saber c\u00f3mo funciona ...\"     En el m\u00f3dulo de \"Despliegue de aplicaciones\" estudiar\u00e9is en profundidad, adem\u00e1s de Docker, Apache y otros servicios que nos servir\u00e1n de ayuda para el desarrollo en entorno servidor.</p>"},{"location":"ut01/ut0107/#3-editor-de-codigo","title":"3. Editor de c\u00f3digo","text":"<p>En este curso vamos a emplear Visual Studio Code (https://code.visualstudio.com{:target=\"_blank\"}) como editor de c\u00f3digo fuente. Existen otras alternativas, siendo PhpStorm el IDE  m\u00e1s conocido (pero de pago). Otra posibilidad es utilizar Eclipse, aunque es un entorno bastante pesado.</p> <p>VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones:</p> <ul> <li>PHP</li> <li>PHP Debug: para la depuraci\u00f3n de c\u00f3digo PHP. Permite conectar VSCode a un servidor de depuraci\u00f3n PHP y proporciona herramientas para inspeccionar variables, establecer puntos de interrupci\u00f3n y realizar un seguimiento detallado del flujo de ejecuci\u00f3n.</li> <li>PHP IntelliSense: extensi\u00f3n fundamental, aporta mucha velocidad de escritura gracias al \u00abintellisense\u00bb. Mejora la codificaci\u00f3n al proporcionar sugerencias inteligentes de c\u00f3digo y completar autom\u00e1ticamente fragmentos de c\u00f3digo mientras escribes en PHP.</li> <li>Php Intelephense: ofrece caracter\u00edsticas avanzadas para desarrolladores PHP, como autocompletado inteligente, an\u00e1lisis est\u00e1tico y soporte para PHPDoc. Ayuda a detectar errores y a escribir c\u00f3digo m\u00e1s eficiente.</li> <li>PHP DocBlocker: simplifica la creaci\u00f3n de comentarios tipo DocBlock para sus funciones y m\u00e9todos PHP. Con solo presionar un atajo de teclado, puede generar r\u00e1pidamente documentaci\u00f3n legible y \u00fatil para tu c\u00f3digo.</li> <li>PHP Code Sniffer: asegura que el c\u00f3digo PHP cumpla con los est\u00e1ndares de codificaci\u00f3n establecidos. Puedes personalizar las reglas seg\u00fan las necesidades de tu proyecto.</li> <li>PHP CS Fixer: automatiza la correcci\u00f3n de problemas de formato en tu c\u00f3digo PHP, manteni\u00e9ndolo limpio y coherente con facilidad.</li> <li>PHP Namespace Resolver</li> <li>Docker</li> </ul> <p>En la siguiente sesi\u00f3n comenzaremos a utilizar Intelephense pero en esta sesi\u00f3n nos vamos a centrar en Docker (m\u00e1s adelante instalaremos nuevas extensiones).</p> <p>Por ejemplo, si abrimos la extensi\u00f3n de Docker, podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo:</p> Extensi\u00f3n Docker en Visual Studio Code"},{"location":"ut01/ut0107/#31-configurar-llaves-php-en-vs-code","title":"3.1. Configurar llaves PHP en VS Code","text":"<p>Ir a Archivo/Preferencias/Configurar fragmentos de usuario (File/Preferences/User Snippets) seleccionar la opci\u00f3n html y agregar el snippet en el fichero html.json:</p> <pre><code>    \"php\": {\n        \"prefix\": \"php\",\n        \"body\": [\n            \"&lt;?php\",\n            \"$1\",\n            \"?&gt;\"\n        ],\n        \"description\": \"php tag\"\n    }\n</code></pre> <p>A partir de ahora podremos abreviar la introducci\u00f3n de las etiquetas <code>&lt;?php</code> y <code>?&gt;</code> en VS Code introduciendo php + TAB.</p>"},{"location":"ut01/ut0107/#4-hola-mundo","title":"4. Hola Mundo","text":"<p>Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP.</p> <p>Si nombramos el archivo como index.php, al acceder a http://localhost autom\u00e1ticamente cargar\u00e1 el resultado:</p> <p>=== \"Php\"     <code>Php     &lt;!DOCTYPE html&gt;     &lt;html lang=\"es\"&gt;     &lt;head&gt;         &lt;meta charset=\"UTF-8\"&gt;         &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;         &lt;title&gt;Hola Mundo&lt;/title&gt;     &lt;/head&gt;     &lt;body&gt;         &lt;?php             echo \"Hola Mundo\";         ?&gt;     &lt;/body&gt;     &lt;/html&gt;</code> === \"Resultado\"     P\u00e1gina en php: Hola Mundo.</p>"},{"location":"ut01/ut01ac/","title":"Ejercicios","text":""},{"location":"ut01/ut01ac/#ejercicio-101","title":"Ejercicio 101","text":"<p>Busca en Internet cu\u00e1les son los tres frameworks PHP m\u00e1s utilizados, e indica:</p> <ul> <li>Nombre y URL</li> <li>A\u00f1o de creaci\u00f3n</li> <li>\u00daltima versi\u00f3n</li> </ul>"},{"location":"ut01/ut01ac/#ejercicio-102","title":"Ejercicio 102","text":"<p>Busca tres ofertas de trabajo de desarrollo de software en Infojobs en la Comunidad Valenciana que citen PHP y anota:</p> <ul> <li>Empresa + puesto + frameworks PHP + requisitos + sueldo + enlace a la oferta.</li> </ul>"},{"location":"ut01/ut01ac/#ejercicio-103","title":"Ejercicio 103","text":"<p>Instala (mediante XAMPP o Docker) la dupla Apache+Php2.</p> <p>Utiliza el puerto 8082 para Apache (en el fichero docker-compose.yml).</p> <p>Estructura del contenedor:</p> <pre><code>ApachePhp2/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 .docker/    # Carpeta de configuraci\u00f3n\n\u2502  \u2514\u2500\u2500 php.ini  # Fichero configuraci\u00f3n php\n\u2514\u2500\u2500 src/        # Carpeta del proyecto\n</code></pre>"},{"location":"ut01/ut01ac/#ejercicio-104","title":"Ejercicio 104","text":"<p>Instala (mediante Docker) la dupla Nginx+Php2.</p> <p>Utiliza el puerto 8083 para Nginx (en el fichero docker-compose.yml).</p> <pre><code>ApachePhp2/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 .docker/    # Carpeta de configuraci\u00f3n\n\u2502  \u2514\u2500\u2500 nginx    \n\u2502     \u2514\u2500\u2500 conf.d\n\u2502        \u2514\u2500\u2500 default.conf # Fichero configuraci\u00f3n de servidor Nginx\n\u2514\u2500\u2500 src/        # Carpeta del proyecto\n</code></pre>"},{"location":"ut01/ut01ac/#ejercicio-105","title":"Ejercicio 105","text":"<p>Si finalmente has instalado mediante dockers los dos servidores web, instala tambi\u00e9n el docker Portainer y echa un vistazo (haciendo varias capturas).</p> <pre><code>sudo docker volume create portainer_data\nsudo docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n</code></pre>"},{"location":"ut01/ut01ac/#ejercicio-106","title":"Ejercicio 106","text":"<p>Una vez arrancado el servicio PHP (mediante XAMPP o Docker), crea el archivo <code>info.php</code> y a\u00f1ade el siguiente fragmento de c\u00f3digo:</p> <pre><code>&lt;?php phpinfo() ?&gt;\n</code></pre> <p>Anota los valores de: </p> <ul> <li>Versi\u00f3n de PHP</li> <li><code>Loaded Configuration File</code> </li> <li><code>memory_limit</code></li> <li><code>DOCUMENT_ROOT</code></li> </ul>"},{"location":"ut01/ut01de/","title":"Descargas","text":""},{"location":"ut01/ut01de/#plantillas-docker-de-servidores-web-php","title":"Plantillas docker de servidores web + Php","text":"<ul> <li>plantilla Apache + Php</li> <li>plantilla Apache + Php 2</li> <li>plantilla Nginx + Php</li> <li>plantilla Apache + Php + MySql + phpMyAdmin</li> <li>Xampp</li> </ul>"},{"location":"ut02/ut0201/","title":"2.1. Introducci\u00f3n","text":"<p>Duraci\u00f3n estimada: 20 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA2. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. a) Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido. b) Se han identificado las principales tecnolog\u00edas asociadas. c) Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas. d) Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar. e) Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante. f) Se han utilizado directivas para modificar el comportamiento predeterminado. g) Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje. h) Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables. RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. a) Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias. b) Se han utilizado bucles y se ha verificado su funcionamiento. c) Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos. d) Se han creado y utilizado funciones. e) Se han utilizado formularios web para interactuar con el usuario del navegador Web. f) Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario. g) Se han a\u00f1adido comentarios al c\u00f3digo. <p>\u200b   </p>"},{"location":"ut02/ut0202/","title":"2.2. PHP","text":"<ul> <li>Acr\u00f3nimo de Personal Home Page.</li> <li>Lenguaje de prop\u00f3sito general, aunque su fuerte es el desarollo web.</li> <li>Sintaxis similar a C / Java.</li> <li>El c\u00f3digo se ejecuta en el servidor (en Apache mediante <code>mod_php</code>).</li> <li>El cliente recibe el resultado generado tras interpretar el c\u00f3digo en el servidor.</li> <li>El c\u00f3digo se almacena en archivo con extensi\u00f3n <code>.php</code>.</li> </ul> <p>La \u00faltima versi\u00f3n es la 8.3, de noviembre de 2023 (y se tiene previsto la liberaci\u00f3n de PHP 8.4 para el 21 de noviembre de 2024). Adem\u00e1s de numerosas nuevas funcionalidades que iremos viendo durante el curso, tiene m\u00e1s de dos veces mejor rendimiento que PHP5.</p> <p>Su documentaci\u00f3n es extensa y est\u00e1 traducida: https://www.php.net/manual/es/{:target=\"_blank\"}.</p>"},{"location":"ut02/ut0202/#1-codigo-embebido","title":"1. C\u00f3digo embebido","text":"<p>Los bloques de c\u00f3digo se escriben entre <code>&lt;?php</code> y <code>?&gt;</code>.</p> <p>Las sentencias se separan mediante <code>;</code>.</p> <p>=== \"Ejemplo en php\"    </p> <pre><code>```php\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;PHP f\u00e1cil&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- Muestra una frase con HTML --&gt;\n  Hola mundo&lt;br&gt;\n  &lt;!-- Muestra una frase con PHP --&gt;\n  &lt;?php echo \"Es muy f\u00e1cil programar en PHP.\"; ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n```\n</code></pre> <p>=== \"Resultado\"</p> <pre><code>&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut02/ut02_prova1.png\" alt=\"prova 01\" style=\"zoom:100%; border: 2px solid #fff2c9;\" /&gt;&lt;/div&gt;\n</code></pre> <p>!!!note \"S\u00f3lo etiquetas de apertura\"     Si nuestro c\u00f3digo s\u00f3lo va a contener c\u00f3digo PHP y nada de html, como por ejemplo, cuando codifiquemos clases o interfaces, s\u00f3lo pondremos la etiqueta de apertura, para as\u00ed indicar que es una archivo de php puro.</p>"},{"location":"ut02/ut0202/#2-generando-codigo","title":"2. Generando c\u00f3digo","text":"<p>Tenemos tres posibilidades a la hora de generar contenido en nuestros documentos PHP:</p> <ul> <li><code>echo expresi\u00f3n;</code></li> <li><code>&lt;?= expresi\u00f3n ?&gt;</code></li> <li><code>print (expresi\u00f3n);</code></li> </ul> <p>Las que vamos a utilizar son:</p> <ul> <li><code>echo</code> cuando lo hagamos dentro de un bloque de instrucciones y </li> <li><code>&lt;?=</code> cuando s\u00f3lo vayamos a mostrar el valor de una variable dentro de un fragmento HTML.</li> </ul> <p>=== \"Ejemplo php\"</p> <pre><code>```php\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Echo y print&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\"; ?&gt;&lt;/p&gt;\n  &lt;p&gt;&lt;?= \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;&lt;br&gt;\n  &lt;p&gt;&lt;?php print(\"Este texto se mostrar\u00e1 en la p\u00e1gina web.\"); ?&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n```\n</code></pre> <p>=== \"Resultado\"     </p>"},{"location":"ut02/ut0202/#3-comentarios","title":"3. Comentarios","text":"<p>Podemos utilizar comentarios de una l\u00ednea o de bloque:</p> <p>=== \"Ejemplo comentarios\"</p> <pre><code>```php\n&lt;?php\n// Este es un comentario de una sola l\u00ednea&lt;br&gt;\n\n/*\n  Este es\n  un comentario\n  que ocupa\n  varias l\u00edneas\n*/ \n?&gt;\n```\n</code></pre> <p>=== \"Resultado\"</p> <pre><code>&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut02/ut02_prova3_com.png\" alt=\"prova 01\" style=\"zoom:100%; border: 2px solid #fff2c9;\" /&gt;&lt;/figure&gt;&lt;/div&gt;\n</code></pre> <p>!!!info \"Abrievatura en VS Code de comentarios:\"     Comentario de una l\u00ednea: <code>Ctrl</code> + <code>/</code>: Comenta o descomenta la l\u00ednea actual o las l\u00edneas seleccionadas.     Comentario de bloque (multil\u00ednea): <code>Shift</code> + <code>Alt</code> + <code>A</code>: Inserta o elimina un comentario de bloque alrededor del texto seleccionado.</p>"},{"location":"ut02/ut0202/#4-errores","title":"4. Errores","text":"<p>Si hay un error de ejecuci\u00f3n, se produce un Fatal Error.</p> Ejemplo de error de ejecuci\u00f3n. <p>Desde PHP 5 se lanzan como una excepci\u00f3n. M\u00e1s adelante veremos el uso de <code>try</code> / <code>catch</code>.</p>"},{"location":"ut02/ut0202/#5-variables","title":"5. Variables","text":"<ul> <li>No es necesario declararlas previamente.</li> <li>Comienzan por <code>$</code>, por ejemplo <code>$nombre</code>, seguido de un caracter en letra min\u00fascula (recomendaci\u00f3n) o gui\u00f3n bajo _. Luego ya se pueden poner n\u00fameros.</li> <li>Son case sensitive: <code>$var != $vAR</code>.</li> <li>No se declara su tipo, el tipado es din\u00e1mico. Se asigna en tiempo de ejecuci\u00f3n dependiendo del valor asignado.</li> <li>Conveniente: hay que inicializarlas, sino dan error.</li> </ul> <p>=== \"Ejemplo variables\"</p> <pre><code>```php\n&lt;?php\n     $nombre = \"Marta\";\n     $nombreCompleto = \"Marta L\u00f3pez\";\n     $numero = 123;\n     $numero2 = 456;\n     $pi = 3.14;\n     $suerte = true;\n     $sinValor;\n     $_1 = \"el primero\";\n\n     echo $sinValor;\n?&gt;\n```\n</code></pre> <p>=== \"Resultado\"</p> <pre><code>&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut02/ut02_prova4.png\" alt=\"prova 01\" style=\"zoom:100%; border: 2px solid #fff2c9;\" /&gt;&lt;/figure&gt;&lt;/div&gt;\n</code></pre> <p>!!!note \"Tipos de datos\"     Aunque a priori no hay tipos de datos, internamente PHP trabaja con:</p> <pre><code>- cuatro tipos escalares: *boolean*, *integer*, *float* y *string,* y\n- cuatro tipos compuestos: *array*, *object*, *callable* e *iterable*.\n- Existe un tipo especial para *null* (m\u00e1s informaci\u00f3n [aqu\u00ed](http://php.net/manual/es/language.types.null.php){:target=\"_blank\"}).\n</code></pre>"},{"location":"ut02/ut0202/#6-constantes","title":"6. Constantes","text":"<p>Son variables cuyo valor no var\u00edan.</p> <p>Existen dos posibilidades:</p> <ul> <li><code>define(NOMBRE, valor);</code></li> <li><code>const NOMBRE;      // a partir de PHP 5.3</code></li> </ul> <p>=== \"Ejemplo constantes\"</p> <pre><code>```php\n&lt;?php\n      define(\"PI\", 3.1416);\n      const IVA = 0.21;\n\n      echo PI, \" \", IVA; // No se pone el s\u00edmbolo dolar\n?&gt;\n```\n</code></pre> <p>=== \"Resultado\"</p> <pre><code>&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut02/ut02_prova5.png\" alt=\"prova 01\" style=\"zoom:100%; border: 2px solid #fff2c9;\" /&gt;&lt;/figure&gt;&lt;/div&gt;\n</code></pre> <ul> <li>Se declaran siempre en MAY\u00daSCULAS.</li> <li>Hay un conjunto de constantes ya predefinidas, tambi\u00e9n conocidas como magic constants: https://www.php.net/manual/es/language.constants.predefined.php{:target=\"_blank\"}.</li> </ul> <p>??? ies \"Ejercicios a realizar\"     - <code>Ejercicio 201</code>     - <code>Ejercicio 202</code></p>"},{"location":"ca/","title":"\u00cdndice de unidades tem\u00e1ticas   bloque unitat tem\u00e0tica   bloque IPHP UT 01 Arquitectura Web   UT 02 Lenguaje PHP   UT 03 PHP Orientado a Objetos   UT 04 Programaci\u00f3n Web   UT 05 Acceso a base de datos   bloque IILaravel UT 06 Herramientas Web   UT 07 Framework Laravel   UT 08 Laravel: controladores   UT 09 Laravel: modelo de datos   UT 10 Laravel: formularios y validaciones   UT 11 Laravel: servicios REST   UT 12 Laravel: autenticaci\u00f3n de usuarios    <p>!!!cc \"Licencia\"     { align=left width=150 height=150}Uso de estos materiales sujeto a una licencia Creative Commons CC BY-NC-SA{:target=\"blank\"}.Derivado a partir de materiales:     \u00a0\u00a0\u00a0\u00a0- Curso Desarrollo Web en Entorno Servido, de Aitor Medrano y Luis Alema\u00f1{:target=\"blank\"}.     \u00a0\u00a0\u00a0\u00a0- Curso de Laravel, de Nacho Iborra{:target=\"blank\"}.</p>","text":""},{"location":"ca/ut01/ut0101/","title":"1.1. Introducci\u00f3","text":"<p>Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor.</p>"},{"location":"ca/ut01/ut0102/","title":"1.2. Client/Servidor","text":"<p>Uno o varios clientes acceden a un servidor. </p> <p>Las nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes.</p> Modelo Cliente-Servidor <p>En las aplicaciones web, el cliente es el navegador web.</p> <p>El cliente hace la petici\u00f3n (request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde (response).</p>"},{"location":"ca/ut01/ut0103/","title":"1.3. Arquitectura de 3 capes","text":"<p>Hay que distinguir entre capas f\u00edsicas (tier) y capas l\u00f3gicas (layer).</p>"},{"location":"ca/ut01/ut0105/","title":"1.5. Decisions de disseny","text":"<p>??? question \"\u00bfQu\u00e9 tama\u00f1o tiene el proyecto?\"     El tama\u00f1o del proyecto influye directamente en la complejidad de la arquitectura, la elecci\u00f3n de herramientas y la planificaci\u00f3n de recursos. Para proyectos peque\u00f1os, una soluci\u00f3n simple y directa podr\u00eda ser suficiente, mientras que los proyectos m\u00e1s grandes requerir\u00e1n una arquitectura m\u00e1s escalable, pruebas m\u00e1s rigurosas y una gesti\u00f3n m\u00e1s detallada del c\u00f3digo.</p> <p>??? question \"\u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo?\"     Usar un lenguaje que ya conoces puede acelerar el desarrollo, ya que te sentir\u00e1s m\u00e1s c\u00f3modo y eficiente. Sin embargo, si el proyecto requiere caracter\u00edsticas espec\u00edficas que se manejan mejor con otro lenguaje, o si aprender uno nuevo te abre mejores oportunidades a largo plazo, puede valer la pena el esfuerzo. Debes considerar el tiempo de aprendizaje y c\u00f3mo impacta en el cronograma del proyecto.</p> <p>??? question \"\u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales?\"     Las herramientas de c\u00f3digo abierto suelen ser m\u00e1s econ\u00f3micas y flexibles, pero pueden requerir m\u00e1s soporte y mantenimiento por tu parte. Las soluciones comerciales pueden ofrecer m\u00e1s soporte y caracter\u00edsticas avanzadas, pero suelen tener un coste asociado. Deber\u00e1s evaluar el presupuesto disponible y las necesidades de soporte y funcionalidad del proyecto.</p> <p>??? question \"\u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores?\"     Si trabajas solo, puedes tomar decisiones m\u00e1s flexibles y r\u00e1pidas, adaptadas a tus preferencias y habilidades. Si trabajas en un equipo, la colaboraci\u00f3n y la coherencia en el c\u00f3digo se vuelven m\u00e1s importantes, por lo que deber\u00e1s considerar herramientas de control de versiones, gu\u00edas de estilo de c\u00f3digo, y plataformas de comunicaci\u00f3n y gesti\u00f3n de proyectos.</p> <p>??? question \"\u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario?\"     Si ya tienes servidores o gestores de bases de datos disponibles, deber\u00e1s asegurarte de que las tecnolog\u00edas elegidas sean compatibles con ellos. Si tienes libertad para elegir, podr\u00e1s seleccionar las tecnolog\u00edas que mejor se adapten a las necesidades del proyecto en t\u00e9rminos de rendimiento, escalabilidad y facilidad de uso.</p> <p>??? question \"\u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle?\"     La licencia que elijas afectar\u00e1 c\u00f3mo otros pueden usar, modificar y distribuir tu software. Si planeas mantener el control y limitar el uso comercial, una licencia m\u00e1s restrictiva como GPL puede ser adecuada. Si prefieres permitir un uso m\u00e1s libre, una licencia como MIT o Apache podr\u00eda ser mejor. Tambi\u00e9n debes considerar c\u00f3mo las licencias de las herramientas y librer\u00edas que utilices impactan en tu proyecto.</p> <p>Cada una de estas preguntas influir\u00e1 en c\u00f3mo abordas el desarrollo de tu aplicaci\u00f3n web, y reflexionar sobre ellas te ayudar\u00e1 a tomar decisiones m\u00e1s informadas y coherentes con tus objetivos.</p>"},{"location":"ca/ut01/ut0106/","title":"1.6. Ferramentes","text":"<p>Software que recibe peticiones HTTP (GET, POST, DELETE, ...). Devuelve el recurso solicitado (HTML, CSS, JS, JSON, im\u00e1genes, etc...)</p> <p>El producto m\u00e1s implantando es Apache Web Server (https://httpd.apache.org{:target=\"_blank\"}), creado en 1995.</p> <ul> <li>Software libre y multiplataforma.</li> <li>Sistema de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl.</li> <li>Utiliza el archivo <code>.htaccess</code> para su configuraci\u00f3n.</li> </ul> <p>En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx (https://www.nginx.com{:target=\"_blank\"}). Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache.</p> <p>En este enlace podemos observar una comparativa de servidores web: https://w3techs.com/technologies/history_overview/web_server/ms/q{:target=\"_blank\"}.</p>"},{"location":"ca/ut01/ut0107/","title":"1.7. Posada en marxa","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con las herramientas comentadas. </p> <p>!!!info \"Versiones\"     A lo largo del curso vamos a usar <code>PHP 8.0</code>.</p>"},{"location":"ca/ut01/ut01ac/","title":"Exercicis","text":""},{"location":"ca/ut01/ut01de/","title":"Desc\u00e0rregues","text":""},{"location":"ca/ut02/ut0201/","title":"2.1. Introducci\u00f3","text":"<p>Duraci\u00f3n estimada: 20 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA2. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. a) Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido. b) Se han identificado las principales tecnolog\u00edas asociadas. c) Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas. d) Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar. e) Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante. f) Se han utilizado directivas para modificar el comportamiento predeterminado. g) Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje. h) Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables. RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. a) Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias. b) Se han utilizado bucles y se ha verificado su funcionamiento. c) Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos. d) Se han creado y utilizado funciones. e) Se han utilizado formularios web para interactuar con el usuario del navegador Web. f) Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario. g) Se han a\u00f1adido comentarios al c\u00f3digo. <p>\u200b   </p>"}]}