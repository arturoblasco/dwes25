{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":"\u00cdndice de unidades tem\u00e1ticas bloque unidad tem\u00e1tica bloque PHP UT 01 Arquitectura Web UT 02 Lenguaje PHP UT 03 PHP Orientado a Objetos UT 04 Programaci\u00f3n Web UT 05 Acceso a base de datos bloque Laravel UT 06 Herramientas Web UT 07 Framework Laravel UT 08 Laravel: controladores UT 09 Laravel: modelo de datos UT 10 Laravel: formularios y validaciones UT 11 Laravel: servicios REST UT 12 Laravel: autenticaci\u00f3n de usuarios <p>Licencia</p> <p>Uso de estos materiales sujeto a una licencia Creative Commons CC BY-NC-SA.Derivado a partir de materiales: \u00a0\u00a0\u00a0\u00a0- Curso Desarrollo Web en Entorno Servido, de Aitor Medrano y Luis Alema\u00f1. \u00a0\u00a0\u00a0\u00a0- Curso de Laravel, de Nacho Iborra.</p>"},{"location":"default/","title":"Default","text":"<p>... p\u00e1gina en construcci\u00f3n ...</p>"},{"location":"projecte_laravel/","title":"Projecte laravel","text":""},{"location":"projecte_laravel/#proyecto-gestion-de-compras-y-productos","title":"Proyecto Gesti\u00f3n de Compras y Productos","text":"<p>Este proyecto consiste en desarrollar una aplicaci\u00f3n web con Laravel que permita gestionar roles, usuarios, productos y compras. La aplicaci\u00f3n permitir\u00e1 que los usuarios se registren, inicien sesi\u00f3n, visualicen productos disponibles, realicen compras y consulten su historial de pedidos. Se implementar\u00e1n relaciones entre las entidades para gestionar la informaci\u00f3n de manera eficiente.</p>"},{"location":"projecte_laravel/#objetivos","title":"Objetivos","text":"<ol> <li>Implementar un sistema de autenticaci\u00f3n de usuarios con Laravel.</li> <li>Crear y administrar productos con informaci\u00f3n relevante como nombre, descripci\u00f3n, precio y stock.</li> <li>Permitir que los usuarios realicen compras, agregando productos al carrito y confirmando la compra.</li> <li>Implementar una relaci\u00f3n muchos a muchos entre compras y productos mediante una tabla intermedia.</li> <li>Gestionar los datos de las compras realizadas por los usuarios.</li> </ol>"},{"location":"projecte_laravel/#entrega","title":"Entrega","text":"<p>El proyecto debe estar alojado en un repositorio de GitHub o GitLab, con instrucciones claras para su instalaci\u00f3n y ejecuci\u00f3n en un archivo <code>README.md</code>.</p>"},{"location":"projecte_laravel/#aspectos-tecnicos","title":"Aspectos T\u00e9cnicos","text":"<ul> <li>Framework: Laravel (versi\u00f3n 9 o superior).</li> <li>Base de datos: MySQL o PostgreSQL.</li> <li>Autenticaci\u00f3n: Laravel Breeze o Laravel Jetstream.</li> <li>Interfaz: Blade Templates o Vue.js para la parte frontend.</li> <li>Control de versiones: GitHub/GitLab.</li> </ul> <p>Para el framework, tendremos instalado Laravel (cuando se crea esta actividad es la versi\u00f3n 11) a partir de Composer.</p> <p>Para la gesti\u00f3n de base de datos, tendremos instalado XAMPP, docker o (como ser\u00e1 en el que se sigue toda la explicaci\u00f3n de la actividad) Laragon.</p>"},{"location":"projecte_laravel/#1o-crear-proyecto","title":"1\u00ba. Crear proyecto","text":"<p>Para la realizaci\u00f3n del proyecto seguiremos estos pasos:</p> paso 1\u00ba Crear el proyecto laravel <code>gestories</code> 2\u00ba Crear modelos 3\u00ba Crear migragaciones 4\u00ba Crear factories 5\u00ba Crear seeders 6\u00ba Ejecutar migrate (<code>php artisan migrate:fresh --seed</code>) 7\u00ba Crear controladores 8\u00ba Crear rutas <p>Lo primero ser\u00e1 crear nuestro proyecto laravel de nombre gestories.</p> En clase se instalar\u00e1 desde Laragon <p>Desde de su Terminal</p> <p></p> <p></p> <pre><code>laravel new gestories\n</code></pre> <p>1\u00ba. Instalaremos Laravel Breeze</p> <p></p> <p>2\u00ba. Instalaci\u00f3n del paquete: Blade with Apline</p> <p></p> <p>3\u00ba. Soporte a modo oscuro: No</p> <p></p> <p>4\u00ba. Test unitario: PHPUnit</p> <p></p> <p>5\u00ba. Inicializar un repositorio git en el proyecto: S\u00ed</p> <p></p> <p>Instalaci\u00f3n ...</p> <p></p> <p>6\u00ba. Base de datos del proyecto: MySQL</p> <p></p> <p>7\u00ba. Ejecutar las migraciones de la base de datos: S\u00ed</p> <p></p> <p>8\u00ba. Crear conexi\u00f3n mysql a la base de datos (gestories): S\u00ed</p> <p></p> <p>Instalaci\u00f3n ...</p> <p></p> <p>9\u00ba. Instalaci\u00f3n completada. Nos indica que, para lanzar el proyecto en desarrollo, debemos acceder a la carpeta del proyecto (cd gestories) y despu\u00e9s lanzar <code>php artisan serve</code>. </p> <p></p>"},{"location":"projecte_laravel/#base-de-datos","title":"Base de datos","text":""},{"location":"projecte_laravel/#explicacion-del-modelo","title":"Explicaci\u00f3n del Modelo","text":"<ul> <li>Usuarios: Almacena la informaci\u00f3n de los usuarios que realizan compras.</li> <li>Productos: Contiene los productos disponibles para la venta.</li> <li>Compras: Registra las transacciones de compra realizadas por los usuarios.</li> <li>Detalle_Compra: Permite registrar los productos espec\u00edficos que se incluyen en cada compra, junto con la cantidad y el precio unitario.</li> </ul>"},{"location":"projecte_laravel/#entidades-y-atributos","title":"Entidades y Atributos","text":"<ul> <li>Roles (roles)</li> </ul> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>id</code> (PK): Identificador \u00fanico del rol.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>description</code>: Descripci\u00f3n del rol.</p> <ul> <li>Usuarios (users)</li> </ul> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>id</code> (PK): Identificador \u00fanico del usuario</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>name</code>: Nombre del usuario.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>email</code>: Correo electr\u00f3nico del usuario.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>role_id</code> (FK): Identificador del rol del usuario.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>password</code>: Contrase\u00f1a del usuario.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>address</code>: Direcci\u00f3n del usuario.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>telephone</code>: N\u00famero de tel\u00e9fono del usuario.</p> <ul> <li>Productos (products)</li> </ul> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>id</code> (PK): Identificador \u00fanico del producto.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>name</code>: Nombre del producto.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>description</code>: Descripci\u00f3n del producto.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>price</code>: Precio del producto.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>stock</code>: Cantidad disponible en inventario.</p> <ul> <li>Compras (shoppings)</li> </ul> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>id</code> (PK): Identificador \u00fanico de la compra.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>user_id</code> (FK): Identificador del usuario que realiza la compra.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>date</code>: Fecha en que se realiz\u00f3 la compra.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>total</code>: Monto total de la compra.</p> <ul> <li>Detalle_Compra (Tabla intermedia para la relaci\u00f3n muchos a muchos entre Compras y Productos details)</li> </ul> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>id</code> (PK): Identificador \u00fanico del detalle.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>shopping_id</code> (FK): Identificador de la compra.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>product_id</code> (FK): Identificador del producto comprado.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>amount</code>: Cantidad del producto comprado.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - <code>unitprice</code>: Precio unitario del producto al momento de la compra.</p>"},{"location":"projecte_laravel/#relaciones","title":"Relaciones","text":"<ul> <li>users \u2192 shoppings</li> </ul> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - Un usuario puede realizar muchas compras.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - Una compra pertenece a un \u00fanico usuario.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - Relaci\u00f3n: 1 a N (uno a muchos).</p> <ul> <li>shoppings \u2192 products</li> </ul> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - Una compra puede incluir muchos productos.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - Un producto puede estar en muchas compras.</p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - Relaci\u00f3n: N a M (muchos a muchos), resuelta con la tabla intermedia Detalle_Compra.</p>"},{"location":"projecte_laravel/#diagrama-entidad-relacion-descripcion","title":"Diagrama Entidad-Relaci\u00f3n (Descripci\u00f3n)","text":""},{"location":"projecte_laravel/#2o-crear-modelos-completos","title":"2\u00ba. Crear modelos completos","text":"<p>Crea los modelos de las tablas: <code>roles</code>, <code>products</code>,  <code>shoppings</code> y <code>details</code> con todos los par\u00e1metros (<code>--all</code>)</p> <p><pre><code>php artisan make:model Role --all\n</code></pre> <pre><code>php artisan make:model Product --all\n</code></pre> <pre><code>php artisan make:model Shopping --all\n</code></pre> <pre><code>php artisan make:model Detail --all\n</code></pre></p> <p>Trabajar en carpeta <code>app/Models</code></p> <ul> <li>Trabajar en carpeta <code>app/Models</code></li> <li>Los modelos, recuerda, como las clases, en upperCamelCase y singular.</li> </ul>"},{"location":"projecte_laravel/#modelo-role","title":"modelo Role","text":"<pre><code>class Role extends Model\n{\n  use HasFactory;\n\n  protected $fillable = ['description',];\n}\n</code></pre>"},{"location":"projecte_laravel/#modelo-user","title":"modelo User","text":"<p>A\u00f1adir en la variable <code>$fillable</code> los campos <code>address</code> y <code>telephone</code>: <pre><code>//...\nprotected $fillable = [\n    'name',\n    'email',\n    'password',\n    'address',\n    'telephone',\n];\npublic function shoppings()\n{\n    return $this-&gt;hasMany(Shopping::class);\n}\n</code></pre></p>"},{"location":"projecte_laravel/#modelo-product","title":"modelo Product","text":"<pre><code>class Product extends Model\n{\n  use HasFactory;\n\n  protected $fillable = ['name', 'price', 'description', 'stock',];\n}\n</code></pre>"},{"location":"projecte_laravel/#modelo-shopping","title":"modelo Shopping","text":"<pre><code>class Shopping extends Model\n{\n  use HasFactory;\n\n  protected $fillable = ['user_id', 'total', 'date',];\n\n  public function user()\n    {\n        return $this-&gt;belongsTo(User::class);\n    }\n  public function details()\n    {\n        return $this-&gt;hasMany(Detail::class);\n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#modelo-detail","title":"modelo Detail","text":"<pre><code>class Detail extends Model\n{\n    use HasFactory;\n\n    protected $fillable = ['shopping_id', 'product_id', 'amount', 'unitprice'];\n\n    public $timestamps = false; // Deshabilitar timestamps\n\n    public function shopping()\n    {\n        return $this-&gt;belongsTo(Shopping::class);\n    }\n\n    public function product()\n    {\n        return $this-&gt;belongsTo(Product::class);\n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#3o-migraciones","title":"3\u00ba. Migraciones","text":""},{"location":"projecte_laravel/#eliminar-migraciones-existentes","title":"Eliminar migraciones existentes","text":"<p>Desde nuestro proyecto (en Visual Studio Code), acceder a <code>database/migrations</code> y eliminar estos dos ficheros de migraciones que no vamos a usar:</p> <ul> <li> <p><code>0001_01_01_000002_create_jobs_table.php</code></p> </li> <li> <p><code>0001_01_01_000001_create_cache_table.php</code></p> </li> </ul>"},{"location":"projecte_laravel/#modificar-la-migracion-de-la-tabla-users","title":"Modificar la migraci\u00f3n de la tabla <code>users</code>","text":"<ol> <li> <p>Renombrar el fichero de <code>0001_01_01_000000_create_users_table.php</code>   a  <code>0001_01_01_000001_create_users_table.php</code>.</p> </li> <li> <p>Modificar el esquema de creaci\u00f3n de la tabla <code>users</code> para introducir nuevos campos:</p> </li> </ol> <pre><code>    Schema::create('users', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('name');\n        $table-&gt;string('email')-&gt;unique();\n        $table-&gt;timestamp('email_verified_at')-&gt;nullable();\n        $table-&gt;string('password');\n        $table-&gt;rememberToken();\n        $table-&gt;timestamps();\n    });\n</code></pre> <p>por</p> <pre><code>    Schema::create('users', function (Blueprint $table) {\n        $table-&gt;id(); // PK\n        $table-&gt;string('name');\n        $table-&gt;string('email')-&gt;unique();\n        $table-&gt;timestamp('email_verified_at')-&gt;nullable();\n        $table-&gt;string('password');\n        $table-&gt;foreignId('role_id')-&gt;nullable()-&gt;constrained('roles')-&gt;onDelete('set null');\n        $table-&gt;string('address')-&gt;nullable();\n        $table-&gt;string('telephone')-&gt;nullable();\n        $table-&gt;rememberToken();\n        $table-&gt;timestamps(); // created_at y updated_at\n    });\n</code></pre>"},{"location":"projecte_laravel/#migracion-tabla-roles","title":"Migraci\u00f3n tabla <code>roles</code>","text":"<ol> <li> <p>Renombrar el archivo generado <code>xxxx_xx_xx_xxxxxx_create_roles_table.php</code>  por <code>0001_01_01_000000_create_roles_table.php</code> (para as\u00ed en el <code>fresh</code> de <code>migrate</code> se ejecute antes que el fichero de la tabla <code>users</code>).</p> </li> <li> <p>Definir la estructura de la tabla <code>roles</code> en dicho fichero <code>0001_01_01_000000_create_roles_table.php</code> :</p> </li> </ol> <pre><code>use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateRolesTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('roles', function (Blueprint $table) {\n            $table-&gt;id(); // PK\n            $table-&gt;enum('description',['administrador', 'cliente', 'invitado'])-&gt;unique();\n            $table-&gt;timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('roles');\n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#migracion-tabla-products","title":"Migraci\u00f3n tabla <code>products</code>","text":"<ol> <li>Definir la estructura de la tabla <code>roles</code> en dicho fichero <code>xxxx_xx_xx_xxxxxx_create_products_table.php</code> :</li> </ol> <pre><code>use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateProductsTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('products', function (Blueprint $table) {\n            $table-&gt;id(); // PK\n            $table-&gt;string('name');\n            $table-&gt;text('description')-&gt;nullable();\n            $table-&gt;decimal('price', 8, 2); // Precio con 8 d\u00edgitos y 2 decimales\n            $table-&gt;integer('stock')-&gt;default(0);\n            $table-&gt;timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('products');\n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#migracion-tabla-shoppings","title":"Migraci\u00f3n tabla <code>shoppings</code>","text":"<ol> <li>Definir la estructura de la tabla <code>roles</code> en dicho fichero <code>xxxx_xx_xx_xxxxxx_create_compras_table.php</code> :</li> </ol> <pre><code>use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateComprasTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('shoppings', function (Blueprint $table) {\n            $table-&gt;id(); // PK\n            $table-&gt;foreignId('user_id')-&gt;constrained('users'); // FK a usuarios\n            $table-&gt;dateTime('date');\n            $table-&gt;decimal('total', 8, 2); // Total de la compra\n            $table-&gt;timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('shoppings');\n    }\n\n}\n</code></pre>"},{"location":"projecte_laravel/#migracion-tabla-details","title":"Migraci\u00f3n tabla details","text":"<ol> <li>Definir la estructura de la tabla <code>roles</code> en dicho fichero <code>xxxx_xx_xx_xxxxxx_create_details_table.php</code> :</li> </ol> <pre><code>use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateDetalleCompraTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('details', function (Blueprint $table) {\n            $table-&gt;id(); // PK\n            $table-&gt;foreignId('shopping_id')-&gt;constrained('shoppings'); // FK a compras\n            $table-&gt;foreignId('product_id')-&gt;constrained('products'); // FK a productos\n            $table-&gt;integer('amount');\n            $table-&gt;decimal('unitprice', 8, 2); // Precio unitario al momento de la compra\n            $table-&gt;timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('details');\n    }\n\n}\n</code></pre>"},{"location":"projecte_laravel/#4o-crear-factories","title":"4\u00ba. Crear factories","text":"<p>Para introducir seeders con factories y Faker en las tablas <code>users</code> , <code>products</code> y <code>shoppings</code>en el proyecto gestories sigue estos pasos:</p>"},{"location":"projecte_laravel/#configurar-las-factories-con-faker","title":"Configurar las Factories con <code>Faker</code>","text":"<p>Abre los archivos generados en <code>database/factories</code> y config\u00faralos con datos ficticios.</p>"},{"location":"projecte_laravel/#rolefactory","title":"RoleFactory","text":"<p>El factory del modelo <code>Role</code> no vamos a modificarlo; pues la informaci\u00f3n la introducimos directamente en  su seeder<code>RoleSeeder</code>.</p>"},{"location":"projecte_laravel/#userfactory","title":"UserFactory","text":"<p>Abre <code>database/factories/UserFactory.php</code> y reempl\u00e1zalo con lo siguiente:</p> <pre><code>use App\\Models\\User;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\nuse Illuminate\\Support\\Str;\n\nclass UserFactory extends Factory\n{\n    public function definition()\n    {\n        return [\n            'name' =&gt; $this-&gt;faker-&gt;name(),\n            'email' =&gt; $this-&gt;faker-&gt;unique()-&gt;safeEmail(),\n            'email_verified_at' =&gt; now(),\n            'password' =&gt; bcrypt('password'), // Contrase\u00f1a gen\u00e9rica\n            'address' =&gt; $this-&gt;faker-&gt;address(),\n            'telephone' =&gt; $this-&gt;faker-&gt;phoneNumber(),\n            'role_id' =&gt; rand(1, 3), // Asignar rol aleatorio\n            'remember_token' =&gt; Str::random(10),\n        ];\n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#productfactory","title":"ProductFactory","text":"<p>Abre <code>database/factories/ProductFactory.php</code> y reempl\u00e1zalo con lo siguiente:</p> <pre><code>use App\\Models\\Product;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass ProductFactory extends Factory\n{\n    protected $model = Product::class;\n\n    public function definition()\n    {\n        return [\n            'name' =&gt; $this-&gt;faker-&gt;word(),\n            'description' =&gt; $this-&gt;faker-&gt;sentence(),\n            'price' =&gt; $this-&gt;faker-&gt;randomFloat(2, 1, 100), // Precio entre 1 y 100\n            'stock' =&gt; $this-&gt;faker-&gt;numberBetween(1, 100), // Stock entre 1 y 100\n        ];\n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#shoppingfactory","title":"ShoppingFactory","text":"<pre><code>use App\\Models\\Shopping;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass ShoppingFactory extends Factory\n{\n    protected $model = Shopping::class;\n\n    public function definition()\n    {\n        return [\n            'user_id' =&gt; \\App\\Models\\User::all()-&gt;random()-&gt;id,\n            'date' =&gt; $this-&gt;faker-&gt;dateTimeThisYear(),\n            'total' =&gt; $this-&gt;faker-&gt;randomFloat(2, 10, 500),\n        ];\n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#5o-crear-seeders","title":"5\u00ba. Crear seeders","text":"<p>Abre los archivos en <code>database/seeders</code> y modifica cada uno.</p>"},{"location":"projecte_laravel/#roleseeder","title":"RoleSeeder","text":"<p>Abre <code>database/seeders/RoleSeeder.php</code> y a\u00f1ade dentro del m\u00e9todo <code>run</code>:</p> <pre><code>    // ...\n    use Illuminate\\Support\\Facades\\DB;\n    //...\n\n    public function run(): void\n    {\n        DB::table('roles')-&gt;insert([\n            ['description' =&gt; 'administrador', 'created_at' =&gt; now(), 'updated_at' =&gt; now()],\n            ['description' =&gt; 'cliente', 'created_at' =&gt; now(), 'updated_at' =&gt; now()],\n            ['description' =&gt; 'invitado', 'created_at' =&gt; now(), 'updated_at' =&gt; now()],\n        ]);\n    }\n</code></pre>"},{"location":"projecte_laravel/#userseeder","title":"UserSeeder","text":"<p>Abre <code>database/seeders/UserSeeder.php</code>  (si no est\u00e1 creado:  <code>php artisan make:seeder UserSeeder</code>) y reempl\u00e1zalo con:</p> <pre><code>namespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse App\\Models\\User;\n\nclass UserSeeder extends Seeder\n{\n    public function run()\n    {\n        User::factory(count: 20)-&gt;create(); // Crea 20 usuarios\n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#productseeder","title":"ProductSeeder","text":"<p>Abre <code>database/seeders/ProductSeeder.php</code> y reempl\u00e1zalo con:</p> <pre><code>use Illuminate\\Database\\Seeder;\nuse App\\Models\\Product;\n\nclass ProductSeeder extends Seeder\n{\n    public function run()\n    {\n        Product::factory(35)-&gt;create(); // Crea 35 productos\n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#detailseeder","title":"DetailSeeder","text":"<pre><code>use Illuminate\\Database\\Seeder;\nuse App\\Models\\Detail;\nuse App\\Models\\Shopping;\nuse App\\Models\\Product;\n\nclass DetailSeeder extends Seeder\n{\n    public function run()\n    {\n        $shoppings = Shopping::all();\n        $products = Product::all();\n\n        foreach ($shoppings as $shopping) {\n            $selectedProducts = $products-&gt;random(rand(1, 5)); // Seleccionar entre 1 y 5 productos\n\n            foreach ($selectedProducts as $product) {\n                Detail::create([\n                    'shopping_id' =&gt; $shopping-&gt;id,\n                    'product_id' =&gt; $product-&gt;id,\n                    'amount' =&gt; rand(1, 3),\n                    'unitprice' =&gt; $product-&gt;price,\n                ]);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#6o-ejecutar-migraciones","title":"6\u00ba. Ejecutar migraciones","text":"<ol> <li>En el archivo <code>DatabaseSeeder.php</code>, dentro de <code>database/seeders</code>, aseg\u00farate de llamar a los seeders:</li> </ol> <pre><code>use Illuminate\\Database\\Seeder;\n\nclass DatabaseSeeder extends Seeder\n{\n    public function run()\n    {\n        $this-&gt;call([\n         RoleSeeder::class,\n            UserSeeder::class,\n            ProductSeeder::class,\n            ShoppingSeeder::class,\n            DetailSeeder::class,\n        ]);\n    }\n}\n</code></pre> <ol> <li>Ahora, ejecuta los seeders con:</li> </ol> <p>borrar tablas, vistas y datos de la bd</p> <p>Si queremos eliminar todos los datos de la bd antes de la migraci\u00f3n: <pre><code>php artisan db:wipe\n</code></pre></p> <pre><code>php artisan migrate:fresh --seed\n</code></pre>"},{"location":"projecte_laravel/#7o-controladores","title":"7\u00ba. Controladores","text":""},{"location":"projecte_laravel/#usercontroller","title":"UserController","text":"<pre><code>// UserController.php\nnamespace App\\Http\\Controllers;\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\n\nclass UserController extends Controller {\n    public function index() { \n        return response()-&gt;json(User::all()); \n    }\n\n    public function show(User $user) { \n        return response()-&gt;json($user); \n    }\n\n    public function store(Request $request) { \n        return response()-&gt;json(User::create($request-&gt;all())); \n    }\n\n    public function update(Request $request, User $user) { \n        $user-&gt;update($request-&gt;all()); return response()-&gt;json($user); \n    }\n\n    public function destroy(User $user) {\n        $user-&gt;delete(); \n        return response()-&gt;json(['message' =&gt; 'Usuario eliminado']); \n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#productcontroller","title":"ProductController","text":"<pre><code>// ProductController.php\nnamespace App\\Http\\Controllers;\nuse App\\Models\\Product;\nuse Illuminate\\Http\\Request;\n\nclass ProductController extends Controller {\n    public function index() { \n        return response()-&gt;json(Product::all()); \n    }\n\n    public function show(Product $product) { \n        return response()-&gt;json($product); \n    }\n\n    public function store(Request $request) { \n        return response()-&gt;json(Product::create($request-&gt;all())); \n    }\n\n    public function update(Request $request, Product $product) { \n        $product-&gt;update($request-&gt;all()); \n        return response()-&gt;json($product); \n    }\n\n    public function destroy(Product $product) { \n        $product-&gt;delete(); \n        return response()-&gt;json(['message' =&gt; 'Producto eliminado']); \n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#detailcontroller","title":"DetailController","text":"<pre><code>// DetailController.php\nnamespace App\\Http\\Controllers;\nuse App\\Models\\Detail;\nuse Illuminate\\Http\\Request;\n\nclass DetailController extends Controller {\n    public function index() { \n        return response()-&gt;json(Detail::all()); \n    }\n\n    public function show(Detail $detail) { \n        return response()-&gt;json($detail); \n    }\n\n    public function store(Request $request) { \n        return response()-&gt;json(Detail::create($request-&gt;all())); \n    }\n\n    public function update(Request $request, Detail $detail) { \n        $detail-&gt;update($request-&gt;all()); \n        return response()-&gt;json($detail); \n    }\n\n    public function destroy(Detail $detail) { \n        $detail-&gt;delete(); \n        return response()-&gt;json(['message' =&gt; 'Detalle eliminado']); \n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#shoppingcontroller","title":"ShoppingController","text":"<pre><code>// ShoppingController.php\nnamespace App\\Http\\Controllers;\nuse App\\Models\\Shopping;\nuse Illuminate\\Http\\Request;\n\nclass ShoppingController extends Controller {\n    public function index() { \n        return response()-&gt;json(Shopping::all()); \n    }\n\n    public function show(Shopping $shopping) { \n        return response()-&gt;json($shopping); \n    }\n\n    public function store(Request $request) { \n        return response()-&gt;json(Shopping::create($request-&gt;all())); \n    }\n\n    public function update(Request $request, Shopping $shopping) { \n        $shopping-&gt;update($request-&gt;all()); \n        return response()-&gt;json($shopping); \n    }\n\n    public function destroy(Shopping $shopping) { \n        $shopping-&gt;delete(); \n        return response()-&gt;json(['message' =&gt; 'Compra eliminada']); \n    }\n}\n</code></pre>"},{"location":"projecte_laravel/#8o-rutas","title":"8\u00ba. Rutas","text":"<pre><code>&lt;?php\n\n// web.php - Definir rutas para Users, Products, Details y Shoppings\nuse App\\Http\\Controllers\\UserController;\nuse App\\Http\\Controllers\\ProductController;\nuse App\\Http\\Controllers\\DetailController;\nuse App\\Http\\Controllers\\ShoppingController;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::resource('users', UserController::class);\nRoute::resource('products', ProductController::class);\nRoute::resource('details', DetailController::class);\nRoute::resource('shoppings', ShoppingController::class)\n</code></pre>"},{"location":"projecte_laravel_llibreria/","title":"Projecte laravel llibreria","text":""},{"location":"projecte_laravel_llibreria/#proyecto-de-gestion-de-libreria-con-laravel","title":"Proyecto de Gesti\u00f3n de Librer\u00eda con Laravel","text":"<p>Este proyecto consiste en desarrollar una aplicaci\u00f3n web con Laravel que permita gestionar usuarios, libros y pr\u00e9stamos. La aplicaci\u00f3n permitir\u00e1 que los usuarios se registren, inicien sesi\u00f3n, visualicen los libros disponibles, realicen pr\u00e9stamos y consulten su historial de pr\u00e9stamos. Se implementar\u00e1n relaciones entre las entidades para gestionar la informaci\u00f3n de manera eficiente.</p>"},{"location":"projecte_laravel_llibreria/#objetivos","title":"Objetivos","text":"<ol> <li>Implementar un sistema de autenticaci\u00f3n de usuarios con Laravel.</li> <li>Crear y administrar libros con informaci\u00f3n relevante como t\u00edtulo, autor, g\u00e9nero y disponibilidad.</li> <li>Permitir que los usuarios realicen pr\u00e9stamos de libros.</li> <li>Implementar una relaci\u00f3n muchos a muchos entre usuarios y libros mediante una tabla intermedia para registrar los pr\u00e9stamos.</li> <li>Gestionar los datos de los pr\u00e9stamos realizados por los usuarios.</li> </ol>"},{"location":"projecte_laravel_llibreria/#entrega","title":"Entrega","text":"<p>El proyecto debe estar alojado en un repositorio de GitHub o GitLab, con instrucciones claras para su instalaci\u00f3n y ejecuci\u00f3n en un archivo <code>README.md</code>.</p>"},{"location":"projecte_laravel_llibreria/#aspectos-tecnicos","title":"Aspectos T\u00e9cnicos","text":"<ul> <li>Framework: Laravel (versi\u00f3n 9 o superior).</li> <li>Base de datos: MySQL o PostgreSQL.</li> <li>Autenticaci\u00f3n: Laravel Breeze o Laravel Jetstream.</li> <li>Interfaz: Blade Templates o Vue.js para la parte frontend.</li> <li>Control de versiones: GitHub/GitLab.</li> </ul>"},{"location":"projecte_laravel_llibreria/#1-crear-proyecto","title":"1. Crear Proyecto","text":"<pre><code>laravel new libreria\n</code></pre>"},{"location":"projecte_laravel_llibreria/#2-modelo-de-base-de-datos","title":"2. Modelo de Base de Datos","text":""},{"location":"projecte_laravel_llibreria/#entidades-y-atributos","title":"Entidades y Atributos","text":"<ul> <li>Usuarios (users)</li> <li><code>id</code> (PK): Identificador \u00fanico del usuario.</li> <li><code>name</code>: Nombre del usuario.</li> <li><code>email</code>: Correo electr\u00f3nico del usuario.</li> <li><code>password</code>: Contrase\u00f1a del usuario.</li> <li><code>role</code>: Rol del usuario (admin o lector).</li> <li>Libros (books)</li> <li><code>id</code> (PK): Identificador \u00fanico del libro.</li> <li><code>title</code>: T\u00edtulo del libro.</li> <li><code>author</code>: Autor del libro.</li> <li><code>genre</code>: G\u00e9nero del libro.</li> <li><code>available_copies</code>: N\u00famero de copias disponibles.</li> <li>Pr\u00e9stamos (loans)</li> <li><code>id</code> (PK): Identificador \u00fanico del pr\u00e9stamo.</li> <li><code>user_id</code> (FK): Identificador del usuario que realiza el pr\u00e9stamo.</li> <li><code>book_id</code> (FK): Identificador del libro prestado.</li> <li><code>borrowed_at</code>: Fecha en que se realiz\u00f3 el pr\u00e9stamo.</li> <li><code>returned_at</code>: Fecha de devoluci\u00f3n del libro (nullable).</li> </ul>"},{"location":"projecte_laravel_llibreria/#relaciones","title":"Relaciones","text":"<ul> <li>users \u2192 loans: Un usuario puede realizar muchos pr\u00e9stamos.</li> <li>books \u2192 loans: Un libro puede estar en muchos pr\u00e9stamos.</li> <li>Relaci\u00f3n N a M (muchos a muchos), resuelta con la tabla intermedia loans.</li> </ul>"},{"location":"projecte_laravel_llibreria/#3-migraciones","title":"3. Migraciones","text":"<pre><code>// Migraci\u00f3n de la tabla users\nSchema::create('users', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('name');\n    $table-&gt;string('email')-&gt;unique();\n    $table-&gt;string('password');\n    $table-&gt;enum('role', ['admin', 'lector'])-&gt;default('lector');\n    $table-&gt;timestamps();\n});\n\n// Migraci\u00f3n de la tabla books\nSchema::create('books', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('title');\n    $table-&gt;string('author');\n    $table-&gt;string('genre');\n    $table-&gt;integer('available_copies');\n    $table-&gt;timestamps();\n});\n\n// Migraci\u00f3n de la tabla loans\nSchema::create('loans', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;foreignId('user_id')-&gt;constrained('users');\n    $table-&gt;foreignId('book_id')-&gt;constrained('books');\n    $table-&gt;date('borrowed_at');\n    $table-&gt;date('returned_at')-&gt;nullable();\n    $table-&gt;timestamps();\n});\n</code></pre>"},{"location":"projecte_laravel_llibreria/#4-modelos","title":"4. Modelos","text":"<pre><code>class User extends Model\n{\n    use HasFactory;\n    protected $fillable = ['name', 'email', 'password', 'role'];\n    public function loans() {\n        return $this-&gt;hasMany(Loan::class);\n    }\n}\n\nclass Book extends Model\n{\n    use HasFactory;\n    protected $fillable = ['title', 'author', 'genre', 'available_copies'];\n    public function loans() {\n        return $this-&gt;hasMany(Loan::class);\n    }\n}\n\nclass Loan extends Model\n{\n    use HasFactory;\n    protected $fillable = ['user_id', 'book_id', 'borrowed_at', 'returned_at'];\n    public function user() {\n        return $this-&gt;belongsTo(User::class);\n    }\n    public function book() {\n        return $this-&gt;belongsTo(Book::class);\n    }\n}\n</code></pre>"},{"location":"projecte_laravel_llibreria/#factories","title":"Factories","text":""},{"location":"projecte_laravel_llibreria/#userfactory","title":"UserFactory","text":"<pre><code>public function definition(): array\n{\n    return [\n        'name' =&gt; $this-&gt;faker-&gt;name(),\n        'email' =&gt; $this-&gt;faker-&gt;unique()-&gt;safeEmail(),\n        'email_verified_at' =&gt; now(),\n        'password' =&gt; Hash::make('password123'), // Contrase\u00f1a encriptada\n        'remember_token' =&gt; Str::random(10),\n        'created_at' =&gt; now(),\n        'updated_at' =&gt; now(),\n    ];\n}\n</code></pre>"},{"location":"projecte_laravel_llibreria/#bookfactory","title":"BookFactory","text":"<pre><code>public function definition(): array\n{\n    return [\n        'title' =&gt; $this-&gt;faker-&gt;sentence(4),\n        'author' =&gt; $this-&gt;faker-&gt;name(2),\n        'genre' =&gt; $this-&gt;faker-&gt;sentence(2),\n        'available_copies' =&gt; $this-&gt;faker-&gt;numberBetween(1,10), // Contrase\u00f1a encriptada\n        'created_at' =&gt; now(),\n        'updated_at' =&gt; now(),\n    ];\n}\n</code></pre>"},{"location":"projecte_laravel_llibreria/#loanfactory","title":"LoanFactory","text":"<pre><code>public function definition(): array\n{\n    $borrowed_at = $this-&gt;faker-&gt;dateTimeBetween('-2 years', 'now');\n    $returned_at = $this-&gt;faker-&gt;boolean(70) ? $this-&gt;faker-&gt;dateTimeBetween($borrowed_at, 'now') : null;\n\n    return [\n        'user_id' =&gt; User::inRandomOrder()-&gt;first()-&gt;id,\n        'book_id' =&gt; Book::inRandomOrder()-&gt;first()-&gt;id,\n        'borrowed_at' =&gt; $borrowed_at,\n        'returned_at' =&gt; $returned_at,\n        'created_at' =&gt; now(),\n        'updated_at' =&gt; now(),\n    ];\n}\n</code></pre>"},{"location":"projecte_laravel_llibreria/#seeders","title":"Seeders","text":""},{"location":"projecte_laravel_llibreria/#userseeder","title":"UserSeeder","text":"<pre><code>public function run(): void\n{\n    User::factory()-&gt;count(10)-&gt;create();\n}\n</code></pre>"},{"location":"projecte_laravel_llibreria/#bookseeder","title":"BookSeeder","text":"<pre><code>public function run(): void\n{\n    Book::factory()-&gt;count(100)-&gt;create();\n}\n</code></pre>"},{"location":"projecte_laravel_llibreria/#loanseeder","title":"LoanSeeder","text":"<pre><code>public function run(): void\n{\n    Loan::factory()-&gt;count(150)-&gt;create();\n}\n</code></pre>"},{"location":"projecte_laravel_llibreria/#databaseseeder","title":"DatabaseSeeder","text":"<pre><code>public function run(): void\n{\n    // User::factory(10)-&gt;create();\n\n    $this-&gt;call([\n        UserSeeder::class,\n        BookSeeder::class,\n        LoanSeeder::class,\n       ]);\n}\n</code></pre>"},{"location":"projecte_laravel_llibreria/#6-controladores","title":"6. Controladores","text":"<pre><code>namespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Hash;\n\nclass UserController extends Controller\n{\n    public function index()\n    {\n        return response()-&gt;json(User::all());\n    }\n\n    public function show(User $user)\n    {\n        return response()-&gt;json($user);\n    }\n\n    public function store(Request $request)\n    {\n        $validated = $request-&gt;validate([\n            'name' =&gt; 'required|string|max:255',\n            'email' =&gt; 'required|string|email|unique:users,email',\n            'password' =&gt; 'required|string|min:8',\n            'role' =&gt; 'required|in:admin,lector',\n        ]);\n\n        $validated['password'] = Hash::make($validated['password']);\n\n        $user = User::create($validated);\n\n        return response()-&gt;json($user, 201);\n    }\n\n    public function update(Request $request, User $user)\n    {\n        $validated = $request-&gt;validate([\n            'name' =&gt; 'string|max:255',\n            'email' =&gt; 'string|email|unique:users,email,' . $user-&gt;id,\n            'password' =&gt; 'nullable|string|min:8',\n            'role' =&gt; 'in:admin,lector',\n        ]);\n\n        if ($request-&gt;has('password')) {\n            $validated['password'] = Hash::make($request-&gt;password);\n        }\n\n        $user-&gt;update($validated);\n\n        return response()-&gt;json($user);\n    }\n\n    public function destroy(User $user)\n    {\n        $user-&gt;delete();\n        return response()-&gt;json(['message' =&gt; 'Usuario eliminado correctamente']);\n    }\n}\n</code></pre> <pre><code>namespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Book;\n\nclass BookController extends Controller\n{\n    public function index()\n    {\n        return response()-&gt;json(Book::all());\n    }\n\n    public function show(Book $book)\n    {\n        return response()-&gt;json($book);\n    }\n\n    public function store(Request $request)\n    {\n        $validated = $request-&gt;validate([\n            'title' =&gt; 'required|string|max:255',\n            'author' =&gt; 'required|string|max:255',\n            'genre' =&gt; 'required|string|max:255',\n            'available_copies' =&gt; 'required|integer|min:0',\n        ]);\n\n        $book = Book::create($validated);\n\n        return response()-&gt;json($book, 201);\n    }\n\n    public function update(Request $request, Book $book)\n    {\n        $validated = $request-&gt;validate([\n            'title' =&gt; 'string|max:255',\n            'author' =&gt; 'string|max:255',\n            'genre' =&gt; 'string|max:255',\n            'available_copies' =&gt; 'integer|min:0',\n        ]);\n\n        $book-&gt;update($validated);\n\n        return response()-&gt;json($book);\n    }\n\n    public function destroy(Book $book)\n    {\n        $book-&gt;delete();\n        return response()-&gt;json(['message' =&gt; 'Libro eliminado correctamente']);\n    }\n}\n</code></pre> <pre><code>namespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Loan;\nuse App\\Models\\Book;\nuse App\\Models\\User;\n\nclass LoanController extends Controller\n{\n    public function index()\n    {\n        return response()-&gt;json(Loan::with(['user', 'book'])-&gt;get());\n    }\n\n    public function show(Loan $loan)\n    {\n        return response()-&gt;json($loan-&gt;load(['user', 'book']));\n    }\n\n    public function store(Request $request)\n    {\n        $validated = $request-&gt;validate([\n            'user_id' =&gt; 'required|exists:users,id',\n            'book_id' =&gt; 'required|exists:books,id',\n        ]);\n\n        $book = Book::findOrFail($validated['book_id']);\n\n        if ($book-&gt;available_copies &lt;= 0) {\n            return response()-&gt;json(['error' =&gt; 'No hay copias disponibles'], 400);\n        }\n\n        // Reducir en 1 la cantidad de copias disponibles\n        $book-&gt;decrement('available_copies');\n\n        $loan = Loan::create([\n            'user_id' =&gt; $validated['user_id'],\n            'book_id' =&gt; $validated['book_id'],\n            'borrowed_at' =&gt; now(),\n            'returned_at' =&gt; null,\n        ]);\n\n        return response()-&gt;json($loan, 201);\n    }\n\n    public function returnBook($id)\n    {\n        $loan = Loan::findOrFail($id);\n\n        if ($loan-&gt;returned_at) {\n            return response()-&gt;json(['error' =&gt; 'El libro ya fue devuelto'], 400);\n        }\n\n        $loan-&gt;update(['returned_at' =&gt; now()]);\n\n        // Aumentar en 1 la cantidad de copias disponibles del libro\n        $loan-&gt;book-&gt;increment('available_copies');\n\n        return response()-&gt;json(['message' =&gt; 'Libro devuelto correctamente', 'loan' =&gt; $loan]);\n    }\n\n    public function destroy(Loan $loan)\n    {\n        $loan-&gt;delete();\n        return response()-&gt;json(['message' =&gt; 'Pr\u00e9stamo eliminado correctamente']);\n    }\n}\n</code></pre>"},{"location":"projecte_laravel_llibreria/#7-rutas","title":"7. Rutas","text":"<pre><code>Route::resource('users', UserController::class);\nRoute::resource('books', BookController::class);\nRoute::resource('loans', LoanController::class);\n</code></pre>"},{"location":"references/","title":"Referencias","text":"<ul> <li>Curso Desarrollo Web en Entorno Servidor, por Aitor Medrano:  https://aitor-medrano.github.io/dwes2122/index.html</li> <li>https://nachoiborraies.github.io/laravel, de Nacho Iborra.</li> <li>Curso de introducci\u00f3n a Docker, por Sergi Garc\u00eda Barea : https://sergarb1.github.io/CursoIntroduccionADocker/</li> <li> <p>Art\u00edculo Arquitecturas Web y su evoluci\u00f3n</p> </li> <li> <p>Web digitalocean.</p> </li> <li> <p>Canal Youtube DevOpsea.</p> </li> <li> <p>Manual de PHP</p> </li> <li>PHP en 2020, por Jes\u00fas Amieiro</li> <li>Apuntes de PHP de Bartolom\u00e9 Sintes, profesor del IES Abastos de Valencia</li> <li>Gu\u00eda de Estilo - PSR</li> <li> <p>PHP - La manera correcta</p> </li> <li> <p>Curso Desarrollo Web en Entorno Servidor, por Aitor Medrano:  https://aitor-medrano.github.io/dwes2122/index.html</p> </li> <li>Manual de PHP</li> <li>Manual de OO en PHP - www.desarrolloweb.com</li> <li> <p>videos Curso PHP 8 desde cero (Actulizado): </p> </li> <li> <p>Curso Desarrollo Web en Entorno Servidor, por Aitor Medrano:  https://aitor-medrano.github.io/dwes2122/index.html</p> </li> <li>Cookies en PHP</li> <li> <p>Manejo de sesiones en PHP</p> </li> <li> <p>Tutorial de Composer</p> </li> <li>Web Scraping with PHP \u2013 How to Crawl Web Pages Using Open Source Tools</li> <li>PHP Monolog</li> <li>Unit Testing con PHPUnit \u2014 Parte 1, de Emiliano Zublena.</li> </ul>"},{"location":"ut01/ut0101/","title":"1.1. Introducci\u00f3n","text":""},{"location":"ut01/ut0101/#duracion-estimada-de-la-unidad","title":"Duraci\u00f3n estimada de la unidad","text":"<p>8 sesiones.</p>"},{"location":"ut01/ut0101/#evaluacion","title":"Evaluaci\u00f3n","text":"Resultados de aprendizaje Criterios de evaluaci\u00f3n RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. a) Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web. b) Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web. c) Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web. d) Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web. e) Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor. f) Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor. g) Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor. cuestionario de arranque para repasar <ul> <li>\u00bfQu\u00e9 es Internet?</li> <li>\u00bfQu\u00e9 es la pila de protocolos TCP/IP?</li> <li>\u00bfQu\u00e9 protocolo de nivel de aplicaci\u00f3n se utiliza en Internet? \u00bfcu\u00e1l es la versi\u00f3n segura de este protocolo?</li> <li>\u00bfQu\u00e9 es una direcci\u00f3n IP? \u00bfqu\u00e9 es un puerto IP?</li> <li>\u00bfCu\u00e1ntas versiones del protocolo IP conoces?</li> <li>\u00bfQu\u00e9 es una URL? \u00bfmediante qu\u00e9 protocolo/servicio se relaciona un dominio con una direcci\u00f3n IP?</li> <li>\u00bfQu\u00e9 es una p\u00e1gina web? \u00bfqu\u00e9 es una aplicaci\u00f3n web? \u00bfqu\u00e9 es un sitio web? \u00bfqu\u00e9 es una arquitectura web?</li> <li>\u00bfCu\u00e1l es la diferencia entre una p\u00e1gina web est\u00e1tica y una din\u00e1mica? Las p\u00e1ginas web que has desarrollado durante el primer curso, \u00bferan est\u00e1ticas o din\u00e1micas?</li> <li>\u00bfCu\u00e1l es la diferencia entre la web 1.0 y la web 2.0?</li> <li>Un navegador web, \u00bfqu\u00e9 es exactamente? \u00bfcu\u00e1l es su funci\u00f3n? \u00bfcu\u00e1ntos conoces? \u00bfexisten diferencias entre ellos?</li> <li>\u00bfCu\u00e1l crees que es la principal diferencia entre una aplicaci\u00f3n web y una aplicaci\u00f3n nativa? \u00bfhas escuchado hablar de las aplicaciones h\u00edbridas? \u00bfconoces ejemplos de aplicaciones que tengan una versi\u00f3n web y su correspondiente nativa (app m\u00f3vil)?</li> <li>\u00bfConoces los t\u00e9rminos \"back-end\" y \"front-end\"? \u00bfcu\u00e1l corresponde al desarrollo servidor y cu\u00e1l al desarrollo en cliente? \u00bfqu\u00e9 ideas te inspira la imagen de la portada de este documento?</li> <li>\u00bfConoces los t\u00e9rminos \"back-office\" y \"front-office\"? \u00bfcu\u00e1l es la diferencia?</li> </ul>"},{"location":"ut01/ut0102/","title":"1.2. Arquitecturas web","text":"<p>Las arquitecturas web describen la relaci\u00f3n entre los distintos elementos que participan en el intercambio/procesamiento de informaci\u00f3n a trav\u00e9s de Internet, as\u00ed como sus funciones.</p> <p>La gran mayor\u00eda de las arquitecturas web en la actualidad son de tipo cliente-servidor: una comunicaci\u00f3n asim\u00e9trica en la que uno de los extremos ofrece uno o m\u00e1s servicios y el otro hace uso de ellos. \u00c9sta es la arquitectura sobre la que nos centraremos, aunque existen otras como la Punto a Punto (P2P - Peer to Peer).</p>"},{"location":"ut01/ut0102/#arquitectura-clienteservidor","title":"Arquitectura cliente\u2011servidor","text":"<p>El modelo cliente-servidor es un modelo que reparte tareas entre los proveedores de un recurso o servicio, llamados servidores, y los solicitantes/consumidores del servicio, llamados clientes .</p> <p>Lo m\u00e1s frecuente es que los clientes y los servidores se comuniquen a trav\u00e9s de una red de comunicaciones, pero ambos pueden residir en la misma m\u00e1quina (normalmente en tareas de desarrollo).</p> <p>El esquema de funcionamiento m\u00e1s b\u00e1sico del modelo cliente-servidor para una arquitectura web est\u00e1 basado en uno o varios clientes que solicitan una p\u00e1gina web a un servidor web:</p> <ol> <li>Desde el navegador web (o agente de usuario, que puede ser tambi\u00e9n una app nativa u otro servidor incluso) el usuario solicita un servicio web indicando su URL.</li> <li>El servidor recibe la petici\u00f3n mediante el protocolo de aplicaci\u00f3n HTTP, y la procesa mediante su  l\u00f3gica de negocio .</li> <li>Produce una respuesta HTTP a la petici\u00f3n, que env\u00eda al cliente. Esta respuesta puede contener ficheros de distinta naturaleza: HTML, CSS, XML, JSON, ficheros multimedia, c\u00f3digo JavaScript, etc.</li> <li>El navegador web recibe la informaci\u00f3n enviada por el servidor y la interpreta. En funci\u00f3n de la respuesta enviada, se respresenta en el navegador la respuesta al usuario (normalmente en forma de p\u00e1gina web).</li> </ol> <p>A continuaci\u00f3n se muestran las ventajas y desventajas al respecto:</p> <p>Ventajas:</p> <ul> <li>Centralizaci\u00f3n del control: los accesos, recursos y la integridad de los datos son controlados por el servidor. Esta centralizaci\u00f3n tambi\u00e9n facilita la tarea de actualizar datos u otros recursos.</li> <li>Escalabilidad : se puede aumentar la capacidad de clientes y servidores por separado. Cualquier elemento puede ser aumentado (o mejorado) en cualquier momento, o se pueden a\u00f1adir nuevos nodos a la red (clientes y/o servidores), siempre que el sistema est\u00e9 dise\u00f1ado para ello.</li> <li>Portabilidad : el hecho de que la aplicaci\u00f3n web se ejecute en un navegador web, hace que se independice el software del sistema operativo sobre el que se ejecuta. De esta forma, se aprovecha el desarrollo para las diferentes plataformas.</li> <li>F\u00e1cil  mantenimiento : al estar distribuidas las funciones y responsabilidades entre varios ordenadores independientes, es posible reemplazar, reparar, actualizar, o incluso trasladar un servidor, mientras que sus clientes no se ver\u00e1n afectados por ese cambio (o se afectar\u00e1n m\u00ednimamente). Esta independencia de los cambios tambi\u00e9n se conoce como encapsulaci\u00f3n .</li> <li>Existen  tecnolog\u00edas , suficientemente desarrolladas, dise\u00f1adas para el modelo de cliente-servidor que aseguran la seguridad en las transacciones, la usabilidad de la interfaz, y la facilidad de uso.</li> </ul> <p>Desventajas:</p> <ul> <li>La congesti\u00f3n del tr\u00e1fico ha sido siempre un problema en esta arquitectura. Cuando una gran cantidad de clientes env\u00edan peticiones simult\u00e1neas al mismo servidor, se pueden producir situaciones de sobrecarga.</li> <li>Cuando un servidor est\u00e1 ca\u00eddo, las peticiones de los clientes  no pueden ser satisfechas , ya que los recursos no est\u00e1n distribuidos.</li> <li>El software y el hardware de un servidor son generalmente muy determinantes. Normalmente se necesita  software y hardware espec\u00edfico , dependiendo del tipo de servicio web, sobre todo en el lado del servidor. Esto aumentar\u00e1 el coste. Como alternativa, se dispone de servicios web en la nube, con diversos tipos de costes dependientes de la arquitectura web.</li> </ul> <p>NOTA : estas desventajas se refieren al caso en que los recursos del servidor no est\u00e1n replicados y/o distribuidos. Actualmente existen t\u00e9cnicas de escalado horizontal y vertical que pueden subsanar estos problemas.</p> Ejemplo con DevTools <p>Peticiones desde el navegador</p> <p>En este apartado vamos a tratar de indagar un poco m\u00e1s en qu\u00e9 sucede detr\u00e1s de las cortinas cuando consultamos una URL. Vamos a observar, a trav\u00e9s de las herramientas de desarrollador del navegador web de Chrome (igual nos puede servir Firefox o cualquier otro), los 4 pasos que se detallaban en el apartado anterior.</p> <p>A continuaci\u00f3n abrimos las herramientas de desarrollador y vamos a la pesta\u00f1a Network (o Red):</p> Paso 1Paso 2Paso 3Paso 4 <p>Abrimos upv.es y accedemos al men\u00fa hamburguesa DevTools \u2192 More tools \u2192 Developer tools (o directamente F12)</p> <p></p> <p>Pesta\u00f1a Network antes de refrescar:</p> <p></p> <p>En estos momentos a\u00fan no hay datos, porque no hemos hecho una petici\u00f3n al servidor con la ventana de herramientas de desarrollador activa. Por tanto, refrescamos la p\u00e1gina (equivalente a hacer una petici\u00f3n al servidor que gestiona https://www.upv.es/) y pasamos al punto siguiente.</p> <p>El servidor recibe la petici\u00f3n mediante el protocolo de aplicaci\u00f3n HTTP, y la procesa mediante su l\u00f3gica de negocio.</p> <p>Realmente no podemos saber exactamente qu\u00e9 est\u00e1 sucediendo en el servidor durante este paso, a no ser que tuvi\u00e9semos acceso al mismo, con los privilegios y herramientas correctas, pero s\u00ed podemos averiguar muchos datos mediante herramientas como:</p> <ul> <li> <p>whois: nos indica, entre otros datos, que la IP del servidor es 158.42.4.23 (registro DNS de tipo A).</p> </li> <li> <p>builtwith: nos indica, entre otras cosas, que la plataforma web dispone de dos servidores web (Apache y nginx).</p> </li> </ul> <p>OJO: Existe otro tipo de m\u00e9todos para conocer m\u00e1s datos sobre el servidor podr\u00eda implicar pr\u00e1cticas ilegales, en el \u00e1mbito de la ciberseguridad.</p> <p>Este paso se llevar\u00eda a cabo en lo que se denomina Back-end.</p> <p>Vamos a ver el resultado en el siguiente paso.</p> <p>El servidor produce una respuesta a la petici\u00f3n del cliente, que la env\u00eda a trav\u00e9s de internet y recupera nuestro navegador.</p> <p>Ahora, si consultamos la pesta\u00f1a Network despu\u00e9s de refrescar la URL, podremos ver que han aparecido muchos registros, el primero de los cuales tiene como nombre www.upv.es:</p> <p>Este registro corresponde a la primera petici\u00f3n que hemos realizado al servidor de www.elche.es. Si pinchamos sobre \u00e9l podremos ver tanto los datos de la petici\u00f3n realizada, como la respuesta enviada por el servidor a trav\u00e9s de Internet, mediante HTTP. Se puede ver que el c\u00f3digo devuelto por el servidor es 200 (en color verde, signo de que no ha habido error), y ha respondido un servidor web apache:</p> <p>Detalle de Headers: status code 200 OK, server Apache</p> <p></p> <p>NOTA : el servidor puede enviar tambi\u00e9n su versi\u00f3n software, pero esto podr\u00eda conllevar ataques maliciosos, dependiendo de las vulnerabilidades de dicha &gt; versi\u00f3n. Es por ello que es una buena pr\u00e1ctica configurar el servidor web para que no env\u00ede dicha versi\u00f3n (entre otros aspectos).</p> <p>M\u00e1s abajo, en la misma respuesta, nos indica los par\u00e1metros con que se ha realizado la petici\u00f3n. Entre \u00e9stos, podemos ver el tipo de petici\u00f3n que hemos hecho (<code>GET</code>), la versi\u00f3n de nuestro navegador web, el lenguaje en que queremos recibir la informaci\u00f3n, entre otros detalles:</p> <p></p> <p>La petici\u00f3n ha tardado (en la prueba actual) 6.31 segundos en resolverse, y ha desembocado en una transferencia por parte del servidor de un total de 136 respuestas y 57.9 kB transferidos (entre otras m\u00e9tricas):</p> <p></p> <p>El resto de registros que est\u00e1n debajo del inicial, se corresponden con todos los recursos (ficheros HTML, JavaScript, archivos multimedia, etc.) necesarios para que el navegador represente la p\u00e1gina web. Por ejemplo, si pinchamos sobre el segundo registro gsap.min.js, y pinchamos sobre la pesta\u00f1a Preview del panel de la derecha, podremos ver el c\u00f3digo JavaScript que contiene este fichero transferido:</p> <p></p> <p>Si pinchamos en <code>logo-upv.svg</code> podremos ver que es el logo del ayuntamiento, transferido desde el servidor:</p> <p></p> <p>Todos estos ficheros tardan un tiempo en transferirse, lo que se representa en forma de waterfall (cascada):</p> <p></p> <p>La petici\u00f3n que m\u00e1s tarda en resolverse es la primera, seg\u00fan este gr\u00e1fico.</p> <p>\u00bfTe recuerda esto a alg\u00fan tipo de programa de descargas tipo BitTorrent o similares? Pues s\u00ed, en este caso se podr\u00eda pensar en el navegador web como si de un gestor de descargas se tratase (salvando las diferencias), que se encarga de recuperar todos los ficheros que necesita para representar la p\u00e1gina web que se le ha solicitado.</p> <p>El navegador web recibe la informaci\u00f3n enviada por el servidor y la interpreta. En funci\u00f3n de la respuesta enviada, se respresenta en el navegador la respuesta al usuario (normalmente en forma de p\u00e1gina web).</p> <p>El navegador web es un software dise\u00f1ado para interpretar todo el contenido enviado por un servidor web, y representarlo en la pantalla para que el usuario final pueda consultar la informaci\u00f3n recibida, interaccionar con la p\u00e1gina web, o tambi\u00e9n gestionar las operaciones del usuario que requieran nuevas peticiones al servidor web (en caso de p\u00e1ginas web din\u00e1micas, o aplicaciones web).</p> <p>Por ello, el navegador web tomar\u00e1 todos los ficheros descargados y conformar\u00e1 la p\u00e1gina de bienvenida de www.puv.es, lo que se denomina Front-end :</p> <p>Interpretaci\u00f3n en el front\u2011end (p\u00e1gina renderizada por el navegador)</p> <p>\u00bfA\u00fan contin\u00faas pensando que es correcto decir \"navegar por Internet\"? El cliente hace la petici\u00f3n (request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde (response).</p>"},{"location":"ut01/ut0103/","title":"1.3. Generar p\u00e1ginas web","text":""},{"location":"ut01/ut0103/#paginas-estaticas","title":"P\u00e1ginas est\u00e1ticas","text":"<p>Una p\u00e1gina web est\u00e1tica es un documento o conjunto de documentos (generalmente: HTML, CSS, contenido multimedia, c\u00f3digo JavaScript) en el que no existe una actualizaci\u00f3n din\u00e1mica de su contenido al interactuar con el sistema (servidor, ya sea remoto o local) que provee el documento/s. Es decir, la misma petici\u00f3n a la misma URL (Uniform Resource Locator), aunque la repitamos en m\u00faltiples ocasiones a lo largo del tiempo, siempre va a devolver la misma informaci\u00f3n (a no ser que la modifique un desarrollador en el lado servidor, manualmente). Puede existir interacci\u00f3n con la p\u00e1gina web est\u00e1tica (mediante c\u00f3digo JavaScript), en forma de mensajes, eventos, actualizaciones de su apariencia...</p> <p>En este caso, un navegador web es capaz de representar la p\u00e1gina web en una m\u00e1quina local, sin necesidad de disponer de un servidor web adicional.</p>"},{"location":"ut01/ut0103/#paginas-dinamicas","title":"P\u00e1ginas din\u00e1micas","text":"<p>Una p\u00e1gina web din\u00e1mica puede contener una parte est\u00e1tica, y adem\u00e1s el contenido que se muestre depender\u00e1 del momento en el cual se realice la petici\u00f3n. Esto es debido a que el servidor conformar\u00e1 dicho contenido dependiendo de los datos de que se disponga en ese momento en un sistema de bases de datos. La comunicaci\u00f3n entre el navegador web y el servidor ser\u00e1 m\u00e1s compleja, ya que, adem\u00e1s de consultar contenidos, se podr\u00e1n realizar potencialmente operaciones de creaci\u00f3n, modificaci\u00f3n, y eliminaci\u00f3n de datos.</p> <p>Una aplicaci\u00f3n Web es una herramienta software, formada por p\u00e1ginas web din\u00e1micas (aunque tambi\u00e9n puede contener documentos web est\u00e1ticos), basada en tecnolog\u00edas web que la dotan de un car\u00e1cter din\u00e1mico (interact\u00faan con un sistema remoto) haciendo uso de servicios web (basados en la arquitectura TCP/IP), y que proporcionan al usuario un servicio o conjunto de servicios. Ser\u00eda lo m\u00e1s parecido a una aplicaci\u00f3n nativa o de escritorio, pero ejecutada en un navegador web. El hecho de ejecutarse en un navegador web las independiza del sistema operativo en el que se ejecutan, pero tambi\u00e9n presentan determinadas limitaciones debido a esta independencia.</p> <p>En este caso, un navegador web NO es capaz de representar la p\u00e1gina web en una m\u00e1quina local sin un servidor web adicional y el resto de componentes que acompa\u00f1an a esta arquitectura, como s\u00ed era el caso de una p\u00e1gina web est\u00e1tica.</p> <p>Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas:</p> <p>a) Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos.</p> <p>b) Utilizar servicios REST de terceros invocados desde JS.</p> Diferencia gr\u00e1fica entre p\u00e1gina est\u00e1tica y p\u00e1gina din\u00e1mica"},{"location":"ut01/ut0104/","title":"1.4. Modelos de programaci\u00f3n","text":"<p>Cuando hablamos de programaci\u00f3n en entorno cliente/servidor hablamos tambi\u00e9n de aplicaciones web, formadas por p\u00e1ginas web din\u00e1micas, con lo que esto implica una arquitectura web m\u00e1s compleja que la necesaria para un sitio web constituido \u00fanicamente por p\u00e1ginas web est\u00e1ticas.</p> <p>Seg\u00fan diferentes autores, los modelos presentados en este documento caen bajo la categor\u00eda de arquitecturas web. En el presente documento los consideraremos modelos de programaci\u00f3n, atendiendo a la forma en que est\u00e1n organizados y distribuidos los diferentes ficheros que contienen la l\u00f3gica de negocio de la aplicaci\u00f3n web.</p> <p>Dicho esto, actualmente encontramos dos modelos de programaci\u00f3n principales, que son los que se detallan a continuaci\u00f3n.</p>"},{"location":"ut01/ut0104/#1-modelo-vista-controlador","title":"1. Modelo-Vista-Controlador","text":"<p>Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede v\u00eda el controlador.</li> <li>Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interact\u00faa con la vista y realiza nuevas peticiones al controlador.</li> <li>Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> </ul> Modelo-Vista-Controlador (MVC) <p>Es muy importante destacar que, en este modelo, es el servidor el que lleva el peso principal tanto del procesado de la informaci\u00f3n como de su representaci\u00f3n. El cliente web, a grosso modo, se dedicar\u00e1 a enviar las peticiones al servidor, recibir la respuesta y representarla en la pantalla del usuario. La p\u00e1gina web representada (c\u00f3digo HTML, JavaScript, etc.) se habr\u00e1 predeterminado en el lado servidor.</p> <p>IMPORTANTE : con este modelo, cada petici\u00f3n del cliente al servidor implicar\u00e1 un refresco de la informaci\u00f3n que se visualiza en la pantalla, aunque su apariencia haya cambiado poco de una petici\u00f3n a la siguiente. Esto implica que se vuelvan a descargar todos los datos y ficheros que no se mantengan en la cach\u00e9 del navegador, con lo que los tiempos de respuesta ser\u00e1n mayores que si no tuvi\u00e9semos que descargar de nuevo determinada informaci\u00f3n. El usuario final apreciar\u00e1 que, por un intervalo corto de tiempo, todos los elementos de la pantalla desaparecen y despu\u00e9s se conforma de nuevo la interfaz de usuario. En este caso, se dice que la aplicaci\u00f3n no es reactiva (se realiza un refresco de toda la pantalla, aunque no se necesite).</p> <p>A este modelo de programaci\u00f3n MVC se ajustar\u00e1 el primer proyecto que realizaremos durante este curso, y la primera parte del segundo proyecto.</p> <p>Mediante este modelo se han desarrollado multitud de plataformas y aplicaciones web, aunque la tendencia es, cada vez m\u00e1s, desarrollar aplicaciones basadas en servicios REST.</p>"},{"location":"ut01/ut0104/#2-aplicaciones-basadas-en-servicios-rest","title":"2. Aplicaciones basadas en servicios REST","text":"<p>En este tipo de aplicaciones, se delega la interacci\u00f3n con el usuario (si es que existe), en aplicaciones que se descargan y/o instalan en el lado cliente (ya sea aplicaciones de escritorio, aplicaciones m\u00f3viles, o aplicaciones web). El servidor se encarga de implementar la l\u00f3gica de negocio, gestionar los datos, y enviar al cliente solo la parte de la informaci\u00f3n solicitada, normalmente en formato JSON.</p> Esquema de funcionamiento de servicios REST <p>Se llama API al conjunto de servicios web a trav\u00e9s de los cuales los clientes interact\u00faan con el servidor. Cada uno de estos servicios web se identifican por un endpoint (URL en el lado servidor), entre otros par\u00e1metros. Estos conceptos se revisar\u00e1n con m\u00e1s detenimiento en la segunda fase del segundo proyecto que se desarrollar\u00e1 durante el curso.</p> <p>Es importante notar que, a diferencia del modelo MVC, cada vez que se realice una petici\u00f3n al servidor no se refrescar\u00e1 la p\u00e1gina web por completo. La arquitectura web pemitir\u00e1 que solo se actualice una parte de la interfaz de usuario, con lo que el usuario final no experimentar\u00e1 la desaparici\u00f3n de la interfaz transitoriamente.</p> Diferencia entre ciclo de vida tradicional de una p\u00e1gina y el ciclo de vida de la arquitectura SPA <p>Este comportamiento asemeja m\u00e1s una aplicaci\u00f3n web a una aplicaci\u00f3n m\u00f3vil ( la idea general es que no instalamos una app m\u00f3vil cada vez que realizamos una acci\u00f3n, sino que solo se instala una vez ).</p> <p>Un ejemplo de este tipo de aplicaciones son las SPA ( Single Page Application ). En una SPA solo existe un fichero HTML, muy simple, y otro u otros ficheros JavaScript que se encargan de cambiar la interfaz de usuario con cada petici\u00f3n HTTP al servidor. Por tanto, la aplicaci\u00f3n se descarga una sola vez (se podr\u00eda decir que se instala en el navegador) y a partir de ah\u00ed solo se intercambian ficheros JSON con el servidor, que contienen los datos a manejar por el cliente. De esta forma, se aligera la parte visual del back-end, y cada cliente (ya sea una aplicaci\u00f3n web, m\u00f3vil, de escritorio...) tendr\u00e1 la responsabilidad de representarla en la pantalla seg\u00fan sus propias caracter\u00edsticas.</p> Modelo Renderizado SPA <p>Es de destacar tambi\u00e9n que los sistemas que implementan servicios REST no solo alimentan aplicaciones cliente, sino que tambi\u00e9n pueden interactuar con otros sistemas. \u00c9ste podr\u00e1 ser el caso de aplicaciones h\u00edbridas, que requieren de servicios externos para realizar determinadas tareas (env\u00edo de e-mails, servicios de IA, etc).</p>"},{"location":"ut01/ut0105/","title":"1.5. Decisiones de dise\u00f1o","text":"\u00bfQu\u00e9 tama\u00f1o tiene el proyecto? <p>El tama\u00f1o del proyecto influye directamente en la complejidad de la arquitectura, la elecci\u00f3n de herramientas y la planificaci\u00f3n de recursos. Para proyectos peque\u00f1os, una soluci\u00f3n simple y directa podr\u00eda ser suficiente, mientras que los proyectos m\u00e1s grandes requerir\u00e1n una arquitectura m\u00e1s escalable, pruebas m\u00e1s rigurosas y una gesti\u00f3n m\u00e1s detallada del c\u00f3digo.</p> \u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo? <p>Usar un lenguaje que ya conoces puede acelerar el desarrollo, ya que te sentir\u00e1s m\u00e1s c\u00f3modo y eficiente. Sin embargo, si el proyecto requiere caracter\u00edsticas espec\u00edficas que se manejan mejor con otro lenguaje, o si aprender uno nuevo te abre mejores oportunidades a largo plazo, puede valer la pena el esfuerzo. Debes considerar el tiempo de aprendizaje y c\u00f3mo impacta en el cronograma del proyecto.</p> \u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales? <p>Las herramientas de c\u00f3digo abierto suelen ser m\u00e1s econ\u00f3micas y flexibles, pero pueden requerir m\u00e1s soporte y mantenimiento por tu parte. Las soluciones comerciales pueden ofrecer m\u00e1s soporte y caracter\u00edsticas avanzadas, pero suelen tener un coste asociado. Deber\u00e1s evaluar el presupuesto disponible y las necesidades de soporte y funcionalidad del proyecto.</p> \u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores? <p>Si trabajas solo, puedes tomar decisiones m\u00e1s flexibles y r\u00e1pidas, adaptadas a tus preferencias y habilidades. Si trabajas en un equipo, la colaboraci\u00f3n y la coherencia en el c\u00f3digo se vuelven m\u00e1s importantes, por lo que deber\u00e1s considerar herramientas de control de versiones, gu\u00edas de estilo de c\u00f3digo, y plataformas de comunicaci\u00f3n y gesti\u00f3n de proyectos.</p> \u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario? <p>Si ya tienes servidores o gestores de bases de datos disponibles, deber\u00e1s asegurarte de que las tecnolog\u00edas elegidas sean compatibles con ellos. Si tienes libertad para elegir, podr\u00e1s seleccionar las tecnolog\u00edas que mejor se adapten a las necesidades del proyecto en t\u00e9rminos de rendimiento, escalabilidad y facilidad de uso.</p> \u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle? <p>La licencia que elijas afectar\u00e1 c\u00f3mo otros pueden usar, modificar y distribuir tu software. Si planeas mantener el control y limitar el uso comercial, una licencia m\u00e1s restrictiva como GPL puede ser adecuada. Si prefieres permitir un uso m\u00e1s libre, una licencia como MIT o Apache podr\u00eda ser mejor. Tambi\u00e9n debes considerar c\u00f3mo las licencias de las herramientas y librer\u00edas que utilices impactan en tu proyecto.</p> <p>Cada una de estas preguntas influir\u00e1 en c\u00f3mo abordas el desarrollo de tu aplicaci\u00f3n web, y reflexionar sobre ellas te ayudar\u00e1 a tomar decisiones m\u00e1s informadas y coherentes con tus objetivos.</p>"},{"location":"ut01/ut0106/","title":"1.6. Ejecuci\u00f3n del c\u00f3digo","text":"<p>Durante el primer curso del ciclo habr\u00e9is podido desarrollar diferentes programas consistentes en ficheros que a su vez contienen l\u00edneas de c\u00f3digo en un lenguaje espec\u00edfico (Java, en este caso). \u00bfQu\u00e9 se necesita para poder transformar este texto en instrucciones espec\u00edficas para el sistema operativo donde se ejecuta dicho c\u00f3digo? En este punto es donde entra en juego el concepto de  entorno de ejecuci\u00f3n .</p> <p>Los elementos de un entorno de ejecuci\u00f3n var\u00edan dependiendo del lenguaje de programaci\u00f3n que se est\u00e9 utilizando. Por lo general siempre es necesario un compilador, int\u00e9rprete o m\u00e1quina virtual y un conjunto de librer\u00edas propias del lenguaje. Pero puede constar de m\u00e1s elementos como un depurador o un bucle de eventos.</p> <p>Dicho esto, \u00bfcu\u00e1les son los mecanismos para la ejecuci\u00f3n del c\u00f3digo en el \u00e1mbito de las aplicaciones web? Para contestar a esto, primero deber\u00edamos diferenciar los diferentes lenguajes de programaci\u00f3n que se pueden utilizar, y en qu\u00e9 \u00e1mbitos (cliente o servidor). Es por ello que, el los siguientes subapartados, vamos a revisar primero algunos de los lenguajes de programaci\u00f3n m\u00e1s relevantes en el \u00e1mbito web, y a continuaci\u00f3n se detallar\u00e1 c\u00f3mo se ejecutan en el lado servidor (PHP, Python, y JavaScript) y en el cliente (JavaScript).</p>"},{"location":"ut01/ut0106/#1-lenguajes-de-programacion","title":"1. Lenguajes de programaci\u00f3n","text":"<p>Se enumeran a continuaci\u00f3n los lenguajes de programaci\u00f3n m\u00e1s populares, en los diferentes entornos:</p>"},{"location":"ut01/ut0106/#entorno-cliente","title":"Entorno Cliente","text":"Lenguaje DESCRIPCI\u00d3N JavaScript Es el lenguaje por excelencia en el desarrollo de entorno cliente. Existe un desarrollo continuo de frameworks y librer\u00edas alrededor de este lenguaje, ya no solo en la programaci\u00f3n cliente, sino en el lado servidor (como se ha visto anteriormente). Los principales frameworks para el desarrollo de aplicaciones reactivas basados en JavaScript son: React.js, Vue.js, Angular y Svelte. TypeScript TypeScript es un lenguaje de programaci\u00f3n libre y de c\u00f3digo abierto desarrollado y mantenido por Microsoft. Es un superconjunto de JavaScript, que esencialmente a\u00f1ade tipos est\u00e1ticos y objetos basados en clases. Los principales frameworks de programaci\u00f3n cliente reactivos (mencionados anteriormente) soportan el desarrollo tanto en JavaScript como TypeScript. Python Aunque much\u00edsimo menos popular, tambi\u00e9n existe la posibilidad de ejecutar Python en el navegador, como se ilustra con el proyecto PyScript."},{"location":"ut01/ut0106/#entorno-servidor","title":"Entorno Servidor","text":"Lenguaje DESCRIPCI\u00d3N PHP PHP es un lenguaje de programaci\u00f3n de uso general que se adaptaespecialmente al desarrollo web. Su \u00faltima versi\u00f3n es PHP8. Este lenguaje se puede utilizar sin ning\u00fan tipo de framework para desarrollar aplicaciones web, aunque tambi\u00e9n existen frameworks muy populares como CodeIgniter, Laravel, Symfony... Python Python es un lenguaje de alto nivel de programaci\u00f3n interpretado cuya filosof\u00eda es hacer hincapi\u00e9 en la legibilidad de su c\u00f3digo. Para programaci\u00f3n web existen varios frameworks, aunque los m\u00e1s destacados son Django y Flask. Cabe destacar que este lenguaje se utiliza en multitud de \u00e1mbitos m\u00e1s, entre ellos el de la ciberseguridad y el de la inteligencia artificial. JavaScript JavaScript es un lenguaje de programaci\u00f3n interpretado, dialecto del est\u00e1ndar ECMAScript. Aunque surgi\u00f3 para desarrollo en entorno cliente, se ha extendido tanto que han surgido numerosos frameworks en entorno servidor, siendo Nodejs el m\u00e1s popular. Ruby Ruby es un lenguaje de programaci\u00f3n interpretado y orientado a objetos. Ruby on Rails es el framework de programaci\u00f3n web basado en Ruby m\u00e1s conocido. Java Java es un lenguaje de programaci\u00f3n r\u00e1pido, seguro y fiable para codificar todo, desde aplicaciones m\u00f3viles y software empresarial hasta aplicaciones de macrodatos y tecnolog\u00edas del lado del servidor. Como frameworks web destacan Spring y Hibernate."},{"location":"ut01/ut0106/#php","title":"PHP","text":"<ul> <li>Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas.</li> <li>En un principio, lenguaje no tipado.</li> <li>Actualmente se encuentra en la versi\u00f3n 8; se recomienda al menos utilizar una versi\u00f3n superior a la 7.0.</li> <li>C\u00f3digo embebido en el HTML.</li> <li>Instrucciones entre etiquetas <code>&lt;?php</code>  y  <code>?&gt;</code>  ; para generar c\u00f3digo dentro de PHP, podemos usar la instrucci\u00f3n <code>echo</code>.</li> <li>Multitud de librer\u00edas y frameworks (Laravel, Symfony, Codeigniter, Zend, ...).</li> </ul> <p>Su documentaci\u00f3n es bastante completa:   https://www.php.net/manual/es/index.php.</p> Mapa mental de resumen de elementos del lenguaje PHP. <p>Durante las siguientes unidades vamos a estudiar PHP en profundidad.</p> <p>Por tanto, vemos que existe gran variedad de lenguajes de programaci\u00f3n, tanto en cliente como servidor, y es un \u00e1mbito en continua evoluci\u00f3n.</p> <p>\u00bfCu\u00e1l es el mejor lenguaje de programaci\u00f3n? \u00c9sta es la eterna pregunta que escuchar\u00e1s a lo largo de tu carrera como programador/a, y no hay una f\u00e1cil respuesta. Quiz\u00e1s la respuesta m\u00e1s adecuada sea la de: cada uno de ellos es bueno para una cosa, y lo mejor es tener una mentalidad abierta, no atarse a ninguno de ellos, y tener las bases de la programaci\u00f3n claras.</p> <p>Esta reflexi\u00f3n es de especial inter\u00e9s si desarrollas tus propios proyectos: la elecci\u00f3n de un lenguaje (o framework) u otro te puede conllevar al \u00e9xito o fracaso, que un proyecto te resulte rentable o no, optimizaci\u00f3n de costes o no... Por tanto, mant\u00e9n una mente abierta y piensa que los lenguajes y tecnolog\u00edas tienen car\u00e1cter pasajero, est\u00e1n para ser utilizados y no para casarse con ellos.</p>"},{"location":"ut01/ut0106/#12-ejecucion","title":"1.2. Ejecuci\u00f3n","text":"<p>La l\u00f3gica de nuestra aplicaci\u00f3n se distribuye entre el cliente y el servidor, cada uno de ellos cumple su funci\u00f3n espec\u00edfica. Con lo cual, la plataforma de ejecuci\u00f3n en estos dos \u00e1mbitos ha de ser diferente:</p> <ul> <li>Lado servidor: la l\u00f3gica programada se ejecuta en el sistema operativo en el cual reside el c\u00f3digo.</li> <li>Lado cliente: la l\u00f3gica se ejecuta en el navegador web.</li> </ul> <p>Adem\u00e1s del \u00e1mbito en que se ejecuta el c\u00f3digo, tambi\u00e9n hay que particularizar el mecanismo de ejecuci\u00f3n al lenguaje espec\u00edfico utilizado (como se ha mencionado en la discusi\u00f3n inicial de este apartado, sobre el  entorno de ejecuci\u00f3n ).</p> <p>A continuaci\u00f3n se detalla c\u00f3mo se dispara la ejecuci\u00f3n del c\u00f3digo programado, ya sea en el lado servidor ante una petici\u00f3n HTTP que proviene del cliente web, o en el propio navegador web ante una acci\u00f3n del usuario.</p> <p>Antes de ver estos ejemplos, cabe mencionar que el prop\u00f3sito de un servidor web es recibir peticiones HTTP y enviar la respuesta a dichas peticiones. Es posible que estas respuestas las proporcione el propio servidor web, o haya de recurrir a extensiones (o m\u00f3dulos) propias, o servidores de aplicaciones externos que ejecuten el c\u00f3digo y devuelvan la respuesta al servidor web (que la utilizar\u00e1 para enviar la respuesta final al cliente). Todo esto se detallar\u00e1 exhaustivamente en el m\u00f3dulo de  Despliegue de Aplicaciones Web .</p> <p>En los siguientes ejemplos se presupone que el entorno de ejecuci\u00f3n es el de producci\u00f3n (el que utilizan los usuarios finales). En el entorno de desarrollo se suelen emplear servidores web m\u00e1s ligeros que los propios frameworks de desarrollo proporcionan.</p>"},{"location":"ut01/ut0106/#lenguaje-php","title":"Lenguaje PHP","text":"<p>Dependiendo del servidor web, este lenguaje se puede ejecutar de los siguientes modos:</p> <ul> <li>Apache:<ul> <li>Activaci\u00f3n de m\u00f3dulo interno (<code>mod_php</code>)</li> <li>Mediante servidor de aplicaciones (<code>phpFPM</code>)</li> </ul> </li> <li>Nginx: solo existe la posibilidad de delegar la tarea de ejecuci\u00f3n del c\u00f3digo a un servidor de aplicaciones, phpFPM en este caso.</li> </ul>"},{"location":"ut01/ut0106/#lenguaje-python","title":"Lenguaje Python","text":"<p>Al igual que en el caso anterior, depender\u00e1 del servidor web que estemos utilizando:</p> <ul> <li>Apache:<ul> <li>Activaci\u00f3n de m\u00f3dulo interno (<code>libapache2-mod-wsgi-py3</code>, para python3)</li> <li>Mediante servidor de aplicaciones (gunicorn)</li> </ul> </li> <li>Nginx: solo existe la posibilidad de delegar la tarea de ejecuci\u00f3n del c\u00f3digo a un servidor de aplicaciones (gunicorn).</li> </ul>"},{"location":"ut01/ut0106/#lenguaje-javascript","title":"Lenguaje JavaScript","text":"<p>Como se ha mencionado anteriormente, este lenguaje, a d\u00eda de hoy, se puede ejecutar tanto en el lado cliente como en el lado servidor:</p> <ul> <li>En cliente (navegador web): los diferentes navegadores actuales incorporan un entorno de ejecuci\u00f3n mediante el cual es posible ejecutar c\u00f3digo JavaScript, no existe comunicaci\u00f3n directa con el sistema operativo. La ejecuci\u00f3n del c\u00f3digo suele responder a las acciones del usuario, y el navegador proporciona todos los recursos para que se pueda ejecutar.</li> <li>En servidor: para poder ejecutar c\u00f3digo JavaScript directamente en un sistema operativo, se ha de instalar previamente el entorno de ejecuci\u00f3n de Node.js. Este framework incorpora su propio servidor web para ser utilizado en un servidor de producci\u00f3n, aunque es posible utilizar Apache o Nginx como reverse proxy.</li> </ul>"},{"location":"ut01/ut0106/#13-integracion-con-los-lenguajes-de-marcas","title":"1.3. Integraci\u00f3n con los lenguajes de marcas","text":"<p>Durante el primer curso hemos aprendido sobre los lenguajes de marcas (HTML, entre otros) y programaci\u00f3n de prop\u00f3sito general. Cuestiones:</p> <ul> <li>\u00bfHay alguna relaci\u00f3n entre estos dos tipos de lenguajes?</li> <li>\u00bfPara qu\u00e9 querr\u00edamos relacionarlos en una aplicaci\u00f3n web?</li> </ul> <p>Una posible respuesta ser\u00eda: cada tipo tiene un objetivo diferente, y la combinaci\u00f3n de ambos nos proporciona la posibilidad de crear  p\u00e1ginas web din\u00e1micas .</p> Creaci\u00f3n de bloques en p\u00e1ginas din\u00e1micas <p>Tomemos como ejemplo la siguiente p\u00e1gina web:</p> <p>Cada uno de los productos se visualiza en el HTML seg\u00fan el siguiente c\u00f3digo HTML.</p> <p></p> <p>\u00bfCrees que el programador web ha creado tantos bloques como productos se han recuperado? \u00bfSe puede saber a priori cu\u00e1ntos productos va a devolver la b\u00fasqueda?</p> <p>La respuesta a las dos preguntas es: no. Por tanto, la p\u00e1gina se ha de comportar de forma din\u00e1mica, en alg\u00fan momento se ha de programar la siguiente l\u00f3gica: por cada producto a mostrar crea un bloque con estas caracter\u00edsticas determinadas, sea cual sea el n\u00famero de productos a visualizar en la pantalla.</p> <p>Es aqu\u00ed donde entra la magia del binomio \"lenguaje de programaci\u00f3n\" + \"lenguaje de marcas\", mediante el cual vamos a poder a\u00f1adir sentencias de un lenguaje de programaci\u00f3n a c\u00f3digo HTML, aport\u00e1ndole un car\u00e1cter din\u00e1mico al documento web.</p> <p>Esta combinaci\u00f3n se producir\u00e1 en el lado servidor o en el lado cliente, dependiendo de si:</p> <ul> <li>Es una aplicaci\u00f3n web basada en MVC (Modelo-Vista-Controlador): la combinaci\u00f3n de los dos lenguajes se llevar\u00e1 a cabo en el lado  servidor . El lenguaje de programaci\u00f3n ser\u00e1 el empleado en el lado servidor (PHP o Python), y el documento web ser\u00e1 enviado al lado cliente desde el servidor.</li> <li>Es una aplicaci\u00f3n web basada en  servicios REST : en este caso, la combinaci\u00f3n de los dos lenguajes se llevar\u00e1 a cabo en el lado  cliente . El lenguaje de programaci\u00f3n ser\u00e1 el empleado en el lado cliente, JavaScript en nuestro caso (tambi\u00e9n podr\u00eda ser TypeScript). El cliente consumir\u00e1 los servicios web del servidor e intercambiar\u00e1n informaci\u00f3n en formato JSON. El cliente ser\u00e1 el encargado de modificar el HTML de forma din\u00e1mica.</li> </ul> <p>Veamos un ejemplo con una lista simple de productos, para el caso de MVC. En el ejemplo de la izquierda vemos que hemos de crear tantos bloques de productos como productos a representar; en el ejemplo de la derecha, se ha introducido un bucle mediante PHP que har\u00e1 que, por cada producto del array de productos, se visualice un bloque con sus datos correspondientes:</p> <p>En este caso, vemos que se ha introducido c\u00f3digo PHP con un etiquetado especial, que indica que ese bloque del fichero de marcas contiene c\u00f3digo PHP.</p> <p>A continuaci\u00f3n se muestra otro ejemplo, en este caso de integraci\u00f3n de un lenguaje de programaci\u00f3n del lado cliente con el lenguaje de marcas HTML. Se trata de un componente programado mediante el framework Vue.js:</p> <p>En este caso tambi\u00e9n vemos que existen atributos con s\u00edmbolos como <code>:</code> o <code>@</code> en el etiquetado que apuntan a variables del c\u00f3digo JavaScript.</p> <p>Estos ejemplos solo ejemplifican la integraci\u00f3n de los lenguajes de marcas con un lenguaje de programaci\u00f3n, sin \u00e1nimo de profundicar m\u00e1s en este momento del curso.</p>"},{"location":"ut01/ut0106/#2-servidor-web","title":"2. Servidor web","text":"<p>Software que recibe peticiones HTTP (GET, POST, DELETE, ...). Devuelve el recurso solicitado (HTML, CSS, JS, JSON, im\u00e1genes, etc...)</p> <p>El producto m\u00e1s implantando es Apache Web Server (https://httpd.apache.org), creado en 1995.</p> <ul> <li>Software libre y multiplataforma.</li> <li>Sistema de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl.</li> <li>Utiliza el archivo <code>.htaccess</code> para su configuraci\u00f3n.</li> </ul> <p>En la actualidad, Ngingx (https://www.nginx.com) ha ganado mercado respecto a Apache. Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache.</p> <p>En este enlace podemos observar una comparativa de servidores web: https://w3techs.com/technologies/history_overview/web_server/ms/q.</p>"},{"location":"ut01/ut0106/#3-servidor-de-aplicaciones","title":"3. Servidor de Aplicaciones","text":"<p>Software que ofrece servicios adicionales a los de un servidor web:</p> <ul> <li>Clustering.</li> <li>Balanceo de carga.</li> <li>Tolerancia a fallos.</li> </ul> <p>Tomcat (http://tomcat.apache.org/) es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java. Contiene un contenedor Web Java que interpreta Servlets y JSP.</p> <p>Estudio de servidores web y servidores de aplicaciones</p> <p>Tanto los servidores web como los servidores de aplicaciones los estudiaremos en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\".</p>"},{"location":"ut01/ut0107/","title":"1.7. Herramientas","text":"<p>El ecosistema de herramientas en el entorno web es amplio, rico y en constante evoluci\u00f3n. Es por ello que hacer una lista exhaustiva se hace dif\u00edcil, y puede quedar obsoleta en unos pocos meses.</p> <p>En este enlace se propone una muestra de estas herramientas.</p> <p>Algunas de estas herramientas te resultar\u00e1n familiares, otras las utilizar\u00e1s en tu futura vida profesional o no (dependiendo del campo en que te especialices), y otras muchas ser\u00e1n sustituidas o dejar\u00e1n de ser usadas.</p> <p>Durante este curso podr\u00e1s utilizar el IDE o editor de texto de tu elecci\u00f3n. Visual Studio Code (para cualquier lenguaje de programaci\u00f3n) o PyCharm (para Python) son la opci\u00f3n recomendada.</p> <p>Como fuentes de consulta de problemas espec\u00edficos, StackOverflow es una de las plataformas m\u00e1s utilizadas.</p> <p>Finalmente, como base para lenguajes de programaci\u00f3n y de marcado, o como repaso del primer curso del ciclo, te puedes apoyar en los manuales de W3CSchools.</p>"},{"location":"ut01/ut0108/","title":"1.8. Tecnolog\u00edas","text":"<p>Al igual que en las herramientas de programaci\u00f3n, el ecosistema de tecnolog\u00edas alrededor de las aplicaciones web tambi\u00e9n es muy variado, rico, y en constante evoluci\u00f3n. Continuamente surgen nuevas versiones de las tecnolog\u00edas existentes (que rompen con las anteriores), o tecnolog\u00edas/frameworks/librer\u00edas novedosas a los que se adhieren multitud de profesionales. Todo ello hace que la curva de aprendizaje inicial en el \u00e1mbito de las aplicaciones web sea m\u00e1s acusada en un principio.</p> <p>A continuaci\u00f3n se presentan algunas de estas tecnolog\u00edas, agrupadas por tipolog\u00eda.</p>"},{"location":"ut01/ut0108/#1-virtualizacion","title":"1. Virtualizaci\u00f3n","text":""},{"location":"ut01/ut0108/#2-servidores-web","title":"2. Servidores web","text":""},{"location":"ut01/ut0108/#3-sevidores-de-aplicaciones","title":"3. Sevidores de aplicaciones","text":""},{"location":"ut01/ut0108/#4-contenedores-servlets","title":"4. Contenedores servlets","text":""},{"location":"ut01/ut0108/#5-gestores-de-bbdd","title":"5. Gestores de BBDD","text":""},{"location":"ut01/ut0108/#6-frameworks-servidor","title":"6. Frameworks servidor","text":"<p>Frameworks back-end m\u00e1s populares.</p>"},{"location":"ut01/ut0108/#7-frameworks-cliente","title":"7. Frameworks cliente","text":"<p>Frameworks front-end m\u00e1s populares.</p> <p>Las tecnolog\u00edas empleadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son:</p> perfil herramienta tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript  Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp <p>Perfil full-stack</p> <p>En las ofertas de trabajo, cuando hacen referencia a un Full-stack developer, est\u00e1n buscando un perfil que domina tanto el front-end como el back-end.</p>"},{"location":"ut01/ut0109/","title":"1.9. Navegadores","text":"<p>Dado que el entorno de ejecuci\u00f3n en el lado cliente es el navegador web, se ha dedicado un apartado exclusivamente para caracterizar este tipo de software.</p> <p>Los navegadores representan un software complejo, en constante evoluci\u00f3n, y en el que las diferentes opciones del mercado est\u00e1n respaldadas por motivaciones diversas (detr\u00e1s de algunos existe una empresa multinacional, otros est\u00e1n respaldados por una comunidad de desarrolladores, etc.), as\u00ed como diferentes principios de desarrollo.</p> <p>En la siguiente tabla se resumen algunas de las caracter\u00edsticas que diferencia a diferentes navegadores:</p> Criterio Comparativa Etiquetado HTML HTML Reference - Browser Support Etiquetado CSS CSS Browser Support Reference Rendimiento Browser performance Velocidad The Fastest Browser Options in 2022 Seguridad Navegadores seguros: comparativa de Chrome, Firefox, Edge y otros"},{"location":"ut01/ut0109/#2-especificaciones-oficiales","title":"2. Especificaciones oficiales","text":"<p>Dada la gran cantidad de tecnolog\u00edas y navegadores utilizados en el lado cliente, existe la voluntad de estandarizar determinados aspectos que gobiernan estas tecnolog\u00edas, en forma de especificaciones emitidas por organismos reconocidos como oficiales. Se trata de que los diferentes desarrolladores tengan suficiente libertad para ser competitivos, pero sin que el panorama se disperse excesivamente.</p> <p>A continuaci\u00f3n se citan varios de estos est\u00e1ndares:</p> <ul> <li>HTML5: del W3C (Consorcio de la World Wide Web)</li> <li>CSS: tambi\u00e9n del W3C</li> <li>ECMAScript: aplicado a JavaScript, y desarrollado por ECMA International (organizaci\u00f3n internacional basada en membres\u00edas de est\u00e1ndares para la comunicaci\u00f3n y la informaci\u00f3n)</li> </ul> <p>En este art\u00edculo se discute la necesidad de los est\u00e1ndares web, como visi\u00f3n general.</p>"},{"location":"ut01/ut0110/","title":"1.10. Puesta en marcha","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de prepararlo con las herramientas comentadas.</p> <p>Vamos a proponer dos opciones; la opci\u00f3n 1 ser\u00e1 la instalaci\u00f3n del paquete XAMPP para trabajar directamente en el equipo host; la opci\u00f3n 2 ser\u00e1 crear un contenedor con Docker.</p> <p>En realidad podr\u00edamos preparar el entorno de diferentes formas (directamente instalando en la m\u00e1quina local con el paquete XAMPP, mediante m\u00e1quina virtual con VirtualBox...) pero la utilizaci\u00f3n de Docker se ve justificada por su f\u00e1cil utilizaci\u00f3n, la profundizaci\u00f3n en esta tecnolog\u00eda se ver\u00e1 en otros m\u00f3dulos de este curso (Despliegue de aplicaciones web) y su extensa utilizaci\u00f3n en la industria (en todo tipo de entornos).</p> <p>XAMPP vs Docker en Windows</p> <p>Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajas con Windows como sistema operativo.</p> <p>Versiones</p> <p>A lo largo del curso vamos a usar <code>PHP 8.0</code>.</p>"},{"location":"ut01/ut0110/#1-opcion-1-xampp","title":"1. Opci\u00f3n 1: XAMPP","text":"<p>XAMPP ( https://www.apachefriends.org/es/index.html) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas:</p> <ul> <li>X para el sistema operativo (de ah\u00ed que se conozca tambi\u00e9n como LAMP o WAMP).</li> <li>A para Apache.</li> <li>M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web.</li> <li>P para PHP.</li> <li>P para Perl.</li> </ul> <p>Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha.</p>"},{"location":"ut01/ut0110/#2-opcion-2-docker","title":"2. Opci\u00f3n 2: Docker","text":"<p>Docker (https://www.docker.com) es un gestor de contenedores; considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo.</p> <p>El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales.</p> <p>As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker.</p> <p>Instalaci\u00f3n</p>"},{"location":"ut01/ut0110/#1-actualizar-el-sistema","title":"1. Actualizar el Sistema","text":"<p>Antes de comenzar, es recomendable actualizar los paquetes existentes en tu sistema:</p> <pre><code>sudo apt update         \n\nsudo apt upgrade -y         \n</code></pre>"},{"location":"ut01/ut0110/#2-instalar-las-dependencias","title":"2. Instalar las Dependencias","text":"<p>Instala las dependencias necesarias para Docker:</p> <pre><code>    sudo apt install -y ca-certificates curl gnupg lsb-release         \n</code></pre>"},{"location":"ut01/ut0110/#3-agregar-la-clave-gpg-de-docker","title":"3. Agregar la Clave GPG de Docker","text":"<p>Agrega la clave GPG oficial de Docker a tu sistema:</p> <pre><code>sudo mkdir -m 0755 -p /etc/apt/keyrings         \n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg        \n</code></pre>"},{"location":"ut01/ut0110/#4-agregar-el-repositorio-de-docker","title":"4. Agregar el Repositorio de Docker","text":"<p>A\u00f1ade el repositorio de Docker a tus fuentes de APT:</p> <pre><code>echo \\           \n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\           \n$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null         \n</code></pre>"},{"location":"ut01/ut0110/#5-actualizar-el-indice-de-paquetes","title":"5. Actualizar el \u00cdndice de Paquetes","text":"<p>Actualiza el \u00edndice de paquetes de APT nuevamente para incluir el nuevo repositorio:</p> <pre><code>sudo apt update         \n</code></pre>"},{"location":"ut01/ut0110/#6-instalar-docker-engine-docker-cli-y-containerd","title":"6. Instalar Docker Engine, Docker CLI y Containerd","text":"<p>Ahora, instala Docker usando el comando apt:</p> <pre><code>sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin         \n</code></pre>"},{"location":"ut01/ut0110/#7-verificar-la-instalacion-de-docker","title":"7. Verificar la Instalaci\u00f3n de Docker","text":"<p>Para verificar que Docker se haya instalado correctamente, ejecuta:</p> <pre><code>sudo docker --version         \n</code></pre> <p>Deber\u00edas ver la versi\u00f3n de Docker instalada.</p>"},{"location":"ut01/ut0110/#8-permitir-ejecucion-de-docker-sin-sudo-opcional","title":"8. Permitir Ejecuci\u00f3n de Docker sin Sudo (Opcional)","text":"<p>Si quieres ejecutar Docker sin usar<code>sudo</code>, agrega tu usuario al grupo <code>docker</code>:</p> <pre><code>sudo usermod -aG docker $USER         \n</code></pre> <p>Despu\u00e9s de ejecutar este comando, cierra la sesi\u00f3n y vuelve a iniciarla para que los cambios tengan efecto.</p>"},{"location":"ut01/ut0110/#9-probar-docker","title":"9. Probar Docker","text":"<p>Verifica que Docker est\u00e9 funcionando correctamente ejecutando un contenedor de prueba:</p> <pre><code>docker run hello-world         \n</code></pre> <p>Este comando descargar\u00e1 una imagen de prueba y ejecutar\u00e1 un contenedor que deber\u00eda mostrar un mensaje de confirmaci\u00f3n en la terminal.</p>"},{"location":"ut01/ut0110/#10-instalar-docker-desktop-en-ubuntu-opcional","title":"10. Instalar Docker Desktop en Ubuntu (Opcional)","text":"<p>Si deseas usar Docker Desktop en Ubuntu, sigue estos pasos adicionales:</p> <p>\u00a0\u00a010.1) Descargar Docker Desktop para Linux: Visita la p\u00e1gina de descarga de Docker Desktop y descarga la versi\u00f3n para Linux.</p> <p>\u00a0\u00a010.2) Instalar Docker Desktop: Descomprime el archivo descargado y ejecuta el instalador:</p> <pre><code>sudo apt-get install ./docker-desktop-&lt;version&gt;-&lt;arch&gt;.deb            \n</code></pre> <p>\u00a0\u00a010.3) Ejecutar Docker Desktop: Inicia Docker Desktop desde tu entorno gr\u00e1fico o ejecutando <code>docker-desktop</code> en la terminal.</p> <p>\u00a0\u00a010.4) Configurar Docker Desktop: Cuando se inicie Docker Desktop por primera vez, puedes configurarlo para usar WSL 2 o bien ejecutar contenedores nativos en Linux.</p>"},{"location":"ut01/ut0110/#11-configurar-docker-desktop-opcional","title":"11. Configurar Docker Desktop (Opcional)","text":"<p>Si deseas hacer configuraciones adicionales como la cantidad de recursos que Docker puede usar, puedes hacerlo desde la interfaz gr\u00e1fica de Docker Desktop.</p> <p>Con estos pasos, deber\u00edas tener Docker y Docker Desktop completamente instalados y listos para usar en tu sistema Ubuntu.<code>&lt;hr&gt;</code></p> <p>Si a\u00fan as\u00ed no se pudiera lanzar Docker Desktop en Ubuntu, podemos instalar el contenedor Portainer (puedes ver c\u00f3mo funciona en el siguiente punto docker de gesti\u00f3n de dockers Portainer).</p>"},{"location":"ut01/ut0110/#1-instalacion-de-docker-desktop","title":"1. Instalaci\u00f3n de Docker-Desktop","text":"<p>Para una instalaci\u00f3n en Windows lo ideal es instalar la aplicaci\u00f3n Docker Desktop ( https://www.docker.com/products/docker-desktop  ) en nuestros entornos de desarrollo (el cual ya incluye en n\u00facleo de Docker y la herramienta Docker Compose).</p> <p>Esta instalaci\u00f3n requiere de un software adicional WSL2, el cual es un subsistema de Linux dentro de Windows; aqu\u00ed  podemos consultar sus m\u00e9todos de instalaci\u00f3n. Por suerte, con la misma instalaci\u00f3n de Docker Desktop, viene tambi\u00e9n la de WSL (solo deberemos tener en cuenta tener el check de instalaci\u00f3n activado).</p> <p>Check para activaci\u00f3n de WSL <p>Cuando termine la instalaci\u00f3n, reinicia tu m\u00e1quina.</p> <p>Interfaz programa Docker Desktop</p>"},{"location":"ut01/ut0110/#2-verificar-la-instalacion","title":"2. Verificar la instalaci\u00f3n","text":"<p>Una vez Docker est\u00e9 instalado, abre PowerShell o Command Prompt y verifica la instalaci\u00f3n:</p> <pre><code>docker --version         \n\ndocker-compose --version         \n</code></pre>"},{"location":"ut01/ut0110/#3-crear-o-abrir-el-archivodocker-composeyml","title":"3. Crear o abrir el archivo<code>docker-compose.yml</code>","text":"<p>Aseg\u00farate de tener un archivo <code>docker-compose.yml</code> en el directorio en el que vas a trabajar. Este archivo define la configuraci\u00f3n de tus servicios.</p> <p>Ejemplo de un archivo docker-compose.yml sencillo:</p> <pre><code>version: '3.8'\n\nservices:\n  web:\n    image: php:8.2-apache\n    container_name: apache_php\n    ports:\n      - \"8081:80\"   \n</code></pre>"},{"location":"ut01/ut0110/#4-levantar-el-contenedor-usando-docker-compose","title":"4. Levantar el contenedor usando Docker Compose","text":"<p>\u00a0\u00a04.1) Abre una ventana de PowerShell, Command Prompt o Terminal (si usas WSL).</p> <p>\u00a0\u00a04.2) Navega al directorio donde se encuentra tu archivo docker-compose.yml.</p> <pre><code>cd ruta/al/directorio         \n</code></pre> <p>\u00a0\u00a04.3) Una vez est\u00e9s en el directorio adecuado, ejecuta el siguiente comando para levantar los servicios definidos en el archivo:</p> <pre><code>docker-compose up -d         \n</code></pre>"},{"location":"ut01/ut0110/#5-verificar-que-los-contenedores-estan-corriendo","title":"5. Verificar que los contenedores est\u00e1n corriendo","text":"<p>Despu\u00e9s de ejecutar docker-compose up, puedes verificar que los contenedores est\u00e1n en ejecuci\u00f3n con:</p> <pre><code>docker ps         \n</code></pre> <p>Si todo est\u00e1 correcto, deber\u00edas ver los contenedores definidos en el archivo <code>docker-compose.yml</code> listados.<code>&lt;br /&gt;</code></p>"},{"location":"ut01/ut0110/#6-acceso-a-los-servicios","title":"6. Acceso a los servicios","text":"<p>Si el archivo<code>docker-compose.yml</code> incluye servicios con puertos expuestos (como en el ejemplo de Nginx), puedes acceder a ellos desde tu navegador usando localhost y el puerto definido, por ejemplo:</p> <pre><code>http://localhost:8080         \n</code></pre> docker de gesti\u00f3n de dockers Portainer <p>Portainer es una forma c\u00f3moda de gestionar entornos de contenedores distribuidos.</p> <p>El software se instala como un contenedor Docker y, por tanto, se ejecuta pr\u00e1cticamente en cualquier lugar. Mostramos la rutina de instalaci\u00f3n y aportamos \u00fatiles consejos.</p> <p>A lo largo del curso iremos creando diferentes contenedores con los servicios necesarios, de manera que cada vez s\u00f3lo trabajemos con el software m\u00ednimo.</p> <p>Respecto a <code>Docker</code>, para escribir los apuntes hemos utilizado la version <code>20.10</code> y en Docker Compose la version <code>2.19</code>.</p> <p>Finalmente, la versi\u00f3n de <code>Docker Desktop</code> que hemos utilizado es la <code>4.0</code>.</p>"},{"location":"ut01/ut0110/#instalar","title":"Instalar","text":""},{"location":"ut01/ut0110/#en-linux","title":"En Linux","text":"<pre><code>$ sudo docker volume create portainer_data     \n\n$ sudo docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest     \n</code></pre> <p>Instalaci\u00f3n del contenedor Portainer desde terminal.</p>"},{"location":"ut01/ut0110/#en-windows","title":"En Windows","text":"<pre><code>docker volume create portainer_data     \n\ndocker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest     \n</code></pre>"},{"location":"ut01/ut0110/#lanzar","title":"Lanzar","text":"<p>Como otro contenedor, podremos acceder a \u00e9l mediante un navegador (Firefox, Chrome, ...) introduciendo la URL: </p> <pre><code>https://localhost:9443\n</code></pre> <p>Acceso a docker Portainer desde el puerto 9000.</p> <p>Si muestra el siguiente texto, debemos reiniciar el contenedor del Docker Portainer:</p> <pre><code>docker restart portainer\n</code></pre> <p>``Pesta\u00f1a indicando reiniciar el docker Portainer.</p> <p>Volvemos a acceder v\u00eda <code>https://localhost:9443</code>:</p> <p>Pesta\u00f1a de inicio de docker Portainer.</p>"},{"location":"ut01/ut0110/#funciona-como-un-docker","title":"Funciona como un docker","text":"<p>Para ver el ID de contenedor podemos listar los contenedores:</p> <pre><code>$ sudo docker ps -a     \n</code></pre> <p>Para parar el contenedor:</p> <pre><code>$ sudo docker stop [ID]     \n</code></pre> <p>Para volver a lanzar el contenedor:</p> <pre><code>$ sudo docker start [ID]     \n</code></pre>"},{"location":"ut01/ut0110/#21-plantilla-servidor-web-php","title":"2.1. Plantilla Servidor Web + PHP","text":"<p>Docker se basa en el uso de im\u00e1genes para crear contenedores. Docker Compose simplifica el trabajo con m\u00faltiples contenedores, y por ello, para facilitar el arranque, nos centraremos en Docker Compose utilizando una plantilla que \u00fanicamente va a contener como servicios Apache/Nginx y PHP.</p> <p>Para ello, vamos crear una carpeta de nombre <code>proyecto1</code>, y dentro de este el archivo <code>docker-compose.yaml</code> con:</p> <p>proyecto1 con distintos servidores en <code>docker-compose.yml</code></p> Apache y PHPNginx y PHP <ul> <li>Estructura del proyecto:</li> </ul> <pre><code>proyecto1/         \n\u2502         \n\u251c\u2500\u2500 docker-compose.yml         \n\u2514\u2500\u2500 src/    # Carpeta del proyecto         \n</code></pre> <ul> <li>Fichero <code>docker-compose.yml</code>:</li> </ul> <pre><code>version: '3.8'\n\nservices:\n  web:\n    image: php:8.2-apache\n    container_name: apache_php\n    ports:\n      - \"8081:80\"\n    volumes:\n      - ./src:/var/www/html\n    environment:\n      APACHE_RUN_USER: www-data\n      APACHE_RUN_GROUP: www-data\n      APACHE_LOG_DIR: /var/log/apache2\n    networks:\n      - webnet\n\nnetworks:\n  webnet:\n    driver: bridge\n</code></pre> <ul> <li>Estructura del proyecto: </li> </ul> <pre><code>proyecto2/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 .docker\n\u2502   \u251c\u2500\u2500\u2500 nginx\n\u2502   \u2502   \u2514\u2500\u2500 conf.d\n\u2502   \u2502      \u2514\u2500\u2500 php.conf  # Archivo configuraci\u00f3n php en Nginx\n\u2514\u2500\u2500 src/    # Carpeta del proyecto\n</code></pre> <ul> <li>Fichero <code>docker-compose.yml</code>:</li> </ul> <pre><code>version: '3.8'\n\nservices:\n  nginx:\n    image: nginx:1.19\n    ports:\n      - \"8082:80\"  # Aseg\u00farate de que el puerto est\u00e1 correctamente mapeado\n    volumes:\n      - ./src:/var/www/php\n      - ./.docker/nginx/conf.d:/etc/nginx/conf.d  # Configuraci\u00f3n personalizada de Nginx\n    depends_on:\n      - php\n    networks:\n      - webnet\n  php:\n    image: php:8.0-fpm\n    working_dir: /var/www/php\n    volumes:\n      - ./src:/var/www/php\n    networks:\n      - webnet\n  networks:\n    webnet:\n      driver: bridge\n</code></pre> <p>Aseg\u00farate de que tu archivo de configuraci\u00f3n de Nginx est\u00e1 correctamente configurado. Aqu\u00ed hay un ejemplo b\u00e1sico que debes colocar en./.docker/nginx/conf.d/default.conf:</p> <pre><code>server {\n    listen 80;\n    server_name localhost;\n\n    root /var/www/php;\n    index index.php index.html index.htm;\n\n    location / {\n        try_files$uri $uri/ /index.php?$args;\n    }\n\n    location ~\\.php$ {\n        include fastcgi_params;\n        fastcgi_pass php:9000;  # Aseg\u00farate de que este nombre coincide con el nombre del servicio PHP\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n}\n</code></pre> <p>Dentro de la carpeta que contenga dicho archivo, hemos de crear una carpeta <code>src</code> donde colocaremos nuestro c\u00f3digo fuente.</p> <p>Para facilitar la puesta en marcha, ten\u00e9is las plantillas de:</p> <ul> <li> <p>Apache/PHP (versi\u00f3n 2 con <code>a2enmod rewrite</code>) o</p> </li> <li> <p>Nginx/PHP</p> </li> </ul> <p>isponibles para su descarga.</p> \u00d3rdenes en Docker <p>Cuando estemos listos, lanzaremos el servicio mediante:</p> <pre><code>docker-compose up -d     \n</code></pre> <p>Docker Compose primero buscar\u00e1 la imagen definida en su sistema local, y si no puede encontrar la imagen, descargar\u00e1 la imagen desde Docker Hub. Ver\u00e1s un resultado como este:</p> <p><code>Descarga e instalaci\u00f3n de im\u00e1genes de docker-compose.yml</code></p> <p>Si queremos ver el contenido de los archivos de log del servicio utilizaremos:</p> <pre><code>docker-compose logs -f     \n</code></pre> <p>Para copiar un archivo desde nuestro sistema al interior del contenedor:</p> <pre><code>docker cp ./miFichero idContenedor:/tmp     \n</code></pre> <p>Y al rev\u00e9s, si queremos consultar un archivo contenido dentro de un contenedor, lo copiaremos a nuestro sistema:</p> <pre><code>docker cp idContenedor:/tmp/archivoAConsultar.txt ./     \n</code></pre> <p>Finalmente, si queremos acceder a un terminal interactivo dentro del contenedor:</p> <pre><code>docker exec -it nombreContenedor bash     \n</code></pre> <p>Otros comandos que podemos llegar a utilizar son:</p> <ul> <li><code>docker ps</code>: Ver los contenedores que se estan ejecutando.</li> <li><code>docker ps -a</code>: Ver todos los contenedores.</li> <li><code>docker start nombreContenedor</code>: Arrancar un contenedor.</li> <li><code>docker images</code>: Ver las im\u00e1genes que tenemos descargadas.</li> <li><code>docker stop $(docker ps -a -q)</code>: Detener todos los contenedores en ejecuci\u00f3n.</li> <li><code>docker rm $(docker ps -a -q)</code>: Eliminar todos los contenedores detenidos.</li> </ul> <p>Docker stack</p> <p>Existen diversas opciones mediante Docker que ofrecen soluciones completas y empaquetadas para todo el stack de desarrollo. En posteriores sesiones podremo utilizar tanto Devilbox (http://devilbox.org) como Laradock (https://laradock.io).</p> <p>... pero quiero saber c\u00f3mo funciona ...</p> <p>En el m\u00f3dulo de \"Despliegue de aplicaciones\" estudiar\u00e9is en profundidad, adem\u00e1s de Docker, Apache y otros servicios que nos servir\u00e1n de ayuda para el desarrollo en entorno servidor.</p>"},{"location":"ut01/ut0110/#3-editor-de-codigo","title":"3. Editor de c\u00f3digo","text":"<p>En este curso vamos a emplear Visual Studio Code (https://code.visualstudio.com) como editor de c\u00f3digo fuente. Existen otras alternativas, siendo PhpStorm el IDE  m\u00e1s conocido (pero de pago). Otra posibilidad es utilizar Eclipse, aunque es un entorno bastante pesado.</p> <p>VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones:</p> <ul> <li>PHP Debug: para la depuraci\u00f3n de c\u00f3digo PHP. Permite conectar VSCode a un servidor de depuraci\u00f3n PHP y proporciona herramientas para inspeccionar variables, establecer puntos de interrupci\u00f3n y realizar un seguimiento detallado del flujo de ejecuci\u00f3n.</li> <li>PHP IntelliSense: extensi\u00f3n fundamental, aporta mucha velocidad de escritura gracias al \u00abintellisense\u00bb. Mejora la codificaci\u00f3n al proporcionar sugerencias inteligentes de c\u00f3digo y completar autom\u00e1ticamente fragmentos de c\u00f3digo mientras escribes en PHP.</li> <li>Php Intelephense: ofrece caracter\u00edsticas avanzadas para desarrolladores PHP, como autocompletado inteligente, an\u00e1lisis est\u00e1tico y soporte para PHPDoc. Ayuda a detectar errores y a escribir c\u00f3digo m\u00e1s eficiente.</li> <li>PHP DocBlocker: simplifica la creaci\u00f3n de comentarios tipo DocBlock para sus funciones y m\u00e9todos PHP. Con solo presionar un atajo de teclado, puede generar r\u00e1pidamente documentaci\u00f3n legible y \u00fatil para tu c\u00f3digo.</li> <li>PHP Code Sniffer: asegura que el c\u00f3digo PHP cumpla con los est\u00e1ndares de codificaci\u00f3n establecidos. Puedes personalizar las reglas seg\u00fan las necesidades de tu proyecto.</li> <li>PHP CS Fixer: automatiza la correcci\u00f3n de problemas de formato en tu c\u00f3digo PHP, manteni\u00e9ndolo limpio y coherente con facilidad.</li> <li>PHP Namespace Resolver</li> <li>Docker</li> </ul> <p>En la siguiente sesi\u00f3n comenzaremos a utilizar Intelephense pero en esta sesi\u00f3n nos vamos a centrar en Docker (m\u00e1s adelante instalaremos nuevas extensiones).</p> <p>Por ejemplo, si abrimos la extensi\u00f3n de Docker, podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo:</p> Extensi\u00f3n Docker en Visual Studio Code"},{"location":"ut01/ut0110/#31-configurar-llaves-php-en-vs-code","title":"3.1. Configurar llaves PHP en VS Code","text":"<p>Ir a Archivo \u2192 Preferencias \u2192 Configurar fragmentos de usuario (File \u2192 Preferences \u2192 User Snippets) seleccionar la opci\u00f3n html y agregar el snippet en el fichero <code>html.json</code>:</p> <pre><code>\"php\": {\n    \"prefix\": \"php\",\n    \"body\": [\n        \"&lt;?php\",\n        \"$1\",\n        \"?&gt;\"\n    ],\n    \"description\": \"php tag\"\n}\n</code></pre> <p>A partir de ahora podremos abreviar la introducci\u00f3n de las etiquetas <code>&lt;?php</code> y <code>?&gt;</code> en VS Code introduciendo php + TAB.</p>"},{"location":"ut01/ut0110/#4-hola-mundo","title":"4. Hola Mundo","text":"<p>Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP.</p> <p>Si nombramos el archivo como index.php, al acceder a http://localhost autom\u00e1ticamente cargar\u00e1 el resultado:</p> PhpResultado <pre><code>&lt;!DOCTYPE html&gt;     \n&lt;html lang=\"es\"&gt;     \n&lt;head&gt;         \n    &lt;meta charset=\"UTF-8\"&gt;         \n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;         \n    &lt;title&gt;Hola Mundo&lt;/title&gt;     \n&lt;/head&gt;     \n&lt;body&gt;         \n&lt;?php             \necho \"Hola Mundo\";         \n?&gt;     \n&lt;/body&gt;     \n&lt;/html&gt;    \n</code></pre> <p><code>P\u00e1gina en php: Hola Mundo.</code></p>"},{"location":"ut01/ut01ac/","title":"Ejercicios","text":""},{"location":"ut01/ut01ac/#ejercicio-101","title":"Ejercicio 101","text":"<p>Busca en Internet cu\u00e1les son los tres frameworks PHP m\u00e1s utilizados, e indica:</p> <ul> <li>Nombre y URL</li> <li>A\u00f1o de creaci\u00f3n</li> <li>\u00daltima versi\u00f3n</li> </ul>"},{"location":"ut01/ut01ac/#ejercicio-102","title":"Ejercicio 102","text":"<p>Busca tres ofertas de trabajo de desarrollo de software en Infojobs en la Comunidad Valenciana que citen PHP y anota:</p> <ul> <li>Empresa + puesto + frameworks PHP + requisitos + sueldo + enlace a la oferta.</li> </ul>"},{"location":"ut01/ut01ac/#ejercicio-103","title":"Ejercicio 103","text":"<p>Instala mediante Docker la dupla Apache+Php2 (encontrar\u00e1s la descarga en la secci\u00f3n Descargas de esta unidad).</p> <p>Utiliza el puerto 8082 para Apache (en el fichero docker-compose.yml).</p> <p>Estructura del contenedor:</p> <pre><code>ApachePhp2/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 .docker/    # Carpeta de configuraci\u00f3n\n\u2502  \u2514\u2500\u2500 php.ini  # Fichero configuraci\u00f3n php\n\u2514\u2500\u2500 src/        # Carpeta del proyecto\n</code></pre>"},{"location":"ut01/ut01ac/#ejercicio-104","title":"Ejercicio 104","text":"<p>Instala (mediante Docker) la dupla Nginx+Php2  (encontrar\u00e1s la descarga en la secci\u00f3n Descargas de esta unidad).</p> <p>Utiliza el puerto 8083 para Nginx (en el fichero docker-compose.yml).</p> <pre><code>NginxPhp/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 .docker/      # Carpeta de configuraci\u00f3n\n\u2502  \u2514\u2500\u2500 nginx/    \n\u2502     \u2514\u2500\u2500 conf.d\n\u2502        \u2514\u2500\u2500 default.conf # Fichero configuraci\u00f3n de servidor \n\u2514\u2500\u2500 src/          # Carpeta del proyecto\n    \u2514\u2500\u2500 img/\n    \u2514\u2500\u2500 index.php\n    \u2514\u2500\u2500 phpinfo.php\n</code></pre>"},{"location":"ut01/ut01ac/#ejercicio-105","title":"Ejercicio 105","text":"<p>Si finalmente has instalado mediante dockers los dos servidores web, instala tambi\u00e9n el docker Portainer y echa un vistazo (haciendo varias capturas).</p> <pre><code>sudo docker volume create portainer_data\n\nsudo docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n</code></pre>"},{"location":"ut01/ut01ac/#ejercicio-106","title":"Ejercicio 106","text":"<p>Una vez arrancado el servicio PHP (mediante XAMPP o Docker), crea el archivo <code>info.php</code> y a\u00f1ade el siguiente fragmento de c\u00f3digo:</p> <pre><code>&lt;?php phpinfo() ?&gt;\n</code></pre> <p>Anota los valores de:</p> <ul> <li>Versi\u00f3n de PHP</li> <li><code>Loaded Configuration File</code></li> <li><code>memory_limit</code></li> <li><code>DOCUMENT_ROOT</code></li> </ul>"},{"location":"ut01/ut01ac/#ejercicio-107","title":"Ejercicio 107","text":"<p>En el docker del Ejercicio 103:</p> <ul> <li>Modifica el fichero <code>index.html</code> a <code>index_old.html</code>.</li> <li>Descarga el siguiente fichero index.html en la carpeta <code>src</code>.</li> </ul> <p>En el fichero index.html descargado se han utilizado las siguientes librer\u00edas para conformar la interfaz de usuario:</p> <ul> <li>Bootstrap 5.2, para el dise\u00f1o de interfaces responsivas.</li> <li>Tema Flatly basado en bootstrap, que proporciona la hoja de estilos de la interfaz.</li> <li>Font awesome 6.2, para la utilizaci\u00f3n de iconos.</li> </ul> <p>Si nos fijamos en el contenido del fichero index.html proporcionado no se diferencia en nada (salvo en la utilizaci\u00f3n de las librer\u00edas anteriores) de una de las p\u00e1ginas est\u00e1ticas programadas durante el primer curso del ciclo:</p> <p>Vamos a empezar a incrustar PHP en el c\u00f3digo HTML.</p>"},{"location":"ut01/ut01ac/#a-utilizacion-de-plantillas","title":"a) Utilizaci\u00f3n de plantillas","text":"<p>El primer paso que vamos a realizar es trocear el c\u00f3digo HTML proporcionado. \u00bfPor qu\u00e9? porque hay determinadas partes que siempre se repiten en cada una de las p\u00e1ginas: la cabecera y el pie de p\u00e1gina.</p> <p>As\u00ed, vamos a crear una carpeta <code>templates</code> (plantillas, en ingl\u00e9s) dentro de src, para almacenar todos aquellos fragmentos de c\u00f3digo HTML que podemos reutilizar de una p\u00e1gina a otra.</p> <p>Dentro de templates vamos a crear dos archivos: <code>header.php</code> y <code>footer.php</code>.</p> <p>La estructura, por el momento, queda del siguiente modo:</p> <p>En clase: vamos a analizar index.html y debatir c\u00f3mo segmentar el c\u00f3digo. A continuaci\u00f3n reorganizamos el c\u00f3digo de index.html entre footer.php y header.php.</p> <p>Una vez configuradas las plantillas, queda muy poco c\u00f3digo HTML en index.html. Vamos ahora a poner el restante del c\u00f3digo HTML en index.php y vaciar por completo index.html (tras lo cual eliminamos este fichero).</p> <p>El fichero index.php quedar\u00eda del siguiente modo:</p> <pre><code>&lt;div class=\"container\"&gt;\n\n&lt;/div&gt;\n</code></pre> <p>\u00bfC\u00f3mo podemos ahora volver a estructurar la p\u00e1gina de inicio con las plantillas? Esto se ver\u00e1 en el siguiente apartado.</p>"},{"location":"ut01/ut01ac/#b-conformacion-de-las-paginas-de-la-aplicacion","title":"b) Conformaci\u00f3n de las p\u00e1ginas de la aplicaci\u00f3n","text":"<p>Para poder estructurar las p\u00e1ginas de la aplicaci\u00f3n bas\u00e1ndonos en las plantillas, podemos utilizar la instrucci\u00f3n include. Modificando el fichero index.php, quedar\u00eda del siguiente modo:</p> <pre><code>&lt;?php  include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n\n&lt;/div&gt;\n\n&lt;?php  include(\"templates/header.php\"); ?&gt;\n</code></pre> <p>Ahora, con el contenedor Docker iniciado, si refrescamos la p\u00e1gina, volveremos a obtener el mismo resultado que con la p\u00e1gina web est\u00e1tica:</p> <p>Parece que no haya cambiado nada, pero PHP ya est\u00e1 trabajando para nosotros. Hemos pasado de una p\u00e1gina web est\u00e1tica, recogida en un solo documento, a una p\u00e1gina modular generada con PHP. En un sitio web con multitud de p\u00e1ginas esto puede ser una gran ventaja.</p> <p>ATENCI\u00d3N: el orden en que han sido cargados los ficheros es importante. Si escribi\u00e9semos el siguiente fichero index.php:</p> <p>Ahora, como buenos programadores, nos preguntamos \u00bf<code>include</code> nos sirve para todos los casos o existen otras posibilidades para incluir ficheros en PHP? Lo vemos en el siguiente apartado.</p>"},{"location":"ut01/ut01ac/#c-inclusion-de-ficheros-en-php","title":"c) Inclusi\u00f3n de ficheros en PHP","text":"<p>La idea de utilizar diferentes ficheros es la reutilizaci\u00f3n del c\u00f3digo, lo que conlleva una mayor modularidad y un mejor mantenimiento del mismo. Un fichero no tiene por qu\u00e9 ser una plantilla, como hemos visto hasta ahora, sino que tambi\u00e9n podr\u00eda ser c\u00f3digo PHP que pudi\u00e9semos llegar a utilizar en diferentes partes de la aplicaci\u00f3n. Tambi\u00e9n se pueden dar diferentes circunstancias, y es por ello que disponemos de varias opciones:</p> <ul> <li><code>include(ruta/archivo);</code> <code>include\\_once(ruta/archivo);</code></li> <li><code>require(ruta/archivo);</code> <code>require\\_once(ruta/archivo);</code></li> </ul> <p>NOTA: Si el archivo se encuentra a la misma altura (en el sistema de archivos) que el fichero en el cual se incluye, entonces solo es necesario especificar el nombre del archivo a incluir; si los dos archivos no se encuentran a la misma altura, entonces es posible especificar la ruta (absoluta o relativa) del fichero a incluir.</p> <p>Las particularidades de cada instrucci\u00f3n son:</p> <ul> <li>require: lanza un error fatal si no encuentra el archivo.</li> <li>include: si no encuentra el archivo, emite una advertencia (warning).</li> <li>Las funciones _once s\u00f3lo se cargan una vez, si ya ha sido incluida previamente, no lo vuelve a hacer, evitando bucles.</li> </ul> <p>Por ejemplo, colocamos las siguientes funciones en el archivo biblioteca.php:</p> <pre><code>&lt;?php\n  function suma(int $a, int $b) : int {\n      return $a + $b;\n  }\n\n  function resta(int $a, int $b) : int {\n      return $a - $b;\n  }\n?&gt;\n</code></pre> <p>Y posteriormente en otro archivo incluimos el anterior:</p> <pre><code>&lt;?php\n\n  include_once(\"biblioteca.php\");\n\n  echo suma(10,20);\n\n  echo resta(40,20);\n\n?&gt;\n</code></pre>"},{"location":"ut01/ut01ac/#d-completamos-el-resto-de-paginas","title":"d) Completamos el resto de p\u00e1ginas","text":"<p>En este apartado vamos a completar las p\u00e1ginas y las plantillas de la aplicaci\u00f3n para poder a\u00f1adirles posteriormente c\u00f3digo PHP.</p>"},{"location":"ut01/ut01ac/#indexphp","title":"index.php","text":"<p>Vamos a introducir un proyecto de prueba para que se pueda visualizar en la p\u00e1gina de inicio, quedar\u00eda del siguiente modo:</p> <p>Vamos a utilizar una imagen para cada proyecto. Para poder hacer esto hemos de almacenar las im\u00e1genes en la estructura de directorios, por eso creamos una carpeta static dentro de src, y dentro de static crearemos otra llamada images:</p> <p>NOTA: si has de descargar im\u00e1genes de Internet, aseg\u00farate que la licencia de dichas im\u00e1genes te lo permite. Utiliza, si es necesario, un sitio como pixabay.com para descargar im\u00e1genes con licencia libre.</p> <p>Desc\u00e1rgate una imagen en la carpeta images, ren\u00f3mbrala a projecte1.png (aqu\u00ed tienes la imagen del ejemplo projecte1.png si deseas utilizar la misma) y completa el fichero index.php con el siguiente c\u00f3digo:</p> <pre><code>&lt;?php include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;a href=\"#\"&gt;\n        &lt;div class=\"card\" style=\"width: 18rem;\"&gt;\n            &lt;img class=\"card-img-top\" src=\"static/images/projecte1.png\" alt=\"Projecte 1\"&gt;\n            &lt;div class=\"card-body\"&gt;\n                &lt;h5 class=\"card-title\"&gt;Projecte 1&lt;/h5&gt;\n                &lt;p class=\"card-text\"&gt;Descripci\u00f3 del projecte 1.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/a&gt;\n&lt;/div&gt;\n\n&lt;?php include(\"templates/footer.php\"); ?&gt;\n</code></pre> <p>Ahora deber\u00eda aparecer un proyecto en la p\u00e1gina principal.</p>"},{"location":"ut01/ut01ac/#proyectophp","title":"proyecto.php","text":"<p>Creamos este nuevo fichero a la altura de index.php y a\u00f1adimos el siguiente contenido:</p> <pre><code>&lt;?php include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;h2&gt;T\u00edtol de mostra&lt;/h2&gt;\n    &lt;h4&gt;&lt;a href=\"#\"&gt;Any&lt;/a&gt;&lt;/h4&gt;\n    &lt;span&gt;Categories: &lt;/span&gt;\n    &lt;a href=\"#\"&gt;&lt;button class=\"btn btn-sm btn-default\"&gt;Categoria 1&lt;/button&gt;&lt;/a&gt;\n    &lt;br&gt; &lt;br&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-sm\"&gt;\n            &lt;img src=\"static/images/projecte1.png\" alt=\"Projecte 1\" class=\"img-responsive\"&gt;&lt;br&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-sm\"&gt;Descripci\u00f3&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;?php include(\"templates/footer.php\"); ?&gt;\n</code></pre> <p>Para consultar el resultado, introducimos en la barra de navegaci\u00f3n la URL localhost:8081/proyecto.php:</p>"},{"location":"ut01/ut01ac/#contactophp","title":"contacto.php","text":"<p>Descargamos esta contacte.png en el directorio correspondiente (con el nombre businessman.png), creamos contacto.php a la altura de index.php, e insertamos el siguiente c\u00f3digo:</p> <pre><code>&lt;?php include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;h2 class=\"mb-5\"&gt;Contacte&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md\"&gt;\n            &lt;img src=\"static/images/contacte.png\" class=\"img-fluid rounded\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-md\"&gt;\n            &lt;h3&gt;Nom i cognoms&lt;/h3&gt;\n            &lt;p&gt;Cicle Superior DAW.&lt;/p&gt;\n            &lt;p&gt;Apasionat del mon de la programaci\u00f3 en general, i de les tecnologies web en particular.&lt;/p&gt;\n            &lt;p&gt;Si tens algun dubte contacta amb m\u00ed per favor.&lt;/p&gt;\n            &lt;p&gt;Tel\u00e8fon: 123456789&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;?php include(\"templates/footer.php\"); ?&gt;\n</code></pre> <p>El resultado, al consultar la URL localhost/contacto.php, deber\u00eda ser el siguiente:</p> <p>En estos momentos tenemos ya muchas cosas preparadas para poder empezar a a\u00f1adir dinamismo a nuestra aplicaci\u00f3n. En los siguientes apartados vamos a ver las diferentes estructuras que nos lo van a permitir.</p>"},{"location":"ut01/ut01de/","title":"Descargas","text":""},{"location":"ut01/ut01de/#plantillas-docker-de-servidores-web-php","title":"Plantillas docker de servidores web + Php","text":"<ul> <li>plantilla Apache + Php</li> <li>plantilla Apache + Php 2</li> <li>plantilla Nginx + Php</li> <li>plantilla Apache + Php + MySql + phpMyAdmin</li> <li>Xampp</li> </ul>"},{"location":"ut02/ut0201/","title":"2.1. Introducci\u00f3n","text":"<p>Duraci\u00f3n estimada: 20 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA2. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. a) Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido. b) Se han identificado las principales tecnolog\u00edas asociadas. c) Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas. d) Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar. e) Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante. f) Se han utilizado directivas para modificar el comportamiento predeterminado. g) Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje. h) Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables. RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. a) Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias. b) Se han utilizado bucles y se ha verificado su funcionamiento. c) Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos. d) Se han creado y utilizado funciones. e) Se han utilizado formularios web para interactuar con el usuario del navegador Web. f) Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario. g) Se han a\u00f1adido comentarios al c\u00f3digo. <p>\u200b   </p>"},{"location":"ut02/ut0202/","title":"2.2. PHP","text":"<ul> <li>Acr\u00f3nimo de Personal Home Page.</li> <li>Lenguaje de prop\u00f3sito general, aunque su fuerte es el desarollo web.</li> <li>Sintaxis similar a C / Java.</li> <li>El c\u00f3digo se ejecuta en el servidor (en Apache mediante <code>mod_php</code>).</li> <li>El cliente recibe el resultado generado tras interpretar el c\u00f3digo en el servidor.</li> <li>El c\u00f3digo se almacena en archivo con extensi\u00f3n <code>.php</code>.</li> </ul> <p>La \u00faltima versi\u00f3n es la 8.3, de noviembre de 2023 (y se tiene previsto la liberaci\u00f3n de PHP 8.4 para el 21 de noviembre de 2024). Adem\u00e1s de numerosas nuevas funcionalidades que iremos viendo durante el curso, tiene m\u00e1s de dos veces mejor rendimiento que PHP5.</p> <p>Su documentaci\u00f3n es extensa y est\u00e1 traducida: https://www.php.net/manual/es/.</p>"},{"location":"ut02/ut0202/#1-codigo-embebido","title":"1. C\u00f3digo embebido","text":"<p>Los bloques de c\u00f3digo se escriben entre <code>&lt;?php</code> y <code>?&gt;</code>.</p> <p>Las sentencias se separan mediante <code>;</code>.</p> Ejemplo en phpResultado <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;PHP f\u00e1cil&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- Muestra una frase con HTML --&gt;\n  Hola mundo&lt;br&gt;\n  &lt;!-- Muestra una frase con PHP --&gt;\n  &lt;?php echo \"Es muy f\u00e1cil programar en PHP.\"; ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>S\u00f3lo etiquetas de apertura</p> <p>Si nuestro c\u00f3digo s\u00f3lo va a contener c\u00f3digo PHP y nada de html, como por ejemplo, cuando codifiquemos clases o interfaces, s\u00f3lo pondremos la etiqueta de apertura, para as\u00ed indicar que es una archivo de php puro.</p>"},{"location":"ut02/ut0202/#2-generando-codigo","title":"2. Generando c\u00f3digo","text":"<p>Tenemos tres posibilidades a la hora de generar contenido en nuestros documentos PHP:</p> <ul> <li><code>echo expresi\u00f3n;</code></li> <li><code>&lt;?= expresi\u00f3n ?&gt;</code></li> <li><code>print (expresi\u00f3n);</code></li> </ul> <p>Las que vamos a utilizar son:</p> <ul> <li><code>echo</code> cuando lo hagamos dentro de un bloque de instrucciones y </li> <li><code>&lt;?=</code> cuando s\u00f3lo vayamos a mostrar el valor de una variable dentro de un fragmento HTML.</li> </ul> Ejemplo phpResultado <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Echo y print&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\"; ?&gt;&lt;/p&gt;\n  &lt;p&gt;&lt;?= \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;&lt;br&gt;\n  &lt;p&gt;&lt;?php print(\"Este texto se mostrar\u00e1 en la p\u00e1gina web.\"); ?&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0202/#3-comentarios","title":"3. Comentarios","text":"<p>Podemos utilizar comentarios de una l\u00ednea o de bloque:</p> Ejemplo comentariosResultado <pre><code>&lt;?php\n// Este es un comentario de una sola l\u00ednea&lt;br&gt;\n\n/*\n  Este es\n  un comentario\n  que ocupa\n  varias l\u00edneas\n*/ \n?&gt;\n</code></pre> <p></p> <p>Abrievatura en VS Code de comentarios:</p> <p>Comentario de una l\u00ednea: <code>Ctrl</code> + <code>/</code>: Comenta o descomenta la l\u00ednea actual o las l\u00edneas seleccionadas. Comentario de bloque (multil\u00ednea): <code>Shift</code> + <code>Alt</code> + <code>A</code>: Inserta o elimina un comentario de bloque alrededor del texto seleccionado.</p>"},{"location":"ut02/ut0202/#4-errores","title":"4. Errores","text":"<p>Si hay un error de ejecuci\u00f3n, se produce un Fatal Error.</p> Ejemplo de error de ejecuci\u00f3n. <p>Desde PHP 5 se lanzan como una excepci\u00f3n. M\u00e1s adelante veremos el uso de <code>try</code> / <code>catch</code>.</p>"},{"location":"ut02/ut0202/#5-variables","title":"5. Variables","text":"<ul> <li>No es necesario declararlas previamente.</li> <li>Comienzan por <code>$</code>, por ejemplo <code>$nombre</code>, seguido de un caracter en letra min\u00fascula (recomendaci\u00f3n) o gui\u00f3n bajo _. Luego ya se pueden poner n\u00fameros.</li> <li>Son case sensitive: <code>$var != $vAR</code>.</li> <li>No se declara su tipo, el tipado es din\u00e1mico. Se asigna en tiempo de ejecuci\u00f3n dependiendo del valor asignado.</li> <li>Conveniente: hay que inicializarlas, sino dan error.</li> </ul> Ejemplo variablesResultado <pre><code>&lt;?php\n     $nombre = \"Marta\";\n     $nombreCompleto = \"Marta L\u00f3pez\";\n     $numero = 123;\n     $numero2 = 456;\n     $pi = 3.14;\n     $suerte = true;\n     $sinValor;\n     $_1 = \"el primero\";\n\n     echo $sinValor;\n?&gt;\n</code></pre> <p>Tipos de datos</p> <p>Aunque a priori no hay tipos de datos, internamente PHP trabaja con:</p> <ul> <li>cuatro tipos escalares: boolean, integer, float y string, y</li> <li>cuatro tipos compuestos: array, object, callable e iterable.</li> <li>Existe un tipo especial para null (m\u00e1s informaci\u00f3n aqu\u00ed).</li> </ul>"},{"location":"ut02/ut0202/#6-constantes","title":"6. Constantes","text":"<p>Son variables cuyo valor no var\u00edan.</p> <p>Existen dos posibilidades:</p> <ul> <li><code>define(NOMBRE, valor);</code></li> <li><code>const NOMBRE;      // a partir de PHP 5.3</code></li> </ul> Ejemplo constantesResultado <pre><code>&lt;?php\n      define(\"PI\", 3.1416);\n      const IVA = 0.21;\n\n      echo PI, \" \", IVA; // No se pone el s\u00edmbolo dolar\n?&gt;\n</code></pre> <p></p> <ul> <li>Se declaran siempre en MAY\u00daSCULAS.</li> <li>Hay un conjunto de constantes ya predefinidas, tambi\u00e9n conocidas como magic constants: https://www.php.net/manual/es/language.constants.predefined.php.</li> </ul> Ejercicios a realizar <ul> <li><code>Ejercicio 201</code></li> <li><code>Ejercicio 202</code></li> </ul>"},{"location":"ut02/ut0203/","title":"2.3. Operadores","text":""},{"location":"ut02/ut0203/#1-trabajando-con-formularios","title":"1. Trabajando con formularios","text":"<p>Los datos se env\u00edan v\u00eda URL con el formato <code>var1=valor1&amp;var2=valor2\u2026</code>.</p> <p>Por ejemplo: <code>ejemplo.php?nombre=Homer&amp;apellido1=Simpson</code></p> <p>Se divide en dos pasos:</p> <ol> <li>Generar un formulario con <code>action='archivo.php' method='GET'</code></li> <li>En el archivo <code>.php</code> leer los datos con <code>$_GET['nombreVar']</code></li> </ol> <p>Vamos a separar siempre que podamos el c\u00f3digo HTML del c\u00f3digo PHP. Por ejemplo, el formulario se coloca en <code>saluda.html</code> y se recogen los datos en <code>saluda.php</code>:</p> saluda.htmlsaluda.php <pre><code>&lt;form action=\"saluda.php\" method=\"get\"&gt;\n      &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre: &lt;/label&gt;\n      &lt;input type=\"text\" name=\"nombre\" id=\"nombre\"&gt;&lt;/p&gt;\n      &lt;p&gt;&lt;label for=\"apellido1\"&gt;Primer apellido:&lt;/label&gt;\n      &lt;input type=\"text\" name=\"apellido1\" id=\"apellido1\"&gt;&lt;/p&gt;\n      &lt;p&gt;&lt;input type=\"submit\" value=\"enviar\"&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>&lt;?php\n      $nombre = $_GET[\"nombre\"];\n      $apellido1 = $_GET[\"apellido1\"];\n\n      echo \"Hola $nombre $apellido1\";\n?&gt;\n</code></pre> <p>Si se quisiera realizar todo en un \u00fanico archivo (lo cual no es recomendable), se puede realizar de la siguiente forma:</p> <pre><code>/*\n * Ejemplo saluda en un \u00fanico archivo\n */\n&lt;form action=\"\" method=\"get\"&gt;\n      &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre: &lt;/label&gt;\n      &lt;input type=\"text\" name=\"nombre\" id=\"nombre\"&gt;&lt;/p&gt;\n      &lt;p&gt;&lt;label for=\"apellido1\"&gt;Primer apellido:&lt;/label&gt;\n      &lt;input type=\"text\" name=\"apellido1\" id=\"apellido1\"&gt;&lt;/p&gt;\n      &lt;input type=\"submit\" value=\"enviar\"&gt;\n&lt;/form&gt;\n&lt;p&gt;\n      &lt;?php\n            if(isset($_GET['nombre'])) {\n                  $nombre = $_GET[\"nombre\"];\n                  $apellido1 = $_GET[\"apellido1\"];\n\n                  echo \"Hola $nombre $apellido1\";\n            }\n      ?&gt;\n&lt;/p&gt;\n</code></pre> <p>El trabajo con formularios se estudiar\u00e1 en profundidad en la unidad 4, y se ver\u00e1 que adem\u00e1s de <code>GET</code>, se puede enviar los datos con <code>POST</code>.</p>"},{"location":"ut02/ut0203/#2-condiciones","title":"2. Condiciones","text":""},{"location":"ut02/ut0203/#21-if","title":"2.1. if","text":"<p>La condici\u00f3n simple se realiza mediante la instrucci\u00f3n <code>if</code>. Entre par\u00e9ntesis se pone la condici\u00f3n que se evalua a true o false. Si no se ponen llaves, en vez de abrir un bloque, se ejecutar\u00e1 s\u00f3lo la siguiente instrucci\u00f3n.</p> <p>Siempre llaves</p> <p>Es recomendable poner llaves siempre aunque en el momento de codificar s\u00f3lo haya una \u00fanica instrucci\u00f3n. De este modo, se queda preparado para a\u00f1adir m\u00e1s contenido en el futuro sin provocar bugs.</p> Ejemplo ifResultado <pre><code>&lt;?php\n      $hora = 8; // La hora en formato de 24 horas\n      if ($hora === 8) {\n            echo \"Suena el despertador.\";\n      }\n      echo \"&lt;br&gt;\";\n      if ($hora === 8)\n            echo \"Suena el despertador.\";\n?&gt;\n</code></pre> <p></p> <p>Las condiciones compuestas mediante <code>if-else</code>:</p> Ejemplo if-elseResultado <pre><code>&lt;?php\n      $hora = 17; // La hora en formato de 24 horas\n      if ($hora &lt;= 12) {\n            echo \"Son las \" . $hora . \" de la ma\u00f1ana\";\n      } else {\n            echo \"Son las \" . ($hora - 12) . \" de la tarde\";\n      }\n?&gt;\n</code></pre> <p></p> <p>Las condiciones anidadas mediante <code>if-else if-else</code>:</p> Ejemplo if-else if-elseResultado <pre><code>&lt;?php\n      $hora = 14; // La hora en formato de 24 horas\n      if ($hora === 8) {\n            echo \"Es la hora de desayunar.\";\n      } else if ($hora === 14) {\n            echo \"Es la hora de la comida.\";\n      } else if ($hora === 21) {\n            echo \"Es la hora de la cena.\";\n      } else {\n            echo \"Ahora no toca comer.\";\n      }\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0203/#22-switch","title":"2.2. switch","text":"<p>La sentencia <code>switch</code> tambi\u00e9n permite trabajar con condiciones m\u00faltiples:</p> Ejemplo switchResultado <pre><code>&lt;?php\n    $hora = 12; // La hora en formato de 24 horas\n    switch ($hora) {\n        case 9:\n            echo \"Es la hora de desayunar.\";\n            break;\n        case 14:\n            echo \"Es la hora de la comida.\";\n            break;\n        case 21:\n            echo \"Es la hora de la cena.\";\n            break;\n        default:\n            echo \"Ahora no toca comer\";\n    }\n?&gt;\n</code></pre> <p></p> <p>No olvides el <code>break</code></p> <p>Un error muy com\u00fan es olvidar la instrucci\u00f3n <code>break</code> tras cada caso. Si no lo ponemos, ejecutar\u00e1 el siguiente caso autom\u00e1ticamente.</p>"},{"location":"ut02/ut0203/#23-match","title":"2.3. match","text":"<p>La sentencia <code>match</code> fue introducida en la versi\u00f3n 8.0 y es muy similar a la estructura de <code>switch</code>, pero tiene algunas diferencias importantes: - <code>match</code> devuelve un valor. - No requiere usar break al final de cada caso. - Utiliza comparaciones estrictas (===), lo que significa que tanto el tipo como el valor deben coincidir.</p> Ejemplo matchEjemplo con n\u00fameros <pre><code>&lt;?php\n</code></pre> <p>$estado = 'ok';</p> <p>$resultado = match ($estado) {     'ok' =&gt; 'Todo est\u00e1 bien.',     'error' =&gt; 'Ha ocurrido un error.',     'pendiente' =&gt; 'Todav\u00eda est\u00e1 pendiente.',     default =&gt; 'Estado desconocido.', // opci\u00f3n por defecto, similar a \"default\" en switch };</p> <p>echo $resultado; // Imprime: Todo est\u00e1 bien. ?&gt; ```</p> <pre><code>&lt;?php\n\n$numero = 10;\n\n$resultado = match (true) {\n    $numero &lt; 0 =&gt; 'N\u00famero negativo',\n    $numero === 0 =&gt; 'Es cero',\n    $numero &gt; 0 =&gt; 'N\u00famero positivo',\n};\n\necho $resultado; // Imprime: N\u00famero positivo.\n?&gt;\n</code></pre>"},{"location":"ut02/ut0203/#24-operador-ternario","title":"2.4. Operador ternario","text":"<p>Finalmente, tambi\u00e9n tenemos el operador ternario <code>condici\u00f3n ? valorTrue : valorFalse</code>:</p> Ejemplo op. ternarioResultado <pre><code>&lt;?php\n      $hora = 14;\n      $formato = ($hora &gt; 12) ? 24 : 12;\n      echo \"El formato es de $formato horas\"\n?&gt;\n</code></pre> <p></p> <p>Operador Elvis</p> <p>Si queremos comprobar si una variable tiene valor y si no darle un valor determinado, usaremos el operador <code>?:</code> (se conoce como el operador Elvis - https://en.wikipedia.org/wiki/Elvis_operator) con la sint\u00e1xis <code>expresi\u00f3n ?: valorSiVacio</code>.</p> Ejemplo op. elvisResultado <pre><code>&lt;?php\n    $nombre = \"\";\n    echo \"Nombre: \" . ($nombre ?: \"desconocido\") . PHP_EOL;\n\n    // se env\u00eda a trav\u00e9s de un formulario:\n    // $nombre = \"\";\n    // $nombre = $_GET['nombre'] ?: \"desconocido\";\n?&gt;\n</code></pre> <p></p> Ejercicios a realizar <ul> <li><code>Ejercicio 203</code></li> <li><code>Ejercicio 204</code></li> <li><code>Ejercicio 205</code></li> <li><code>Ejercicio 206</code></li> <li><code>Ejercicio 207</code></li> <li><code>Ejercicio 208</code></li> <li><code>Ejercicio 209</code></li> <li><code>Ejercicio 210</code></li> <li><code>Ejercicio 211</code></li> <li><code>Ejercicio 212</code></li> <li><code>Ejercicio 213</code></li> <li><code>Ejercicio 214</code> </li> <li><code>Ejercicio 215</code></li> <li><code>Ejercicio 216</code> </li> </ul>"},{"location":"ut02/ut0203/#3-bucles","title":"3. Bucles","text":""},{"location":"ut02/ut0203/#31-while","title":"3.1. while","text":"<p>Mediante la instrucci\u00f3n <code>while</code>:</p> Ejemplo whileResultado <pre><code>&lt;?php\n    $i = 1;\n    while ($i &lt;= 10) {\n        echo \"L\u00ednea \" . $i;\n        echo \"&lt;br&gt;\";\n        $i++;\n    }\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0203/#32-do-while","title":"3.2. do-while","text":"<p>Mediante la instrucci\u00f3n <code>do-while</code>:</p> Ejemplo do-whileResultado <pre><code>&lt;?php\n    do {\n        $dado = rand(1, 6);\n        // rand() devuelve un valor aleatorio\n        echo \"Tirando el dado... \";\n        echo \"ha salido un \" . $dado . \".\";\n        echo \"&lt;br&gt;\";\n    } while ($dado != 5);\n    echo \"\u00a1Bien! Saco una ficha de casa.\";\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0203/#33-for","title":"3.3. for","text":"<p>Mediante la instrucci\u00f3n <code>for</code>:</p> Ejemplo forResultado <pre><code>&lt;?php\n    // Bucle ascendente\n    for ($i = 1; $i &lt;= 10; $i++) {\n        echo \"L\u00ednea \" . $i;\n        echo \"&lt;br&gt;\";\n    }\n\n    // Bucle descendente\n    for ($i = 10; $i &gt;= 0; $i--) {\n        echo \"L\u00ednea \" . $i;\n        echo \"&lt;br&gt;\";\n    }\n?&gt;\n</code></pre> <p></p> <p>M\u00e1s adelante estudiaremos el bucle <code>foreach</code> para recorrer arrays.</p> <p>PHP, del mismo modo que Java y C, permite romper los bucles mediante la instrucci\u00f3n <code>break</code>. A su vez, <code>continue</code> permite saltar a la siguiente iteraci\u00f3n.</p> <p>Si puedes, evita <code>break</code> y <code>continue</code></p> <p>No es desable su uso. Es m\u00e1s preferible el uso de variables flag para controlar la salida de los bucles. Por ejemplo:</p> Ejemplo de variable flagResultado <pre><code>&lt;?php\n    $salir = false;\n    for ($i = 1; $i &lt;= 10 &amp;&amp; !$salir; $i++) {\n        if ($i === 5) {\n            echo \"Salgo cuando i=5\";\n            $salir = true;\n        }\n    }\n?&gt;\n</code></pre> <p></p> Ejercicios a realizar <ul> <li><code>Ejercicio 221</code></li> <li><code>Ejercicio 222</code></li> <li><code>Ejercicio 223</code></li> <li><code>Ejercicio 224</code></li> <li><code>Ejercicio 225</code></li> <li><code>Ejercicio 226</code></li> <li><code>Ejercicio 227</code></li> <li><code>Ejercicio 228</code></li> <li><code>Ejercicio 229</code></li> </ul>"},{"location":"ut02/ut0204/","title":"2.4. Arrays","text":"<p>Para almacenar datos compuestos, podemos utilizar tanto arrays sencillos como arrays asociativos (similares a un mapa). En realidad todos los arrays son mapas ordenados compuestos de pares clave-valor.</p> <p>Cuidado con mezclar tipos</p> <p>Como el tipado es din\u00e1mico, nuestros arrays pueden contener datos de diferentes tipos. No se recomienda mezclar los tipos.</p> <p>Del mismo modo que Java, se definen mediante corchetes, son 0-index, y se puede asignar un valor a un posici\u00f3n determinada:</p> <pre><code>&lt;?php\n    // opci\u00f3n 1\n    $frutas = array(\"naranja\", \"pera\", \"manzana\");\n\n    // opci\u00f3n 2\n    $frutas2 = [\"naranja\", \"pera\", \"manzana\"];\n\n    // opci\u00f3n 3\n    $frutas3 = [];\n    $frutas3[0] = \"naranja\";\n    $frutas3[1] = \"pera\";\n    $frutas3[] = \"manzana\"; // lo a\u00f1ade al final\n</code></pre> <p>Podemos obtener el tama\u00f1o del array mediante la funci\u00f3n <code>count(array)</code>. Para recorrer el array haremos uso de un bucle <code>for</code>:</p> Ejemplo recorrido arrayResultado <pre><code>&lt;?php\n    $tam = count($frutas); // tama\u00f1o del array\n\n    for ($i=0; $i&lt;count($frutas); $i++) {\n        echo \"Elemento $i: $frutas[$i] &lt;br /&gt;\";\n    }\n</code></pre> <p></p> <p>Otra forma de recorrer los arrays, incluso m\u00e1s elegante, es hacer uso de <code>foreach</code>. Su sintaxis es <code>foreach (array as elemento)</code>:</p> Ejemplo recorrido array con foreachResultado <pre><code>&lt;?php\n    // mediante foreach no necesitamos saber el tama\u00f1o del array\n    foreach ($frutas as $elemento) {\n        echo \"$elemento &lt;br /&gt;\";\n    }\n</code></pre> <p></p>"},{"location":"ut02/ut0204/#1-arrays-asociativos","title":"1. Arrays asociativos","text":"<p>Cada elemento es un par clave-valor. En vez de acceder por la posici\u00f3n, lo hacemos mediante una clave. As\u00ed pues, para cada clave se almacena un valor.</p> <p>Se asigna de la siguiente forma dentro de los corchetes: <code>clave =&gt; valor</code>.</p> <p>A la hora de recorrer este tipo de arrays, mediante <code>foreach</code> separamos cada elemento en una pareja clave =&gt; valor:</p> Ejemplo array asociativoResultado <pre><code>&lt;?php\n    $capitales = [\"Italia\" =&gt; \"Roma\",\n                \"Francia\" =&gt; \"Paris\",\n                \"Portugal\" =&gt; \"Lisboa\"];\n\n    $capitalFrancia = $capitales[\"Francia\"]; // se accede al elemento por la clave, no la posici\u00f3n\n\n    $capitales[\"Alemania\"] = \"Berl\u00edn\"; // a\u00f1adimos un elemento\n\n    echo \"La capital de Francia es $capitalFrancia &lt;br /&gt;\";\n    echo \"La capital de Francia es {$capitales[\"Francia\"]} &lt;br /&gt;\";\n\n    $capitales[] = \"Madrid\"; // se a\u00f1ade con la clave 0 !!! \u00a1\u00a1\u00a1NO ASIGNAR VALORES SIN CLAVE!!!\n\n    foreach ($capitales as $valor) { // si recorremos un array asociativo, mostraremos los valores\n        echo \"$valor &lt;br /&gt;\";\n    }\n\n    foreach ($capitales as $pais =&gt; $ciudad) { // separamos cada elemento en clave =&gt; valor\n        echo \"$pais : $ciudad &lt;br /&gt;\";\n    }\n</code></pre> <p></p>"},{"location":"ut02/ut0204/#2-arrays-bidimensionales","title":"2. Arrays bidimensionales","text":"<p>Consiste en un array de arrays, ya sean arrays secuenciales o asociativos. Puede haber N dimensiones.</p> Ejemplo array bidimensionalResultado <pre><code>&lt;?php\n    $persona[\"nombre\"] = \"Bruce Wayne\";\n    $persona[\"telefonos\"] = [\"966 123 456\", \"636 636 636\"]; // array de arrays ordinarios\n    $persona[\"profesion\"] = [\"dia\" =&gt; \"fil\u00e1ntropo\", \"noche\" =&gt; \"caballero oscuro\"]; // array de arrays asociativos\n\n    echo $persona['nombre'].\" por la noche trabaja de \".$persona['profesion']['noche'];\n</code></pre> <p></p> <p>Combinando los arrays asociativos en varias dimensiones podemos almacenar la informaci\u00f3n como si fuera una tabla:</p> Ejemplo array bidimensional an\u00e1logo a una tablaResultado <pre><code>&lt;?php\n    $menu1 = [\"Plato1\" =&gt; \"Macarrones con queso\", \n                        \"Plato2\" =&gt; \"Pescado asado\", \n                        \"Bebida\" =&gt; \"Coca-Cola\", \n                        \"Postre\" =&gt; \"Helado de vainilla\"];\n    $menu2 = [\"Plato1\" =&gt; \"Sopa\", \n                        \"Plato2\" =&gt; \"Lomo con patatas\", \n                        \"Bebida\" =&gt; \"Agua\", \n                        \"Postre\" =&gt; \"Arroz con leche\"];\n    $menus = [$menu1, $menu2]; // creamos un array a partir de arrays asociativos\n\n    echo \"Men\u00fa del d\u00eda&lt;br/&gt;\";\n    $cont = 0;\n    foreach ($menus as $menudeldia) {\n        echo \"&lt;br /&gt;Men\u00fa \".++$cont.\"&lt;br /&gt;\";\n\n        foreach ($menudeldia as $platos =&gt; $comida) {\n            echo \"$platos: $comida &lt;br/&gt;\";\n        }\n    }\n\n    // Para acceder a un elemento concreto se anidan los corchetes\n    $postre0 = $menus[0][\"Postre\"];\n</code></pre> <p></p> <p>Aunque pueda parecer una buena idea crear este tipo de estructuras, es mejor utilizar objetos conjuntamente con arrays (posiblemente arrays de otros objetos) para crear estructuras complejas que permitan modelar mejor los problemas.</p> Ejercicios a realizar <ul> <li><code>Ejercicio 231</code></li> <li><code>Ejercicio 232</code></li> <li><code>Ejercicio 233</code></li> <li><code>Ejercicio 234</code></li> <li><code>Ejercicio 235</code></li> <li><code>Ejercicio 236</code></li> <li><code>Ejercicio 237</code></li> <li><code>Ejercicio 238</code></li> <li><code>Ejercicio 239</code></li> </ul>"},{"location":"ut02/ut0205/","title":"2.5. Funciones","text":"<p>Al no declararse los tipos de datos, los par\u00e1metros de las funciones no tienen tipo ni se indica el tipo de dato que devuelven. </p> <p>El paso de par\u00e1metros se realiza por valor, es decir, se realiza una copia de la variable.</p> <pre><code>&lt;?php\n  function nombreFuncion($par1, $par2, ...) {\n      // c\u00f3digo\n      return $valor;\n  }\n\n  $resultado = nombreFuncion($arg1, $arg2, \u2026);\n?&gt;\n</code></pre> Ejemplo funci\u00f3nResultado <pre><code>&lt;?php\n  function diaSemana() {\n      $semana = [ \"lunes\", \"martes\", \"mi\u00e9rcoles\",\n                  \"jueves\", \"viernes\", \"s\u00e1bado\", \"domingo\" ];\n      $dia = $semana[rand(0, 6)];\n      return $dia;\n  }\n\n  $diaCine = diaSemana();\n  echo \"El pr\u00f3ximo $diaCine voy al cine.\";\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0205/#1-parametros-por-referencia","title":"1. Par\u00e1metros por referencia","text":"<p>Si queremos pasar un par\u00e1metro por referencia, en la declaraci\u00f3n de la funci\u00f3n, indicaremos los par\u00e1metros mediante el operador <code>&amp;</code> para indicar la direcci\u00f3n de memoria de la variable.</p> Ejemplo argumentos por referenciaResultado <pre><code>&lt;?php\n      function duplicarPorValor($argumento) {\n            $argumento = $argumento * 2;\n            echo \"Dentro de la funci\u00f3n: $argumento.&lt;br&gt;\";\n      }\n      function duplicarPorReferencia(&amp;$argumento) {\n            $argumento = $argumento * 2;\n            echo \"Dentro de la funci\u00f3n: $argumento.&lt;br&gt;\";\n      }\n\n      $numero1 = 5;\n      echo \"Paso de par\u00e1metros por valor:&lt;br/&gt;\";\n      echo \"Antes de llamar: $numero1.&lt;br&gt;\";\n      duplicarPorValor($numero1);\n      echo \"Despu\u00e9s de llamar: $numero1.&lt;br&gt;\";\n      echo \"&lt;br&gt;\";\n\n      $numero2 = 7;\n      echo \"Paso de par\u00e1metros por referencia:&lt;br/&gt;\";\n      echo \"Antes de llamar: $numero2.&lt;br&gt;\";\n      duplicarPorReferencia($numero2);\n      echo \"Despu\u00e9s de llamar: $numero2.&lt;br&gt;\";\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0205/#2-parametros-por-defecto-opcionales","title":"2. Par\u00e1metros por defecto / opcionales","text":"<p>Permiten asignar valores en la declaraci\u00f3n, y posteriormente, dejar el argumento en blanco.</p> Ejemplo argumentos por defectoResultado <pre><code>&lt;?php\n   function obtenerCapital($pais = \"todos\") {\n         $capitales = array(\"Italia\" =&gt; \"Roma\",\n         \"Francia\" =&gt; \"Paris\",\n         \"Portugal\" =&gt; \"Lisboa\");\n\n         if ($pais == \"todos\") {\n              return array_values($capitales);\n         } else {\n              return $capitales[$pais];\n         }\n   }\n\n   print_r(obtenerCapital());\n   echo \"&lt;br/&gt;\";\n   echo obtenerCapital(\"Francia\");\n</code></pre> <p></p> <p>En el caso de convivir con otro tipo de par\u00e1metros, los par\u00e1metros que tienen el valor asignado por defecto siempre se colocan al final.</p> Ejemplo orden argumentosResultado <pre><code>&lt;?php\n   function saluda($nombre, $prefijo = \"Sr\") {\n        echo \"Hola \".$prefijo.\" \".$nombre.\"&lt;br/&gt;\";\n   }\n\n   saluda(\"Aitor\", \"Mr\");\n   saluda(\"Aitor\");\n   saluda(\"Marina\", \"Srta\");\n</code></pre> <p></p>"},{"location":"ut02/ut0205/#3-parametros-variables","title":"3. Par\u00e1metros variables","text":"<p>Podemos tener funciones donde en la declaraci\u00f3n no indiquemos la cantidad de datos de entrada.</p> <ul> <li><code>$arrayArgs = func_get_args();</code> \u2192 Obtiene un array con los par\u00e1metros.</li> <li><code>$cantidad = func_num_args();</code> \u2192 Obtiene la cantidad de par\u00e1metros recibidos.</li> <li><code>$valor = func_get_arg(numArgumento);</code> \u2192 Obtiene el par\u00e1metro que ocupa la posici\u00f3n <code>numArgumento</code>.</li> </ul> <p>Estas funciones no se pueden pasar como par\u00e1metro a otra funci\u00f3n (como funciones variable, que veremos m\u00e1s adelante). Para ello, debemos guardar previamente la funci\u00f3n en una variable.</p> Ejemplo argumentos variablesResultado <pre><code>&lt;?php\n    function sumaParametros() {\n        if (func_num_args() == 0) {\n            return false;\n        } else {\n            $suma = 0;\n\n            for ($i = 0; $i &lt; func_num_args(); $i++) {\n                $suma += func_get_arg($i);\n            }\n\n            return $suma;\n        }\n    }\n\n    echo sumaParametros(1, 5, 9); // 15\n?&gt;\n</code></pre> <p></p> <p>Variadics Desde PHP 5.6, se puede utilizar el operador <code>...</code> (variadics) el cual \"disfraza\" los par\u00e1metros como un array. Este operador se coloca delante de un par\u00e1metro en la definici\u00f3n de la funci\u00f3n, y dicho par\u00e1metro se convertir\u00e1 en un array que contendr\u00e1 todos los argumentos adicionales pasados a la funci\u00f3n:</p> Ejemplo variadicsResultado <pre><code>&lt;?php\n    function sumaParametrosMejor(...$numeros) {\n        if (count($numeros) == 0) {\n            return false;\n        } else {\n            $suma = 0;\n            foreach ($numeros as $num) {\n                $suma += $num;\n            }\n\n        return $suma;\n        }\n    }\n\n    echo sumaParametrosMejor(1, 5, 9); // 15\n?&gt;\n</code></pre> <p></p> <p>M\u00e1s usos de <code>...</code></p> <p>Tambi\u00e9n se puede utilizar para dividir un array en variables separadas para proporcionar argumentos:</p> PhpResultado <pre><code>&lt;?php\n    function suma($a, $b) {\n        return $a + $b;\n    }\n\n    echo suma(...[1, 5]).\"&lt;br /&gt;\";\n\n    $a = [1, 5];\n    echo suma(...$a);\n?&gt;\n</code></pre> <p></p> Ejercicio de funci\u00f3n de par\u00e1metros variables y variadics <p>Realiza un ejercicio en el que: - Se genere un array de 31 elementos (de nombre lluvias) en el que se recoja la cantidad de agua de cada d\u00eda del mes. - Cada valor de cantidad se deber\u00e1 crear, de forma aleatoria, a partir de un n\u00famero comprendido entre <code>0</code> y <code>100</code>. - Se deber\u00e1 crear una funci\u00f3n (de nombre suma de precipitaciones) para sumar todas las cantidades del array lluvias (que se le pasar\u00e1 como par\u00e1metro). - El resultado mostrar\u00e1 la precipitaci\u00f3n total y la precipitaci\u00f3n media.</p>"},{"location":"ut02/ut0205/#4-argumentos-con-nombre","title":"4. Argumentos con nombre","text":"<p>Desde PHP 8.0 podemos pasar los argumentos con el nombre (adem\u00e1s de por posici\u00f3n, como hemos hecho hasta ahora). Los argumentos con nombre se pasan poniendo el nombre como prefijo del par\u00e1metro separado por dos puntos: <code>$resultado = funcion( arg1 : valor1, arg2 : valor2 );</code></p> <p>Esta caracter\u00edstica complementa los par\u00e1metros opcionales permiti\u00e9ndonos saltar su valor:</p> Ejemplo argumentos por nombreResultado <pre><code>&lt;?php\n    function funcionArgumentosNombre($a, $b = 2, $c = 4) {\n        echo \"$a $b $c\";\n    }\n    funcionArgumentosNombre(c: 3, a: 1); // \"1 2 3\"\n</code></pre> <p></p> <p>Tanto los par\u00e1metros opcionales como los obligatorios pueden tener nombre, pero los argumentos con nombre se tienen que poner despu\u00e9s de los que no lo tienen.</p> Ejemplo orden argumentosResultado <pre><code>&lt;?php\n    funcionArgumentosNombre(1, c: 3); // \"1 2 3\"\n</code></pre> <p></p>"},{"location":"ut02/ut0205/#5-funciones-tipadas","title":"5. Funciones tipadas","text":"<p>Desde PHP7 en las funciones, tanto los par\u00e1metros como su valor de retorno, permiten la definici\u00f3n de tipos. Esto se conoce como <code>strict_types</code> (tipificaci\u00f3n estricta) y hay que definirlo en la primera l\u00ednea de cada archivo <code>.php</code> para que el propio interprete PHP compruebe los tipos y lance errores si los tipos son incorrectos, mediante la sentencia:</p> <pre><code>&lt;?php\n    declare(strict_types=1);\n</code></pre> <p>As\u00ed pues, vamos a definir los tipos de los par\u00e1metros y de los valores devueltos mediante los tipos: <code>int</code>, <code>float</code>, <code>string</code>, <code>bool</code>, <code>object</code> y <code>array</code>.</p> <p>Si una funci\u00f3n no devuelve nada se indica mediante el tipo <code>void</code>.</p> Ejemplo funci\u00f3n tipadaResultado <pre><code>&lt;?php\n    declare(strict_types=1);\n\n    function suma(int $a, int $b) : int {\n        return $a + $b ;\n    }\n\n    $num = 33;\n    echo suma(10, 30). \"&lt;br /&gt;\";\n    echo suma(10, $num). \"&lt;br /&gt;\";\n    echo suma(\"10\", 30); // error por tipificaci\u00f3n estricta, si no dar\u00eda 40\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0205/#6-alcance","title":"6. Alcance","text":"<p>Las variables definidas fuera de las funciones tienen alcance global: accesibles desde cualquier funci\u00f3n.</p> <p>Los par\u00e1metros de una funci\u00f3n y las variables declaradas dentro de una funci\u00f3n (se conocen como variables locales) s\u00f3lo son accesibles desde dentro de la misma funci\u00f3n \u2192 alcance de funci\u00f3n.</p> <p>En caso de conflicto, tienen prioridad las variables locales. Para evitar el conflicto, dentro de la funci\u00f3n, podemos declarar la variable como <code>global</code>.</p> Ejemplo alcance localResultado <pre><code>&lt;?php\n    function miCiudad() {\n        $ciudad = \"Elche\";\n        echo \"Dentro de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n    }\n\n    $ciudad = \"Alicante\";\n    echo \"Antes de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n    miCiudad();\n    echo \"Despu\u00e9s de la funci\u00f3n: $ciudad.&lt;br&gt;\"\n?&gt;\n</code></pre> <p></p> <p></p> Ejemplo alcance globalResultado <pre><code>&lt;?php\n    function miCiudad() {\n        global $ciudad;\n        $ciudad = \"Elche\";\n        echo \"Dentro de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n    }\n\n    $ciudad = \"Alicante\";\n    echo \"Antes de llamar: $ciudad.&lt;br&gt;\";\n    miCiudad();\n    echo \"Despu\u00e9s de llamar: $ciudad.&lt;br&gt;\"\n?&gt;\n</code></pre> <p></p> <p>No globales</p> <p>Hay que evitar el uso de variables globales dentro de las funciones. En el caso de necesitarlas, es mejor pasarlas como par\u00e1metro a las funciones.</p>"},{"location":"ut02/ut0205/#61-uso-de-tipos-nullables-php-71","title":"6.1. Uso de tipos <code>nullables</code> (PHP 7.1+)","text":"<p>Si necesitas que un par\u00e1metro o valor de retorno acepte null, puedes usar el operador <code>?</code> delante del tipo. Esto indica que el valor puede ser del tipo especificado o null.</p> Ejemplo tipos nullablesResultado <pre><code>&lt;?php\nfunction obtenerNombre(?string $nombre): string {\n    return $nombre ? $nombre : \"Invitado\";\n}\n\necho obtenerNombre(null); // Imprime \"Invitado\"\necho obtenerNombre(\"Juan\"); // Imprime \"Juan\"\n</code></pre> <p>En este caso, el par\u00e1metro <code>$nombre</code> puede ser un <code>string</code> o <code>null</code>. Si es null, la funci\u00f3n retorna \"Invitado\".</p>"},{"location":"ut02/ut0205/#62-tipos-union-php-80","title":"6.2. Tipos union (PHP 8.0+)","text":"<p>PHP 8.0 introdujo los tipos uni\u00f3n, que permiten que un par\u00e1metro o valor de retorno pueda ser de varios tipos a la vez.</p> Ejemplos uni\u00f3n de tiposResultado <pre><code>&lt;?php\n    function obtenerValor(int|string $valor): string {\n        return (string) $valor;\n    }\n\n    echo obtenerValor(10);     // Imprime \"10\"\n    echo obtenerValor(\"diez\"); // Imprime \"diez\"\n</code></pre> <p>En este caso, el par\u00e1metro <code>$valor</code> puede ser un <code>int</code> o un <code>string</code>.</p>"},{"location":"ut02/ut0205/#7-funciones-variable","title":"7. Funciones variable","text":"<ul> <li>Permite asignar una funci\u00f3n a una variable.</li> <li>Nombre de la funci\u00f3n entre comillas.</li> <li>Si una variable va seguida de par\u00e9ntesis, PHP buscar\u00e1 una funci\u00f3n con su valor.</li> </ul> SintaxisEjemploResultado <pre><code>&lt;?php\n    $nombreFuncion = 'nombreDeLaFuncion';\n    $nombreFuncion(); // Llama a nombreDeLaFuncion()\n</code></pre> <pre><code>&lt;?php\n    function sumar ($a, $b){\n        return $a + $b;\n    }\n    $funcion = \"sumar\";\n    echo $funcion(3,4); // invoca a la funci\u00f3n suma\n?&gt;\n</code></pre> <p>Aqu\u00ed, la variable <code>$operacion</code> almacena el nombre de la funci\u00f3n <code>sumar</code>, y al llamarla con los argumentos (3, 4), realiza la operaci\u00f3n y devuelve el resultado.</p> <p>Funciones an\u00f3nimas</p> <p>PHP permite la definici\u00f3n y uso de funciones an\u00f3nimas, es decir, funciones que no tienen nombre, y se utilizan principalmente para gestionar los callbacks. Este tipo de funciones se utiliza mucho en Javascript para gestionar los eventos y promesas.</p> Ejemplo funci\u00f3n an\u00f3nimaResultado <pre><code>&lt;?php\n    $anonima = function() {\n        echo \"Hola\".\"&lt;br/&gt;\";\n    };\n    $anonima();\n\n    $anonimaConParametro = function($nombre) {\n        echo \"Hola \".$nombre.\"&lt;br/&gt;\";\n    };\n    $anonimaConParametro(\"Aitor\");\n\n    // Uso de variables externas a la funci\u00f3n an\u00f3nima --&gt; `use`\n    $mensaje = \"Hola\";\n    $miClosure = function() use ($mensaje) {\n        echo $mensaje.\"&lt;br/&gt;\";;\n    };\n    $miClosure();\n\n    // Uso de par\u00e1metros\n    $holaPHP = function($arg) use ($mensaje) {\n        echo $mensaje.\" \".$arg;\n    };\n    $holaPHP(\"PHP\");\n?&gt;\n</code></pre> <p></p> <p>Desde PHP 7.4 se han introducido las funciones flecha (arrow functions) para simplificar su definici\u00f3n y uso.</p> <p>Ten\u00e9is m\u00e1s informaci\u00f3n sobre funciones an\u00f3nimas y flecha en el siguiente art\u00edculo (en ingl\u00e9s): Funciones an\u00f3nimas y flecha en PHP.</p>"},{"location":"ut02/ut0205/#8-biblioteca-de-funciones","title":"8. Biblioteca de funciones","text":"<p>Podemos agrupar un conjunto de funciones en un archivo, para permitir su reutilizaci\u00f3n. Posteriormente, se incluye con:</p> <ul> <li><code>include(archivo);</code> / <code>include_once(archivo);</code></li> <li><code>require(archivo);</code> / <code>require_once(archivo);</code></li> </ul> <p>Si no encuentra el archivo, <code>require</code> lanza un error fatal, <code>include</code> lo ignora. Las funciones <code>_once</code> s\u00f3lo se cargan una vez, si ya ha sido incluida previamente, no lo vuelve a hacer, evitando bucles.</p> <p>Por ejemplo, colocamos las funciones en el archivo <code>biblioteca.php</code> y posteriormente en otro archivo se referencian:</p> <code>biblioteca.php</code>PhpResultado <pre><code>&lt;?php\n    function suma(int $a, int $b) : int {\n        return $a + $b;\n    }\n\n    function resta(int $a, int $b) : int {\n        return $a - $b;\n    }\n?&gt;\n</code></pre> <pre><code>&lt;?php\n    include_once(\"biblioteca.php\");\n    echo suma(10,20);\n    echo resta(40,20);\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0205/#9-plantillas-mediante-include","title":"9. Plantillas mediante include","text":"<p>Mediante el uso de la instrucci\u00f3n <code>include</code> tambi\u00e9n podemos separar fragmentos de c\u00f3digo PHP/HTML que queramos reutilizar en nuestros sitios web y crear un sistema muy sencillo de plantillas. Por ejemplo, vamos a separar una p\u00e1gina en tres partes, primero la parte superior en <code>encabezado.php</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;&lt;?= $titulo ?&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n</code></pre> <p>La parte de abajo, por ejemplo, solo va a contener HTML y la colocamos en <code>pie.html</code>:</p> <pre><code>    &lt;footer&gt;Profesor/a X&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Y luego nos centramos \u00fanicamente en el contenido que cambia en <code>pagina.php</code>:</p> Ejemplo de plantillas con includeResultado <pre><code>&lt;?php\n    $titulo = \"P\u00e1gina con includes\";\n    include(\"encabezado.php\");\n?&gt;\n\n&lt;h1&gt;&lt;?= $titulo ?&gt;&lt;/h1&gt;\n\n&lt;?php\n    include(\"pie.html\");\n?&gt;\n</code></pre> <p></p> Ejercicios a realizar <ul> <li><code>Ejercicio 241</code></li> <li><code>Ejercicio 242</code></li> <li><code>Ejercicio 243</code></li> <li><code>Ejercicio 244</code></li> <li><code>Ejercicio 245</code></li> <li><code>Ejercicio 246</code></li> <li><code>Ejercicio 247</code></li> <li><code>Ejercicio 248</code></li> </ul>"},{"location":"ut02/ut0206/","title":"2.6. Funciones predefinidas","text":"<p>El lenguaje ofrece un abanico de funciones ya definidas, agrupadas por su funcionalidad: https://www.php.net/manual/es/funcref.php.</p>"},{"location":"ut02/ut0206/#1-cadenas","title":"1. Cadenas","text":"<p>Ya hemos visto que se pueden crear con comillas simples (<code>''</code>, sin interpretaci\u00f3n) o comillas dobles (<code>\"\"</code>, interpretan el contenido y las secuencias de escape <code>\\n</code>, <code>\\t</code>, <code>\\$</code>, <code>{</code>, \u2026 - magic quotes):</p> Ejemplo cadenasResultado <pre><code>&lt;?php\n    $nombre = \"Alba\";\n    $moneda = \"\u20ac\";\n\n\n    echo 'Me llamo $nombre';\n    echo \"Me llamo $nombre\";\n\n    echo \"Son 30 {$moneda}s\"\n?&gt;\n</code></pre> <p></p> <p>Se acceden a los caracteres como si fuera un array.</p> Ejemplo caracteresResultado <pre><code>&lt;?php\n    $cadena = \"Yo soy Batman\";\n    $ygriega = $cadena[0];\n\n    echo $ygriega;\n?&gt;\n</code></pre> <p></p> <p>Adem\u00e1s de <code>echo</code>, podemos mostrar las cadenas mediante la funci\u00f3n <code>printf</code>. Esta funci\u00f3n viene heredada del lenguaje C, y en la cadena se indica el tipo de dato a formatear y genera una salida formateada. Si queremos guardar el resultado en una variable, podemos utilizar <code>sprintf</code>.</p> Ejemplo formatosResultado <pre><code>&lt;?php\n    $num = 33;\n    $nombre = \"Larry Bird\";\n\n    printf(\"%s llevaba el n\u00famero %d &lt;br/&gt;\", $nombre, $num); // %d -&gt; n\u00famero decimal, %s -&gt; string\n    $frase = sprintf(\"%s llevaba el n\u00famero %d\", $nombre, $num);\n    echo $frase;\n?&gt;\n</code></pre> <p></p> <p>Tenemos muchos m\u00e1s ejemplos en https://www.w3schools.com/php/func_string_printf.asp.</p>"},{"location":"ut02/ut0206/#11-operaciones-basicas","title":"1.1. Operaciones b\u00e1sicas","text":"<p>Todas las funciones se pueden consultar en https://www.php.net/manual/es/ref.strings.php.</p> <p>Las m\u00e1s importantes son:</p> <ul> <li><code>strlen</code>: obtiene la longitud de una cadena y devuelve un n\u00famero entero.</li> <li><code>substr</code>: devuelve una subcadena de la cadena original.</li> <li><code>str_replace</code>: reemplaza caracteres en una cadena.</li> <li><code>strtolower</code> y <code>strtoupper</code>: Transforman una cadena de caracteres en la misma cadena en min\u00fasculas o may\u00fasculas respectivamente.</li> </ul> Ejemplos funciones cadenaResultado <pre><code>&lt;?php\n    $cadena = \"El caballero oscuro\";\n\n    $tam = strlen($cadena);\n    echo \"La longitud de '$cadena' es: $tam &lt;br /&gt;\";\n\n    $oscuro = substr($cadena, 13); // desde 13 al final\n    $caba = substr($cadena, 3, 4); // desde 3, 4 letras\n\n    $katman = str_replace(\"c\", \"k\", $cadena);\n    echo \"$oscuro $caba ahora es $katman\";\n\n    echo \"Grande \".strtoupper($cadena);\n?&gt;\n</code></pre> <p></p> <p>Si queremos trabajar con caracteres ASCII de forma individual, son \u00fatiles las funciones:</p> <ul> <li><code>chr</code>: obtiene el car\u00e1cter a partir de un ASCII.</li> <li><code>ord</code>: obtiene el ASCII de un car\u00e1cter.</li> </ul> Ejemplo ord y chrResultado <pre><code>&lt;?php\n    function despues(string $letra): string {\n        $asciiLetra = ord($letra);\n        return chr($asciiLetra + 1);\n    }\n\n    echo despues(\"B\");\n?&gt;\n</code></pre> <p></p> <p>Si queremos limpiar cadenas, tenemos las funciones:</p> <ul> <li><code>trim</code>: elimina los espacios al principio y al final.</li> <li><code>ltrim</code> / <code>rtrim</code> o <code>chop</code>: Elimina los espacios iniciales / finales de una cadena.</li> <li><code>str_pad</code>: rellena la cadenas hasta una longitud especificada y con el car\u00e1cter o caracteres especificados.</li> </ul> Ejemplo funciones cadenaResultado <pre><code>&lt;?php\n    $cadena = \" Programando en PHP \";\n    $limpia = trim($cadena); // \"Programando en PHP\"\n\n    $sucia = str_pad($limpia, 23, \".\"); // \"Programando en PHP.....\"\n\n    echo $sucia;\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0206/#12-comparando-y-buscando","title":"1.2. Comparando y buscando","text":"<p>La comparaci\u00f3n de cadenas puede ser con conversi\u00f3n de tipos mediante <code>==</code> o estricta con <code>===</code>. Tambi\u00e9n funcionan los operadores <code>&lt;</code> y <code>&gt;</code> si ambas son cadenas.</p> <p>Al comparar cadenas con valores num\u00e9ricos podemos utilizar:</p> <ul> <li><code>strcmp</code>: <code>0</code> si las cadenas son iguales, <code>&lt;0</code> si a es menor que b,  o  <code>&gt;0</code> si a es mayor que b.</li> <li><code>strcasecmp</code>: las pasa a min\u00fasculas y compara.</li> <li><code>strncmp</code> / <code>strncasecmp</code>: compara los N primeros caracteres.</li> <li><code>strnatcmp</code>: comparaciones naturales.</li> </ul> Ejemplo funciones comparadorasResultado <pre><code>&lt;?php\n    $frase1 = \"Alfa\";\n    $frase2 = \"Alfa\";\n    $frase3 = \"Beta\";\n    $frase4 = \"Alfa5\";\n    $frase5 = \"Alfa10\";\n\n    var_dump( $frase1 == $frase2 ); // true\n    var_dump( $frase1 === $frase2 ); // true\n\n    var_dump( strcmp($frase1, $frase2) ); // 0\n\n    var_dump( strncmp($frase1, $frase5, 3) ); // 0\n\n    var_dump( $frase2 &lt; $frase3 ); // true\n\n    var_dump( strcmp($frase2, $frase3) ); // -1\n\n    var_dump( $frase4 &lt; $frase5 ); // false\n\n    var_dump( strcmp($frase4, $frase5) ); // 4 \u2192 f4 &gt; f5\n\n    var_dump( strnatcmp($frase4, $frase5) ); // -1 \u2192 f4 &lt; f5\n?&gt;\n</code></pre> <p></p> <p>Si lo que queremos es buscar dentro de una cadena, tenemos:</p> <ul> <li><code>strpos</code> / <code>strrpos</code>: busca en una cadena y devuelve la posici\u00f3n de la primera/\u00faltima ocurrencia.</li> <li><code>strstr</code> / <code>strchr (alias)</code>: busca una cadena y devuelve la subcadena a partir de donde la ha encontrado.</li> <li><code>stristr</code>: ignora las may\u00fasculas.</li> </ul> Ejemplo funciones buscadorasResultado <pre><code>&lt;?php\n    $frase = \"Quien busca encuentra, eso dicen, a veces\";\n    $pos1 = strpos($frase, \",\"); // encuentra la primera coma\n    $pos2 = strrpos($frase, \",\"); // encuentra la \u00faltima coma\n    $trasComa = strstr($frase, \",\"); // \", eso dicen, a veces\"\n\n    echo $pos1.\"&lt;br /&gt;\";\n    echo $pos2.\"&lt;br /&gt;\";\n    echo $trasComa.\"&lt;br /&gt;\";\n?&gt;\n</code></pre> <p></p> <p>Si queremos averiguar qu\u00e9 contienen las cadenas, tenemos un conjunto de funciones de comprobaciones de tipo, se conocen como las funciones <code>ctype</code> que devuelven un booleano:</p> <ul> <li><code>ctype_alpha</code> \u2192 letras</li> <li><code>ctype_alnum</code> \u2192 alfanum\u00e9ricos</li> <li><code>ctype_digit</code> \u2192 d\u00edgitos</li> <li><code>ctype_punct</code> \u2192 caracteres de puntuaci\u00f3n, sin espacios</li> <li><code>ctype_space</code> \u2192 son espacios, tabulador, salto de l\u00ednea</li> </ul> Funciones averiguar tiposResultado <pre><code>&lt;?php\n    $prueba1 = \"hola\";\n    $prueba2 = \"hola33\";\n    $prueba3 = \"33\";\n    $prueba4 = \",.()[]\";\n    $prueba5 = \" ,.()[]\";\n\n    echo ctype_alpha($prueba1).\"&lt;br&gt;\"; // true\n    echo ctype_alnum($prueba2).\"&lt;br&gt;\"; // true\n    echo ctype_digit($prueba3).\"&lt;br&gt;\"; // true\n    echo ctype_punct($prueba4).\"&lt;br&gt;\"; // true\n    echo ctype_space($prueba5).\"&lt;br&gt;\"; // false\n    echo ctype_space($prueba5[0]).\"&lt;br&gt;\"; // true\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0206/#13-trabajando-con-subcadenas","title":"1.3. Trabajando con subcadenas","text":"<p>Si queremos romper las cadenas en trozos, tenemos:</p> <ul> <li><code>explode</code>: convierte en array la cadena mediante un separador.</li> <li><code>implode</code> / <code>join</code>: pasa un array a cadena con un separador.</li> <li><code>str_split</code>/ <code>chunk_split</code>: pasa una cadena a una array/cadena cada X caracteres.</li> </ul> Ejemplo dividir cadenasResultado <pre><code>&lt;?php\n    $frase = \"Quien busca encuentra, eso dicen, a veces\";\n\n    $partes = explode(\",\", $frase);\n\n    // Salida con bucle for\n    // SALIDA: [\"Quien busca encuentra\",\"eso dicen\",\"a veces\"]\n    for ($i = 0; $i &lt; count($partes); $i++) {\n        echo $partes[$i] . \"&lt;br&gt;\";\n    }\n\n\n    $ciudades = [\"Elche\", \"Aspe\", \"Alicante\"];\n    $cadenaCiudades = implode(\"&gt;\", $ciudades);\n    print_r($cadenaCiudades.\"&lt;br/&gt;\");  // salida con print_r\n    // SALIDA: \"Elche&gt;Aspe&gt;Alicante\";\n\n    $partes3cadena = chunk_split($frase, 3);\n    // SALIDA: un string\n    // \"Qui en bus ca enc uen tra , e so dic en, a vec es \"\n    $partes3array = str_split($frase, 3);\n    print_r($partes3array);  // salida con print_\n\n    // salida con funcion json_encode\n    // SALIDA: un array\n    // [\"Qui\", \"en \", \"bus\", \"ca \", \"enc\", \u2026]\n    echo json_encode($partes3array);\n?&gt;\n</code></pre> <p></p> <p>Si queremos trabajar con tokens:</p> <ul> <li><code>strtok(cadena, separador)</code>.</li> <li>y dentro del bucle: <code>strtok(separador)</code>.</li> </ul> <p>Finalmente, para separarla en base al formato:</p> <ul> <li><code>sscanf</code>: al rev\u00e9s que <code>sprintf</code>, crea un array a partir de la cadena y el patr\u00f3n.</li> </ul> <p>Finalmente, otras operaciones que podemos realizar para trabajar con subcadenas son:</p> <ul> <li><code>substr_count</code>: n\u00famero de veces que aparece la subcadena dentro de la cadena.</li> <li><code>substr_replace</code>: reemplaza parte de la cadena a partir de su posici\u00f3n, y opcionalmente, longitud.</li> </ul> Ejemplo subcadenasResultado <pre><code>&lt;?php\n$batman = \"Bruce Wayne es Batman\";\n$empresa = substr($batman, 6, 5); // Wayne\necho $empresa.\"&lt;br /&gt;\";\n\n$bes = substr_count($batman, \"B\"); // 2\necho $bes.\"&lt;br /&gt;\";\n\n// Bruce Wayne es camarero\n$camarero1 = substr_replace($batman, \"camarero\", 15);\n$camarero2 = substr_replace($batman, \"camarero\", -6); // quita 6 desde el final\n// Bruno es Batman\n$bruno = substr_replace($batman, \"Bruno\", 0, 11);\necho $bruno.\"&lt;br /&gt;\";\n?&gt;\n</code></pre> <p></p> <p>Tambi\u00e9n disponemos de una serie de funciones que facilitan las codificaciones desde y hacia HTML:</p> <ul> <li><code>htmlentities</code>: convierte a entidades HTML, por ejemplo, <code>\u00e1</code> por <code>&amp;aacute;</code>, <code>\u00f1</code> por <code>&amp;ntilde;</code>, <code>&lt;</code> por <code>&amp;lt;</code>, etc..</li> <li><code>htmlspecialchars</code>: idem pero solo con los caracteres especiales (<code>&amp;</code>, <code>\"</code>, <code>'</code>, <code>&lt;</code>, <code>&gt;</code>, ...)</li> <li><code>striptags</code>: elimina etiquetas HTML.</li> <li><code>nl2br</code>: cambia saltos de l\u00ednea por <code>&lt;br /&gt;</code>.</li> <li><code>rawurlencode</code> / <code>rawurldecode</code>: codifica/decodifica una URL (espacios, ...).</li> </ul> <p> </p> <p>Estas funciones las utilizaremos en la unidad tem\u00e1tica 4. Programaci\u00f3n Web.</p>"},{"location":"ut02/ut0206/#2-matematicas","title":"2. Matem\u00e1ticas","text":"<p>Disponemos tanto de constantes como funciones ya definidas para trabajar con operaciones matem\u00e1ticas: https://www.php.net/manual/es/ref.math.php.</p> <p>Constantes ya definidas:   - <code>M_PI</code>, <code>M_E</code>, <code>M_EULER</code>, <code>M_LN2</code>, <code>M_LOG2E</code>    - <code>PHP_INT_MAX</code>, <code>PHP_FLOAT_MAX</code></p> <p>Funciones de c\u00e1lculo:</p> <ul> <li><code>pow</code>, <code>sqrt</code>, <code>log</code>, <code>decbin</code>, <code>bindec</code>, <code>decoct</code>, <code>dechex</code>, <code>base_convert</code>, <code>max</code>, <code>min</code></li> </ul> <p>Funciones trigonom\u00e9tricas:</p> <ul> <li><code>sin</code>, <code>cos</code>, <code>tan</code>, <code>deg2rad</code>, <code>rad2deg</code></li> </ul> <p>Funciones para trabajar con n\u00fameros aleatorios:</p> <ul> <li><code>rand</code>, <code>mt_rand</code> (m\u00e1s r\u00e1pida).</li> </ul> <p>Aunque la mayor\u00eda de ellas son muy espec\u00edficas de problemas matem\u00e1ticos / estad\u00edsticos, es muy com\u00fan que tengamos que redondear y/o formatear los c\u00e1lculos antes de mostrarlos al usuario.</p> <p>Mediante la funci\u00f3n <code>number_format(numero, cantidadDecimales, separadorDecimales, separadorMiles)</code> podemos pasar n\u00fameros a cadena con decimales y/o separadores de decimales y/o de miles.</p> Ejemplo number_format(args)Resultado <pre><code>&lt;?php\n    $nf = 1234.5678;\n    echo number_format($nf, 2); // 1,234.57\n    echo number_format($nf, 2, \"M\", \"#\"); // 1#234M57\n?&gt;\n</code></pre> <p></p> <p>Para redondear, tenemos <code>abs</code> para el valor absoluto y <code>round</code> para redondear, <code>ceil</code> para aproximaci\u00f3n por exceso y <code>floor</code> por defecto.</p> Ejemplo funciones redondeoResultado <pre><code>&lt;?php\n    $siete = floor($num);   // SALIDA: 7\n    echo $siete.\"&lt;br /&gt;\";\n\n    $ocho = ceil($num);   // SALIDA: 8\n    echo $ocho.\"&lt;br /&gt;\";\n\n    $otro = 4.49;\n    $cuatro = round($otro);   // SALIDA: 4\n    echo $cuatro.\"&lt;br /&gt;\";\n    $cuatrocinco = round($otro, 1);   // SALIDA: 4.5\n    echo $cuatrocinco.\"&lt;br /&gt;\";\n    $cinco = round($cuatrocinco);   // SALIDA: 5\n    echo $cinco.\"&lt;br /&gt;\";\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0206/#3-tipos-de-datos","title":"3. Tipos de datos","text":"<p>Finalmente, para realizar conversiones de datos o si queremos trabajar con tipos de datos, tenemos las siguientes funciones:</p> <ul> <li><code>floatval</code>, <code>intval</code>, <code>strval</code>: devuelve una variable del tipo de la funci\u00f3n indicada.</li> <li><code>settype</code>: fuerza la conversi\u00f3n.</li> <li><code>gettype</code>: obtiene el tipo.</li> <li><code>is_int</code>, <code>is_float</code>, <code>is_string</code>, <code>is_array</code>, <code>is_object</code>: devuelve un booleano a partir del tipo recibido.</li> </ul> Ejemplo funciones check tiposResultado <pre><code>&lt;?php\n    $uno = 1;\n    var_dump(is_int($uno)); // true\n\n    $unofloat = floatval($uno);\n\n    settype($uno, \"string\");\n\n    var_dump(is_int($uno)); // false\n\n    var_dump(is_string($uno)); // true\n\n    settype($uno, \"float\");\n\n    var_dump(is_int($uno)); // false\n\n    var_dump(is_float($uno)); // true\n\n    var_dump(is_int(intval($uno))); // true\n?&gt;  \n</code></pre> <p></p> Ejercicios a realizar <ul> <li><code>Ejercicio 251</code></li> <li><code>Ejercicio 252</code></li> <li><code>Ejercicio 253</code></li> <li><code>Ejercicio 254</code></li> <li><code>Ejercicio 255</code></li> <li><code>Ejercicio 256</code></li> <li><code>Ejercicio 257</code></li> <li><code>Ejercicio 258</code></li> <li><code>Ejercicio 259</code></li> <li><code>Ejercicio 260</code></li> <li><code>Ejercicio 261</code></li> </ul>"},{"location":"ut02/ut0207/","title":"2.7. Expresiones regulares","text":""},{"location":"ut02/ut0207/#1-que-es-una-expresion-regular","title":"1. Qu\u00e9 es una expresi\u00f3n regular?","text":"<p>Una expresi\u00f3n regular es una secuencia de caracteres que forma un patr\u00f3n de b\u00fasqueda. Cuando buscas datos en un texto, puedes utilizar este patr\u00f3n de b\u00fasqueda para describir lo que est\u00e1s buscando.</p> <p>Una expresi\u00f3n regular puede ser un solo car\u00e1cter o un patr\u00f3n m\u00e1s complicado.</p> <p>Las expresiones regulares se pueden utilizar para realizar todo tipo de operaciones de b\u00fasqueda y reemplazo de texto.</p> <p>Ejemplo:</p> <pre><code>$exp = \"/prueba/i\";\n</code></pre> <p>En el ejemplo anterior, <code>/</code>es el delimitador , prueba es el patr\u00f3n que se est\u00e1 buscando y <code>i</code>es un modificador que hace que la b\u00fasqueda no distinga entre may\u00fasculas y min\u00fasculas.</p> <p>El delimitador puede ser cualquier car\u00e1cter que no sea una letra, un n\u00famero, una barra invertida o un espacio. El delimitador m\u00e1s com\u00fan es la barra diagonal (<code>/</code>), pero cuando tu patr\u00f3n contiene barras diagonales es conveniente elegir otros delimitadores como <code>#</code> o <code>~</code>.</p>"},{"location":"ut02/ut0207/#2-funciones-de-expresion-regular","title":"2. Funciones de expresi\u00f3n regular","text":"<p>PHP proporciona una variedad de funciones que le permiten utilizar expresiones regulares.</p> <p>Las funciones m\u00e1s comunes son:</p> funci\u00f3n descripci\u00f3n preg_match(patron, cadena) Devuelve 1 si el patr\u00f3n se encontr\u00f3 en la cadena y 0 si no. preg_match_all(patron, cadena) Devuelve el n\u00famero de veces que se encontr\u00f3 el patr\u00f3n en la cadena, que tambi\u00e9n puede ser 0. preg_replace(patron, modificado, cadena) Devuelve una nueva cadena donde los patrones coincidentes han sido reemplazados por otra cadena. Ejemplo preg_match(args)Resultado <pre><code>    &lt;?php\n        $cadena = \"Estudia DAW en Catadaw\";\n        $patron = \"/daw/i\";\n        echo preg_match($patron, $cadena); \n    ?&gt;\n</code></pre> <p></p> <p></p> Ejemplo preg_match_allResultado <pre><code>&lt;?php\n    $cadena = \"La lluvia en SEVILLA es una maravilla.\";\n    $patron = \"/vi/i\";\n    echo preg_match_all($patron, $cadena);\n?&gt;\n</code></pre> <p></p> <p></p> Ejemplo preg_replaceResultado <pre><code>&lt;?php\n    $cadena = \"Estudia DAM\";\n    $patron = \"/dam/i\";\n    $modificado = \"DAW\";\n    echo preg_replace($patron, $modificado, $cadena);\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0207/#3-modificadores-de-expresiones-regulares","title":"3. Modificadores de expresiones regulares","text":"<p>Los modificadores pueden cambiar c\u00f3mo se realiza una b\u00fasqueda.</p> modificaci\u00f3n descripci\u00f3n i Realiza una b\u00fasqueda que no distingue entre may\u00fasculas y min\u00fasculas. m Realiza una b\u00fasqueda multil\u00ednea (los patrones que buscan una coincidencia al principio o al final de una cadena ahora coincidir\u00e1n con el principio o el final de cada l\u00ednea). u Permite la coincidencia correcta de patrones codificados en UTF-8. Ejemplo modificador Resultado <pre><code>&lt;?php\n    $cadena = \"IES Mestre Ramon Esteve\";\n    $patron = \"/s/i\";\n    echo preg_match_all($patron, $cadena);\n\n    echo preg_replace($patron, \"#\", $cadena);\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0207/#4-patrones-de-expresiones-regulares","title":"4. Patrones de expresiones regulares","text":"<p>Los corchetes se utilizan para encontrar un rango de caracteres:</p> expresi\u00f3n descripci\u00f3n [abc] Encuentra uno o varios de los caracteres dentro de los corchetes. [^abc] Encuentra cualquier car\u00e1cter que NO est\u00e9 entre corchetes. [a-z] Encuentra cualquier car\u00e1cter alfab\u00e9ticamente entre dos letras. [A-z] Encuentre cualquier car\u00e1cter alfab\u00e9ticamente entre una letra may\u00fascula especificada y una letra min\u00fascula especificada. [A-Z] Encuentra cualquier car\u00e1cter alfab\u00e9ticamente entre dos letras may\u00fasculas. [123] Encuentra uno o varios de los d\u00edgitos dentro de los corchetes. [0-5] Encuentra cualquier d\u00edgito entre los dos n\u00fameros. [0-9] Encuentra cualquier d\u00edgito."},{"location":"ut02/ut0207/#5-metacaracteres","title":"5. Metacaracteres","text":"<p>Los metacaracteres son caracteres con un significado especial:</p> metacaracter descripci\u00f3n | Encuentra una coincidencia para cualquiera de los patrones separados por | como en: gato|perro|pez . Encuentra cualquier caracter. ^ Encuentra una coincidencia como comienzo de una cadena como en: ^Hola $ Encuentra una coincidencia al final de la cadena como en: World$. \\d Encuentra cualquier d\u00edgito. \\D Encuentra cualquier no d\u00edgito. \\s Encuentra cualquier car\u00e1cter de espacio en blanco. \\S Encuentra cualquier car\u00e1cter que no sea un espacio en blanco. \\w Encuentre cualquier letra alfab\u00e9tica (de la a a la Z) y d\u00edgito (0 a 9). \\W Encuentra cualquier car\u00e1cter no alfab\u00e9tico y sin d\u00edgitos. \\b Encuentre una coincidencia al principio de una palabra como esta: \\bWORD, o al final de una palabra como esta: WORD\\b. \\uxxxx Encuentre el car\u00e1cter Unicode especificado por el n\u00famero hexadecimal xxxx. Ejemplos patronesResultado <pre><code>&lt;?php\n    $cadena = \"Hola Mundo!\";\n    if (preg_match($patron, $cadena)) {\n        echo \"La cadena empieza con 'Hola'.&lt;br/&gt;\";\n    }\n\n    $patron = \"/\\.$/\";  // Coincide si termina con \".\"\n    $cadena = \"Esta es una oraci\u00f3n.\";\n    if (preg_match($patron, $cadena)) {\n        echo \"La cadena termina con un punto.&lt;br/&gt;\";\n    }\n\n    $patron = \"/\\d/\";  // Coincide con cualquier d\u00edgito\n    $cadena = \"Tengo 2 perros.\";\n    if (preg_match($patron, $cadena)) {\n        echo \"Se encontr\u00f3 un n\u00famero.&lt;br/&gt;\";\n    }\n\n    $cadena = \"Tengo perros.\";\n    if (preg_match($patron, $cadena)) {\n        echo \"Se encontr\u00f3 un car\u00e1cter no num\u00e9rico.&lt;br/&gt;\";\n    }\n\n    $patron = \"/\\s/\";  // Coincide con cualquier espacio en blanco\n    $cadena = \"Hola Mundo!\";\n    if (preg_match($patron, $cadena)) {\n        echo \"Se encontr\u00f3 un espacio en blanco.&lt;br/&gt;\";\n    }\n\n    $patron = \"/\\S/\";  // Coincide con cualquier car\u00e1cter que no sea espacio\n    $cadena = \"Hola!\";\n    if (preg_match($patron, $cadena)) {\n        echo \"Se encontr\u00f3 un car\u00e1cter que no es espacio en blanco.&lt;br/&gt;\";\n    }\n\n    $patron = \"/\\w/\";  // Coincide con cualquier letra, n\u00famero o gui\u00f3n bajo\n    $cadena = \"Hola_123\";\n    if (preg_match($patron, $cadena)) {\n        echo \"Se encontr\u00f3 un car\u00e1cter alfanum\u00e9rico.&lt;br/&gt;\";\n    }\n\n    $patron = \"/\\W/\";  // Coincide con cualquier car\u00e1cter que no sea letra, n\u00famero o gui\u00f3n bajo\n    $cadena = \"Hola Mundo!\";\n    if (preg_match($patron, $cadena)) {\n        echo \"Se encontr\u00f3 un car\u00e1cter que no es alfanum\u00e9rico.&lt;br/&gt;\";\n    }\n\n    $patron = \"/\\bgato\\b/\";  // Coincide con la palabra exacta \"gato\"\n    $cadena = \"Tengo un gato en casa.\";\n    if (preg_match($patron, $cadena)) {\n        echo \"Se encontr\u00f3 la palabra 'gato'.&lt;br/&gt;\";\n    }\n\n    $patron = \"/\\u{2764}/\";  // Unicode del coraz\u00f3n\n    $cadena = \"Te amo \u2764\";\n    if (preg_match($patron, $cadena)) {\n        echo \"Se encontr\u00f3 un coraz\u00f3n.\";\n    }\n?&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0207/#6-cuantificadores","title":"6. Cuantificadores","text":"<p>Los cuantificadores definen cantidades:</p> cuantificador descripci\u00f3n n+ Coincide con cualquier cadena que contenga al menos un n. n* Coincide con cualquier cadena que contenga cero o m\u00e1s apariciones de n. n? Coincide con cualquier cadena que contenga cero o una ocurrencia de n. n{3} Coincide con cualquier cadena que contenga una secuencia de 3 n's. n{2, 5} Coincide con cualquier cadena que contenga una secuencia de al menos 2, pero no m\u00e1s de 5 n's. n{3, } Coincide con cualquier cadena que contenga una secuencia de al menos 3 n's."},{"location":"ut02/ut0207/#7-agrupamiento","title":"7. Agrupamiento","text":"<p>Puedes utilizar par\u00e9ntesis <code>(  )</code>para aplicar cuantificadores a patrones completos. Tambi\u00e9n se pueden utilizar para seleccionar partes del patr\u00f3n que se utilizar\u00e1n como coincidencia.</p> Ejemplo patrones y agrupamientoResultado <pre><code>&lt;?php\n    $cadena = \"Manzanas y Bananas.\";\n    $patron = \"/a(na){2,}/i\";\n    echo preg_match_all($patron, $cadena);\n?&gt;\n</code></pre> <p></p> Aprender expresiones regulares <p>Hay millones de ejemplos, pero en esto 10 ejercicios. \u00bfQu\u00e9 cadenas de texto encontrar\u00edan las siguientes regexp? a) hola b) h.?a c) h+b. d) [2-4]?[3-9ag] e) aju{2,8}m[-.]z f) (ad)+juju.[0-9]?- g) (ho|la)?[4-7zu] h) [([0-4][0-9]|5[0-2])[0-9]{3} . C\u00f3digos Postales Espa\u00f1a i) ^.{3,32}#[0-9]{4}$ . Usuario Discord j) (b25[0-5]|b2[0-4][0-9]|b[01]?[0-9][0-9]?)(.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3} . Direcci\u00f3n ipv4. b es un delimitador de palabra \u00abboundary\u00bb.</p>"},{"location":"ut02/ut02ac/","title":"Ejercicios","text":""},{"location":"ut02/ut02ac/#php-basico","title":"Php b\u00e1sico","text":""},{"location":"ut02/ut02ac/#ejercicio-201","title":"Ejercicio 201","text":"<p>Visualiza el v\u00eddeo de Jes\u00fas Amieiro sobre PHP en 2020 a partir del minuto 3:32 (son 40 minutos aproximadamente).</p> <ul> <li>\u00bfQu\u00e9 relaci\u00f3n existe entre PHP y Facebook?</li> <li>Respecto al rendimiento, \u00bfqu\u00e9 versi\u00f3n m\u00ednima deber\u00edamos utilizar?</li> <li>\u00bfPor qu\u00e9 PHP tiene mala fama?</li> </ul>"},{"location":"ut02/ut02ac/#ejercicio-202","title":"Ejercicio 202","text":"<p><code>202tresfrases.php</code>: Muestra 3 frases, cada una en un p\u00e1rrafo distinto, utilizando las tres posibilidades que existen de mostrar contenido. Tras ello, introduce dos comentarios, uno de bloque y otro de una l\u00ednea.</p>"},{"location":"ut02/ut02ac/#ejercicio-203","title":"Ejercicio 203","text":"<p><code>203calculos.php</code>: Escribe un programa que utilice las variables <code>$x</code> y <code>$y</code>. As\u00edgnales los valores <code>166</code> y <code>999</code>respectivamente.</p> <p>A continuaci\u00f3n, muestra por pantalla el valor de cada variable, la suma, la resta, la divisi\u00f3n y la multiplicaci\u00f3n.</p>"},{"location":"ut02/ut02ac/#ejercicio-204","title":"Ejercicio 204","text":"<p><code>204datosPersonales.php</code>: Escribe un programa que almacene en variables tu nombre, primer apellido, segundo apellido, email, a\u00f1o de nacimiento y tel\u00e9fono. Luego mu\u00e9stralos por pantalla dentro de una tabla.</p> tabla resultante del ejercicio 204"},{"location":"ut02/ut02ac/#ejercicio-205","title":"Ejercicio 205","text":"<p><code>205datosPersonales.html</code> y <code>205datosPersonales.php</code>: Es el mismo ejercicio que el anterior, pero separando la l\u00f3gica. En el primer archivo crearemos el formulario para introducir los datos, y luego recogemos los datos y generamos la tabla en el segundo archivo.</p>"},{"location":"ut02/ut02ac/#ejercicio-206","title":"Ejercicio 206","text":"<p><code>206madlib.html</code> y <code>206madlib.php</code>: A partir de un nombre, un verbo, un adjetivo y un adverbio, crea una historia que contenga dichos elementos. Por ejemplo:</p> <ul> <li>Entrada: perro / caminar / azul / r\u00e1pidamente</li> <li>Salida: \u00bf Te gusta caminar con tu perro azul r\u00e1pidamente ?</li> <li><code>206madlib2.html</code> y <code>206madlib2.php</code> Crea un madlib m\u00e1s extenso, leyendo m\u00e1s datos de entrada.</li> </ul>"},{"location":"ut02/ut02ac/#ejercicio-207","title":"Ejercicio 207","text":"<p><code>207anyos.php</code>: Tras leer la edad de una persona, mostrar la edad que tendr\u00e1 dentro de 10 a\u00f1os y hace 10 a\u00f1os. Adem\u00e1s, muestra qu\u00e9 a\u00f1o ser\u00e1 en cada uno de los casos. Finalmente, muestra el a\u00f1o de jubilaci\u00f3n suponiendo que trabajar\u00e1s hasta los 67 a\u00f1os. En este caso, no hace falta que previamente crees un formulario, puedes probar el ejercicio via URL: <code>207anyos.php?edad=33</code>.</p> <p>A tener en cuenta</p> <p><code>$anyoActual = date(\"Y\");</code></p>"},{"location":"ut02/ut02ac/#ejercicio-208","title":"Ejercicio 208","text":"<p><code>208dinero.php</code>: A partir de una cantidad de dinero, mostrar su descomposici\u00f3n en billetes (500, 200, 100, 50, 20, 10, 5) y monedas (2, 1), para que el n\u00famero de elementos sea m\u00ednimo. No se utilizar ninguna instrucci\u00f3n condicional. Por ejemplo, al introducir <code>139</code> debe mostrar:</p> <pre><code>1 billete de 100\n0 billete de 50\n1 billete de 20\n1 billete de 10\n1 billete de 5\n2 moneda de 2\n</code></pre> <p>A tener en cuenta</p> <p>Puedes forzar a realizar la divisi\u00f3n entera mediante la funci\u00f3n <code>intdiv($dividendo, $divisor)</code>o pasar un n\u00famero flotante a entero puedes usar la funci\u00f3n <code>intval()</code>.</p>"},{"location":"ut02/ut02ac/#ejercicio-209","title":"Ejercicio 209","text":"<p><code>209posnegcero.php</code>: A partir de un numero, muestra por pantalla si el n\u00famero es <code>positivo</code>, <code>negativo</code> o <code>cero</code>.</p>"},{"location":"ut02/ut02ac/#ejercicio-210","title":"Ejercicio 210","text":"<p><code>210mayor3.php</code>: Sin hacer uso de condiciones que utilicen dentro la condici\u00f3n los operadores l\u00f3gicos, muestra el mayor de tres n\u00fameros (a, b y c).</p> <p><code>210mayor3c.php</code>: Utiliza en las condiciones los operadores l\u00f3gicos.</p>"},{"location":"ut02/ut02ac/#ejercicio-211","title":"Ejercicio 211","text":"<p><code>211nombreEdad.php</code>: A partir de una edad muestra por pantalla:</p> <ul> <li>beb\u00e9 si tiene menos de 3 a\u00f1os</li> <li>ni\u00f1o si tiene entre 3 y 12 a\u00f1os</li> <li>adolescente entre 13 y 17 a\u00f1os</li> <li>adulto entre 18 y 66</li> <li>jubilado a partir de 67</li> </ul>"},{"location":"ut02/ut02ac/#ejercicio-212","title":"Ejercicio 212","text":"<p><code>212reloj.php</code>: Escribe un programa que funcione similar a un reloj, de manera que a partir de los valores de hora, minuto y segundo muestre la hora dentro de un segundo. Tras las 23:59:59 ser\u00e1n las 0:0:0.</p>"},{"location":"ut02/ut02ac/#ejercicio-213","title":"Ejercicio 213","text":"<p><code>213calendario.php</code>: Escribe un programa similar a un calendario de manera que a partir de dia, mes y anyo muestre la fecha dentro de un d\u00eda despu\u00e9s. Debes tener en cuenta que no todos los meses tienen 30 d\u00edas. En este caso, no vamos a tener en cuenta los a\u00f1os bisiestos.</p>"},{"location":"ut02/ut02ac/#ejercicio-214","title":"Ejercicio 214","text":"<p><code>214ecuacion2g.php</code>: Crea un programa que resuelva una ecuaci\u00f3n de 2\u00ba grado del tipo <code>ax\u00b2 + bx + c = 0</code>. Ten en cuenta que puede tener 2, 1 o no tener soluci\u00f3n dependiendo del valor del discriminante <code>b\u00b2-4ac</code>.</p> Ecuaci\u00f3n de segundo grado para el ejecicio 214 <p>A tener en cuenta</p> <p>Para calcular la ra\u00edz cuadrada deber\u00e1s utilizar la funci\u00f3n <code>sqrt()</code>.</p>"},{"location":"ut02/ut02ac/#ejercicio-215","title":"Ejercicio 215","text":"<p>Investiga para qu\u00e9 sirve el operador nave espacial, disponible desde PHP7 (https://www.php.net/manual/es/migration70.new-features.php). Explica con un par de l\u00edneas su prop\u00f3sito y mediante c\u00f3digo demuestra su uso.</p>"},{"location":"ut02/ut02ac/#ejercicio-216","title":"Ejercicio 216","text":"<p>Investiga para qu\u00e9 sirve la instrucci\u00f3n <code>match()</code>, disponible desde PHP8 (https://www.php.net/manual/es/control-structures.match.php). Explica con un par de lineas su prop\u00f3sito y mediante c\u00f3digo demuestra su uso.</p>"},{"location":"ut02/ut02ac/#bucles","title":"Bucles","text":""},{"location":"ut02/ut02ac/#ejercicio-221","title":"Ejercicio 221","text":"<p><code>221pares050.php</code>: Escribe un programa que muestre los n\u00fameros pares del 0 al 50 (dentro de una lista desordenada).</p> <p><code>221paresAB.php</code>: A partir del anterior, refactorizar para que funcione con <code>inicio</code> y <code>fin</code>.</p>"},{"location":"ut02/ut02ac/#ejercicio-222","title":"Ejercicio 222","text":"<p><code>222suma110.php</code>: Escribe un programa que sume los n\u00fameros del 1 al 10.</p> <p><code>222sumaAB.php</code>: A partir del anterior, refactorizar para que funcione con <code>inicio</code> y <code>fin</code>.</p>"},{"location":"ut02/ut02ac/#ejercicio-223","title":"Ejercicio 223","text":"<p><code>223potencia.php</code>: A partir de una base y exponente, mediante la acumulaci\u00f3n de productos, calcula la potencia utilizando la instrucci\u00f3n <code>for</code>.</p> <p><code>223potenciaWhile.php</code>: Reescribe el ejercicio anterior haciendo uso s\u00f3lo de <code>while</code>.</p> <p><code>223potenciaDoWhile.php</code>: Reescribe el ejercicio anterior haciendo uso s\u00f3lo de <code>do-while</code>.</p>"},{"location":"ut02/ut02ac/#ejercicio-224","title":"Ejercicio 224","text":"<p><code>224tablaMultiplicar.php</code>: Muestra dentro de una tabla HTML la tabla de multiplicar del numero que reciba como par\u00e1metro. Utiliza <code>&lt;thead&gt;</code> con sus respectivos <code>&lt;th&gt;</code> y <code>&lt;tbody&gt;</code> para dibujar la tabla. Por ejemplo:</p> a * b = a*b 7 * 1 = 7 7 * 2 = 14 ... 7 * 10 = 70"},{"location":"ut02/ut02ac/#ejercicio-225","title":"Ejercicio 225","text":"<p><code>225formulario.html</code>: Crea un formulario que permita leer una cantidad.</p> <p><code>225leerDatos.php</code>: a partir de cantidad, prepara un formulario con tantas cajas de datos como su valor.</p> <p>Finalmente, en <code>225sumarDatos.php</code>: a partir de los datos de todas las cajas de la p\u00e1gina anterior, s\u00famalos y muestra el total.</p> <p>A tener en cuenta</p> <p>Para guardar un dato oculto puedes utilizar un campo de formulario de tipo oculto: <code>&lt;input type=\"hidden\" name=\"cantidad\" value=\"33\" /&gt;</code>.</p>"},{"location":"ut02/ut02ac/#ejercicio-226","title":"Ejercicio 226","text":"<p><code>226formulario.html</code> y <code>226tabla.php</code>: A partir de un n\u00famero de <code>filas</code> y <code>columnas</code>, crear una tabla con ese tama\u00f1o. Las celdas deben estar rellenadas con los valores de las coordenadas de cada celda.</p>"},{"location":"ut02/ut02ac/#ejercicio-227","title":"Ejercicio 227","text":"<p><code>227formulario.html</code> y <code>227cuadrado.php</code>: Bas\u00e1ndote en el ejercicio anterior, rellena la tabla de manera que solo los bordes tengan contenido, qued\u00e1ndose el resto de celdas en blanco.</p>"},{"location":"ut02/ut02ac/#ejercicio-228","title":"Ejercicio 228","text":"<p><code>228formulario.html</code> y <code>228equis.php</code>: Bas\u00e1ndote en el ejercicio anterior, ahora s\u00f3lo debe aparecer el contenido de los dos diagonales.</p>"},{"location":"ut02/ut02ac/#ejercicio-229","title":"Ejercicio 229","text":"<p><code>229cuadradoMultiplicar.php</code>: Crea un programa que muestre por pantalla un cuadrado exactamente igual (f\u00edjate bien en los encabezados, tanto de las filas como de las columnas) al de la imagen con las tablas de multiplicar.</p> Tabla de multiplicar para el ejercicio 229."},{"location":"ut02/ut02ac/#arrays","title":"Arrays","text":""},{"location":"ut02/ut02ac/#ejercicio-231","title":"Ejercicio 231","text":"<p><code>231aleatorios50.php</code>: Rellena un array con 50 n\u00fameros aleatorios comprendidos entre el 0 y el 99, y luego mu\u00e9stralo en una lista desordenada. Para crear un n\u00famero aleatorio, utiliza la funci\u00f3n <code>rand(inicio, fin)</code>. Por ejemplo:</p> <pre><code>$num = rand(0, 99)\n</code></pre>"},{"location":"ut02/ut02ac/#ejercicio-232","title":"Ejercicio 232","text":"<p><code>232bola8.html</code>: Prepara un formulario con un caja de texto que realice a una pregunta al usuario.</p> <p><code>232bola8.php</code>: A partir del anterior, crea un programa que muestre la pregunta recibida y genere una respuesta de manera aleatoria entre un conjunto de respuestas predefinidas, almacenadas en un array: Si, no, quiz\u00e1s, claro que s\u00ed, por supuesto que no, no lo tengo claro, seguro, yo dir\u00eda que s\u00ed, ni de co\u00f1a, etc...</p> <p>Este ejercicio se basa en el juego de la Bola 8 m\u00e1gica.</p>"},{"location":"ut02/ut02ac/#ejercicio-233","title":"Ejercicio 233","text":"<p><code>233mates.php</code>: A partir del ejercicio 230, genera un array aleatorio de 33 elementos con n\u00fameros comprendidos entre el 0 y 100 y calcula:</p> <ul> <li>El mayor</li> <li>El menor</li> <li>La media</li> </ul>"},{"location":"ut02/ut02ac/#ejercicio-234","title":"Ejercicio 234","text":"<p><code>234sexos.php</code>: Rellena un array de 100 elementos de manera aleatoria con valores <code>M</code> o <code>F</code> (por ejemplo <code>[\"M\", \"M\", \"F\", \"M\", ...]</code>). Una vez completado, vuelve a recorrerlo y calcula cuantos elementos hay de cada uno de los valores almacenando el resultado en un array asociativo <code>['M' =&gt; 44, 'F' =&gt; 66]</code> (no utilices variables para contar las <code>M</code> o las <code>F</code>). Finalmente, muestra el resultado por pantalla</p>"},{"location":"ut02/ut02ac/#ejercicio-235","title":"Ejercicio 235","text":"<p><code>235monedas.php</code>: Vuelve a realizar el ejercicio 207, el de las monedas (500, 200, 100, 50, 20, 10, 5, 2, 1), pero haciendo uso de arrays y un bucle. Almacena el resultado en un array asociativo. Muestra el resultado en una lista desordenada \u00fanicamente con las cantidades que tienen alg\u00fan valor.</p>"},{"location":"ut02/ut02ac/#ejercicio-236","title":"Ejercicio 236","text":"<p><code>236alturas.php</code>: Mediante un array asociativo, almacena el nombre y la altura de 5 personas (<code>nombre =&gt; altura</code>). Posteriormente, recorre el array y mu\u00e9stralo en una tabla HTML. Finalmente a\u00f1ade una \u00faltima fila a la tabla con la altura media.</p>"},{"location":"ut02/ut02ac/#ejercicio-237","title":"Ejercicio 237","text":"<p><code>237personas.php</code>: Mediante un array bidimensional, almacena el nombre, altura y email de 5 personas. Para ello, crea un array de personas, siendo cada persona un array asociativo: <code>[ ['nombre'=&gt;'Aitor', 'altura'=&gt;182, 'email'=&gt;'aitor@correo.com'],[\u2026],\u2026 ]</code> Posteriormente, recorre el array y mu\u00e9stralo en una tabla HTML.</p>"},{"location":"ut02/ut02ac/#ejercicio-238","title":"Ejercicio 238","text":"<p><code>238leerCantidad.html</code> y <code>237leerPersonas.php</code>: a partir de un formulario con un campo de <code>cantidad</code> de personas, generar un nuevo formulario para leer el nombre, altura y email de <code>cantidad</code> personas.</p> <p><code>238gestionarPersonas.php</code>: A partir de las personas introducidas, mostrar sus datos en una tabla, y posteriormente, destacar los datos del m\u00e1s alto y el del m\u00e1s bajo.</p>"},{"location":"ut02/ut02ac/#ejercicio-239","title":"Ejercicio 239","text":"<p><code>239tablaDistintos.php</code>: Rellena un array bidimensional de 6 filas por 9 columnas con n\u00fameros aleatorios comprendidos entre 100 y 999 (ambos incluidos). Todos los n\u00fameros deben ser distintos, es decir, no se puede repetir ninguno. Muestra a continuaci\u00f3n por pantalla el contenido del array de tal forma que:</p> <ul> <li>La columna del m\u00e1ximo debe aparecer en azul.</li> <li>La fila del m\u00ednimo debe aparecer en verde</li> <li>El resto de nu\u0301meros deben aparecer en negro.</li> </ul>"},{"location":"ut02/ut02ac/#funciones","title":"Funciones","text":""},{"location":"ut02/ut02ac/#ejercicio-241","title":"Ejercicio 241","text":"<p><code>241arrayPar.php</code>: Crea las siguientes funciones:</p> <ul> <li>Una funci\u00f3n que averig\u00fce si un n\u00famero es par: <code>esPar(int $num): bool</code></li> <li>Una funci\u00f3n que devuelva un array de tama\u00f1o <code>$tam</code> con n\u00fameros aleatorios comprendido entre <code>$min</code> y <code>$max</code>: <code>arrayAleatorio(int $tam, int $min, int $max) : array</code></li> <li>Una funci\u00f3n que reciba un <code>$array</code> por referencia y devuelva la cantidad de n\u00fameros pares que hay almacenados: <code>arrayPares(array &amp;$array): int</code></li> </ul>"},{"location":"ut02/ut02ac/#ejercicio-242","title":"Ejercicio 242","text":"<p><code>242parametrosVariables.php</code>: Crea las siguientes funciones:</p> <ul> <li>Una funci\u00f3n que devuelva el mayor de todos los n\u00fameros recibidos como par\u00e1metros: <code>function mayor(): int</code>. Utiliza las funciones <code>func_get_args()</code>, etc... No puedes usar la funci\u00f3n <code>max()</code>.</li> <li>Una funci\u00f3n que concatene todos los par\u00e1metros recibidos separ\u00e1ndolos con un espacio: <code>function concatenar(...$palabras) : string</code>. Utiliza el operador ....</li> </ul>"},{"location":"ut02/ut02ac/#ejercicio-243","title":"Ejercicio 243","text":"<p><code>243matematicas.php</code>: A\u00f1ade las siguientes funciones:</p> <ul> <li><code>digitos(int $num): int</code> \u2192 devuelve la cantidad de d\u00edgitos de un n\u00famero.</li> <li><code>digitoN(int $num, int $pos): int</code> \u2192 devuelve el d\u00edgito que ocupa, empezando por la izquierda, la posici\u00f3n <code>$pos</code>.</li> <li><code>quitaPorDetras(int $num, int $cant): int</code> \u2192 le quita por detr\u00e1s (derecha) <code>$cant</code> d\u00edgitos.</li> <li><code>quitaPorDelante(int $num, int $cant): int</code> \u2192 le quita por delante (izquierda) <code>$cant</code> d\u00edgitos.</li> </ul> <p>Para probar las funciones, haz uso tanto de paso de argumentos posicionales como argumentos con nombre.</p>"},{"location":"ut02/ut02ac/#ejercicio-244","title":"Ejercicio 244","text":"<p><code>244biblioteca.php</code>: crea un archivo con funciones para sumar, restar, multiplicar y dividir dos n\u00fameros.</p> <p><code>244arrayFunciones.php</code>: haciendo uso de un array que almacene el nombre de las funciones del archivo anterior, a partir de dos n\u00fameros recibidos por URL, recorre el array e invoca a las funciones de manera din\u00e1mica haciendo uso de funciones variable.</p>"},{"location":"ut02/ut02ac/#ejercicio-245","title":"Ejercicio 245","text":"<p><code>245euros.php</code>: Crea una biblioteca con dos funciones:</p> <ul> <li>peseta2euros: pasa de pesetas a euros</li> <li>euros2pesetas: pasa de euros a pesetas</li> </ul> <p>Cada funci\u00f3n debe recibir dos par\u00e1metros:</p> <ul> <li>La cantidad a transformar</li> <li>La cotizaci\u00f3n, con un par\u00e1metro por defecto con el factor de transformaci\u00f3n.</li> </ul> <p><code>245calculadoraEuros.php</code>: utiliza <code>244euros.php</code> y prueba las funciones pasando tanto cantidades con la cotizaci\u00f3n por defecto, como con nuevas cotizaciones. Recuerda que 1 euro son/eran 166.36 pesetas.</p>"},{"location":"ut02/ut02ac/#ejercicio-246","title":"Ejercicio 246","text":"<p><code>246preparaTiquetCompra.php</code>: A partir de una cantidad de productos, leer el nombre y coste de la cantidad de productos indicados (similar al ejercicio 237, pero esta vez no hace falta crear el formulario con la cantidad, se recibe mediante un par\u00e1metro GET via URL).</p> <p><code>246imprimeTiquetCompra.php</code>: Tras leer los datos del tiquet de compra, enumera en una tabla los productos, con su precio en euros y pesetas, y finalmente, en una \u00faltima fila, totalizar en ambas monedas.</p>"},{"location":"ut02/ut02ac/#ejercicio-247","title":"Ejercicio 247","text":"<p>A partir de los archivos creados en el ejercicio anterior, crea una plantilla mediante includes: <code>247preparaCompra.php</code>: similar a 246preparaTiquetCompra.php, pero separando el encabezado (Supermercado Severo en <code>h1</code>) y el pie (Tu supermercado de confianza) en ficheros externos y referenciando a ellos mediante <code>include</code>.</p> <p></p> <p><code>247listaCompra.php</code>: recibe los datos del anterior, y reutiliza parte de 246imprimeTiquetCompra.php cambiando la tabla por una lista desordenada de los productos junto a su precio.</p>"},{"location":"ut02/ut02ac/#ejercicio-248","title":"Ejercicio 248","text":"<p>Vamos a simular un formulario de acceso:</p> <ul> <li><code>248login.php</code>: el formulario de entrada, que solicita el usuario y contrase\u00f1a.</li> <li><code>248compruebaLogin.php</code>: recibe los datos y comprueba si son correctos (los usuarios se guardan en un array asociativo) pasando el control mediante el uso de <code>include</code> a:</li> <li><code>248ok.php</code>: El usuario introducido es correcto</li> <li><code>248ko.php</code>: El usuario es incorrecto. Informar si ambos est\u00e1n mal o solo la contrase\u00f1a. Volver a mostrar el formulario de acceso.</li> </ul>"},{"location":"ut02/ut02ac/#funciones-predefinidas","title":"Funciones predefinidas","text":"<p>Todos los ejercicios se deben realizar creando nuevas funciones para encapsular el c\u00f3digo. Adem\u00e1s de la propia funci\u00f3n, el ejercicio debe contener c\u00f3digo para poder probarlo.</p>"},{"location":"ut02/ut02ac/#ejercicio-251","title":"Ejercicio 251","text":"<p><code>251fraseImpares.php</code>: Lee una frase y devuelve una nueva con solo los caracteres de las posiciones impares.</p>"},{"location":"ut02/ut02ac/#ejercicio-252","title":"Ejercicio 252","text":"<p><code>252vocales.php</code>: A partir de una frase, devuelve la cantidad de cada una de las vocales, y el total de ellas.</p>"},{"location":"ut02/ut02ac/#ejercicio-253","title":"Ejercicio 253","text":"<p><code>253analizador.php</code>: A partir de una frase con palabras s\u00f3lo separadas por espacios, devolver</p> <ul> <li>Letras totales y cantidad de palabras</li> <li>Una l\u00ednea por cada palabra indicando su tama\u00f1o</li> </ul> <p>A tener en cuenta</p> <p>No se puede usar <code>str_word_count</code>.</p> <p><code>253analizadorWC.php</code>: Investiga que hace la funci\u00f3n <code>str_word_count</code>, y vuelve a hacer el ejercicio.</p>"},{"location":"ut02/ut02ac/#ejercicio-254","title":"Ejercicio 254","text":"<p><code>254cani.php</code>: EsCrIbE uNa FuNcI\u00f3N qUe TrAnSfOrMe UnA cAdEnA eN cAnI.</p>"},{"location":"ut02/ut02ac/#ejercicio-255","title":"Ejercicio 255","text":"<p><code>255palindromo.php</code>: Escribe una funci\u00f3n que devuelva un booleano indicando si una palabra es pal\u00edndroma (se lee igual de izquierda a derecha que de derecha a izquierda, por ejemplo, \u201cligar es ser agil\u201d).</p>"},{"location":"ut02/ut02ac/#ejercicio-256","title":"Ejercicio 256","text":"<p><code>256codificar.php</code>: Utilizando las funciones para trabajar con caracteres, a partir de una cadena y un desplazamiento:</p> <ul> <li>Si el desplazamiento es 1, sustituye la A por B, la B por C, etc.</li> <li>El desplazamiento no puede ser negativo</li> <li>Si se sale del abecedario, debe volver a empezar</li> <li>Hay que respetar los espacios, puntos y comas.</li> </ul>"},{"location":"ut02/ut02ac/#ejercicio-257","title":"Ejercicio 257","text":"<p><code>257filtrado.html</code>: Crea un programa que permita al usuario leer un conjunto de n\u00fameros separados por espacios.</p> <p><code>257filtrado.php</code>: El programa filtrar\u00e1 los n\u00fameros le\u00eddos para volver a mostrar \u00fanicamente los n\u00fameros pares e indicar\u00e1 la cantidad existente.</p> <pre><code>Dame n\u00fameros: 1 4 7 9 23 10 8\nLos 3 n\u00fameros pares son: 4 10 8\n</code></pre>"},{"location":"ut02/ut02ac/#ejercicio-258","title":"Ejercicio 258","text":"<p><code>258investiga.php</code>: Investiga las siguientes funciones de cadena (explica para qu\u00e9 sirven mediante comentarios, y programa un peque\u00f1o ejemplo de cada una de ellas): <code>ucwords</code>, <code>strrev</code>, <code>str_repeat</code> y <code>md5</code>.</p> <p>Los siguientes ejercicios se basan en la generaci\u00f3n de n\u00fameros aleatorios.</p>"},{"location":"ut02/ut02ac/#ejercicio-259","title":"Ejercicio 259","text":"<p><code>259generador.php</code>: Crea una funci\u00f3n que permite generar una letra aleatoria, may\u00fascula o min\u00fascula.</p>"},{"location":"ut02/ut02ac/#ejercicio-260","title":"Ejercicio 260","text":"<p><code>260generaContrasenya.php</code>: Crea una funci\u00f3n que a partir de un tama\u00f1o, genera una contrase\u00f1a aleatoria compuesta de letras y d\u00edgitos de manera aleatoria.</p>"},{"location":"ut02/ut02ac/#ejercicio-261","title":"Ejercicio 261","text":"<p><code>261quinielas.php</code>: Crea las siguientes funciones:</p> <ul> <li><code>quinigol() : array</code> \u2192 Genera un array multidimensional con 6 resultados aleatorios con combinaciones [012M, 012M].</li> <li><code>quiniela() : array</code> \u2192 Genera un array con una combinaci\u00f3n de quiniela generada de manera aleatoria: 14 resultados con 1X2 y el pleno al quince con [012M, 012M].</li> <li><code>tabla(array $quiniela) : string</code>\u2192 transforma un array de una quiniela en una tabla HTML.</li> </ul>"},{"location":"ut02/ut02ac/#otros-ejercicios","title":"Otros ejercicios","text":"<p>Aqu\u00ed entontrar\u00e1s ejercicios gen\u00e9ricos de programaci\u00f3n para usar con cualquier lenguaje. Son gen\u00e9ricos porque te pueden servir con cualquier lenguaje que quieras aprender.</p> <ul> <li>Ejercicios PHP de W3Schools</li> <li>Ejercicios PHP de JavaTpoint</li> </ul>"},{"location":"ut02/ut02ac/#ejercicios-del-concurso-acepta-el-reto","title":"Ejercicios del concurso ACEPTA EL RETO","text":"<p>Estos son 10 ejercicios para resolver de la excelente propuesta Acepta el Reto .</p> <p>Deber\u00edan resolverse en menos de 2h cada uno (como mucho).</p> <p>1) C\u00f3digos de Barras</p> <p>2) Encriptaci\u00f3n de Mensajes</p> <p>3) \u00bfCu\u00e1ntos n\u00fameros capic\u00faa?</p> <p>4) Feliz No Cumplea\u00f1os</p> <p>5) Acepta la Suma</p> <p>6) Sudokus Correctos</p> <p>7) Liga de P\u00e1del</p> <p>8) Escudos del ej\u00e9rcito romano</p> <p>9) Las Cartas del Abuelo</p> <p>10) Man\u00edas tenemos todos</p>"},{"location":"ut03/ut0301/","title":"UT 3. PHP Orientado a Objetos","text":"Resultados de aprendizaje Criterios de evaluaci\u00f3n RA5. Desarrolla aplicaciones Web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio. a) Se han identificado las ventajas de separar la l\u00f3gica de negocio de los aspectos de presentaci\u00f3n de la aplicaci\u00f3n. b) Se han analizado tecnolog\u00edas y mecanismos que permiten realizar esta separaci\u00f3n y sus caracter\u00edsticas principales. c) Se han utilizado objetos y controles en el servidor para generar el aspecto visual de la aplicaci\u00f3n web en el clienteb. d) Se han utilizado formularios generados de forma din\u00e1mica para responder a los eventos de la aplicaci\u00f3n Web. e) Se han escrito aplicaciones Web con mantenimiento de estado y separaci\u00f3n de la l\u00f3gica de negocio. f) Se han aplicado los principios de la programaci\u00f3n orientada a objetos. g) Se ha probado y documentado el c\u00f3digo."},{"location":"ut03/ut0302/","title":"Ut0302","text":"<p>PHP sigue un paradigma de programaci\u00f3n orientada a objetos (POO) basada en clases.</p> <p>Una clase es una plantilla que define las atributos y m\u00e9todos para poder crear objetos.</p> <p>De este manera, un objeto es una instancia de una clase.</p> <p>Tanto los atributos como los m\u00e9todos se definen con una visibilidad (qui\u00e9n puede acceder):</p> <ul> <li>Privado - <code>private</code>: S\u00f3lo puede acceder la propia clase.</li> <li>Protegido - <code>protected</code>: S\u00f3lo puede acceder la propia clase o sus descendientes.</li> <li>P\u00fablico - <code>public</code>: Puede acceder cualquier otra clase.</li> </ul> <p>Para declarar una clase, se utiliza la palabra clave <code>class</code> seguido del nombre de la clase.</p> <p>Para instanciar un objeto a partir de la clase, se utiliza <code>new</code>:</p> <pre><code>&lt;?php\n    class NombreClase {\n    // atributos\n    // y m\u00e9todos\n    }\n\n    $ob = new NombreClase();\n</code></pre> Clases con may\u00fascula <p>Todas las clases empiezan por letra may\u00fascula.</p> <p>Cuando un proyecto crece, es normal modelar las clases mediante UML (\u00bfrecord\u00e1is Entornos de Desarrollo?). La clases se representan mediante un cuadrado, separando el nombre, de los atributos y los m\u00e9todos:</p> Representaci\u00f3n de una clase mediante rect\u00e1ngulo. <p>Una vez que hemos creado un objeto, se utiliza el operador <code>-&gt;</code> para acceder a un atributo o un m\u00e9todo del objeto:</p> <pre><code>$objeto-&gt;atributo;\n$objeto-&gt;m\u00e9todo(par\u00e1metros);\n</code></pre> <p>Si desde, dentro de la clase, queremos acceder a un atributo o m\u00e9todo de la misma clase, utilizaremos la referencia <code>$this</code>;</p> <pre><code>$this-&gt;atributo;\n$this-&gt;m\u00e9todo(par\u00e1metros); \n</code></pre> <p>As\u00ed pues, como ejemplo, codificar\u00edamos una persona en el fichero <code>Persona.php</code> como:</p> <pre><code>&lt;?php\n    class Persona {\n        private string $nombre;\n\n        public function setNombre(string $nombre) {\n            $this-&gt;nombre = $nombre;\n        }\n\n        public function imprimir(){\n            echo $this-&gt;nombre;\n            echo '&lt;br&gt;';\n        }\n    }\n\n    $bruno = new Persona(); // creamos un objeto\n    $bruno-&gt;setNombre(\"Bruno D\u00edaz\");\n    $bruno-&gt;imprimir();\n</code></pre> <p>Aunque se pueden declarar varias clases en el mismo archivo, es una mala pr\u00e1ctica. As\u00ed pues, cada fichero:</p> <ul> <li>Contedr\u00e1 una sola clase, y </li> <li>Se nombrar\u00e1 con el nombre de la clase.</li> </ul> Ejercicios a realizar <ul> <li><code>Ejercicio 301</code></li> </ul>"},{"location":"ut03/ut0303/","title":"Ut0303","text":"<p>Los atributos se definen privados o protegidos (si queremos que las clases heredadas puedan acceder).</p> <p>Para cada atributo, se a\u00f1aden m\u00e9todos p\u00fablicos (getter/setter):</p> <pre><code>public function setAtributo (tipo $param);\n\npublic function getAtributo () : tipo;\n</code></pre> <p>Las constantes se definen p\u00fablicas para que sean accesibles por todos los recursos.</p> <pre><code>&lt;?php\n  class MayorMenor {\n     private int $mayor;\n     private int $menor;\n\n     public function setMayor(int $may) {\n         $this-&gt;mayor = $may;\n     }\n\n     public function setMenor(int $men) {\n         $this-&gt;menor = $men;\n     }\n\n     public function getMayor() : int {\n         return $this-&gt;mayor;\n     }\n\n     public function getMenor() : int {\n         return $this-&gt;menor;\n     }\n  }\n</code></pre>"},{"location":"ut03/ut0303/#1-recibiendo-y-enviando-objetos","title":"1. Recibiendo y enviando objetos","text":"<p>Es recomendable indicarlo en el tipo de par\u00e1metros. Si el objeto puede devolver nulos se pone <code>?</code> delante del nombre de la clase.</p> Objetos por referencia <p>Los objetos que se env\u00edan y reciben como par\u00e1metros siempre se pasan por referencia.</p> <pre><code>&lt;?php\n  function maymen(array $numeros) : ?MayorMenor {\n    $a = max($numeros);\n    $b = min($numeros);\n\n    $result = new MayorMenor();\n    $result-&gt;setMayor($a);\n    $result-&gt;setMenor($b);\n\n    return $result;\n  }\n\n  $resultado =  maymen( [1,76,9,388,41,39,25,97,22] );\n\n  echo \"&lt;br&gt;Mayor: \".$resultado-&gt;getMayor();\n  echo \"&lt;br&gt;Menor: \".$resultado-&gt;getMenor();\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 302</code></li> <li><code>Ejercicio 303</code></li> </ul>"},{"location":"ut03/ut0304/","title":"Ut0304","text":"<p>El constructor de los objetos se define mediante el m\u00e9todo m\u00e1gico <code>__construct</code>. </p> <p>Un solo constructor</p> <p>El m\u00e9todo <code>__constructor</code> puede o no tener par\u00e1metros, pero s\u00f3lo puede haber un \u00fanico constructor.</p> <pre><code>&lt;?php\n  class Persona {\n     private string $nombre;\n\n     public function __construct(string $nom) {\n         $this-&gt;nombre = $nom;\n     }\n\n     public function imprimir(){\n       echo $this-&gt;nombre;\n       echo '&lt;br&gt;';\n     }\n  }\n\n  $bruno = new Persona(\"Bruno D\u00edaz\");\n  $bruno-&gt;imprimir();\n</code></pre>"},{"location":"ut03/ut0304/#1-constructores-en-php8","title":"1. constructores en PHP8","text":"<p>Una de las grandes novedades que ofrece PHP 8 es la simplificaci\u00f3n de los constructores con par\u00e1metros, lo que se conoce como promoci\u00f3n de los atributos del constructor.</p> <p>Para ello, en vez de tener que declarar los atributos como privados o protegidos, y luego dentro del constructor tener que asignar los par\u00e1metros a estos atributos, el propio constructor promociona los atributos.</p> <p>Ve\u00e1moslo mejor con un ejemplo. Imaginemos una clase <code>Punto</code> donde queramos almacenar sus coordenadas:</p> Con PHP7 o anterioresPHP8 <pre><code>&lt;?php\n    class Punto {\n        protected float $x;\n        protected float $y;\n    protected float $z;\n\n        public function __construct(\n                float $x = 0.0,\n                float $y = 0.0,\n                float $z = 0.0\n        ) {\n                $this-&gt;x = $x;\n                $this-&gt;y = $y;\n                $this-&gt;z = $z;\n        }\n    }\n</code></pre> <p>Quedar\u00eda del siguiente modo (mucho m\u00e1s corto, lo que facilita su legibilidad):</p> <pre><code>&lt;?php\n    class Punto {\n        public function __construct( //promocionar los atributos y ponerlos por defecto\n                protected float $x = 0.0,\n                protected float $y = 0.0,\n                protected float $z = 0.0,\n        ) {}\n    }\n</code></pre> <p>El orden importa</p> <p>A la hora de codificar el orden de los elementos debe ser: <pre><code>&lt;?php\n     declare(strict_types=1);\n\n    class NombreClase {\n       // atributos\n\n       // constructor\n\n       // getters - setters\n\n       // resto de m\u00e9todos\n\n    }\n?&gt;\n</code></pre></p> Ejercicios a realizar <ul> <li><code>Ejercicio 304</code></li> <li><code>Ejercicio 305</code></li> </ul>"},{"location":"ut03/ut0305/","title":"Ut0305","text":"<p>Son aquellas que tienen atributos (o propiedades) y/o m\u00e9todos est\u00e1ticos (tambi\u00e9n se conocen como de clase, porque su valor se comparte entre todas las instancias de la misma clase).</p> <p>Se declaran con <code>static</code> y se referencian con <code>::</code>.</p> <ul> <li>Si queremos acceder a un m\u00e9todo est\u00e1tico, se antepone el nombre de la clase como sigue: <code>Producto::nuevoProducto()</code>.</li> <li>Si desde un m\u00e9todo queremos acceder a un atributo est\u00e1tico de la misma clase, se utiliza la referencia <code>self</code> como sigue: <code>self::$numProductos</code>.</li> </ul> <pre><code>&lt;?php\n  class Producto {\n     const IVA = 0.23;\n     private static $numProductos = 0; \n\n     public static function nuevoProducto() {\n        self::$numProductos++;\n     }\n  }\n\n  Producto::nuevoProducto();\n  $impuesto = Producto::IVA;\n</code></pre> <p>Tambi\u00e9n podemos tener clases normales que tengan algun atributo est\u00e1tico:</p> PhpResultado <pre><code>&lt;?php\n  class Producto {\n     const IVA = 0.23;\n     private static $numProductos = 0; \n     private $codigo;\n\n     public function __construct(string $cod) {\n       self::$numProductos++;\n       $this-&gt;codigo = $cod;\n     }\n\n     public function mostrarResumen() : string {\n       return \"El producto \".$this-&gt;codigo.\" es el n\u00famero \".self::$numProductos;\n     }\n  }\n\n$prod1 = new Producto(\"PS5\");\n$prod2 = new Producto(\"XBOX Series X\");\n$prod3 = new Producto(\"Nintendo Switch\");\necho $prod3-&gt;mostrarResumen();\n</code></pre> <pre><code>El producto Nintendo Switch es el n\u00famero 3\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 306</code></li> <li><code>Ejercicio 307</code></li> </ul>"},{"location":"ut03/ut0306/","title":"Ut0306","text":"<p>Al trabajar con clases y objetos, existen un conjunto de funciones ya definidas por el lenguaje que permiten obtener informaci\u00f3n sobre los objetos:</p> <ul> <li><code>instanceof</code>: permite comprobar si un objeto es de una determinada clase.</li> <li><code>get_class</code>: devuelve el nombre de la clase.</li> <li><code>get_declared_class</code>: devuelve un array con los nombres de las clases definidas.</li> <li><code>class_alias</code>: crea un alias.</li> <li><code>class_exists</code> / <code>method_exists</code> / <code>property_exists</code>: devuelve true si la clase/m\u00e9todo/atributo est\u00e1 definida.</li> <li><code>get_class_methods</code> / <code>get_class_vars</code> / <code>get_object_vars</code>: devuelve un array con los nombres de los m\u00e9todos/atributos de una clase / atributos de un objeto que son accesibles desde d\u00f3nde se hace la llamada.</li> </ul> <p>Un ejemplo de estas funciones puede ser el siguiente:</p> <pre><code>&lt;?php\n    $p = new Producto(\"PS5\");\n    if ($p instanceof Producto) {\n       echo \"Es un producto.&lt;br/&gt;\";\n       echo \"La clase es \".get_class($p).\"&lt;br/&gt;\";\n\n       class_alias(\"Producto\", \"Articulo\");\n       $c = new Articulo(\"Nintendo Switch\");\n       echo \"Un articulo es un \".get_class($c).\"&lt;br/&gt;\";\n\n       print_r(get_class_methods(\"Producto\"));\n       echo \"&lt;br/&gt;\";\n       print_r(get_class_vars(\"Producto\"));\n       echo \"&lt;br/&gt;\";\n       print_r(get_object_vars($p));\n       echo \"&lt;br/&gt;\";\n       if (method_exists($p, \"mostrarResumen\")) {\n          echo $p-&gt;mostrarResumen();\n       }\n    }\n</code></pre>"},{"location":"ut03/ut0306/#1-clonado","title":"1. Clonado","text":"<p>Al asignar dos objetos no se copian, se crea una nueva referencia. Si queremos una copia, hay que clonarlo mediante el m\u00e9todo <code>clone(object) : object</code>. PHP nos permite crear un m\u00e9todo que se llamar\u00e1 cuando ejecutemos el operador clone. Este m\u00e9todo puede entre otras cosas inicializar algunos atributos. Si no se define el m\u00e9todo <code>__clone()</code> se har\u00e1 una copia id\u00e9ntica del objeto que le pasamos como par\u00e1metro al operador clone.  Veamos un ejemplo: Crearemos una clase Persona que tenga como atributos su nombre y edad, definiremos los m\u00e9todos para cargar y retornar los valores de sus atributos. Haremos que cuando clonemos un objeto de dicha clase la edad de la persona se fije con cero. <pre><code>&lt;?php\nclass Persona {\n    private $nombre;\n        private $edad;\n\n    public function fijarNombreEdad($nom,$ed) {\n            $this-&gt;nombre=$nom;\n            $this-&gt;edad=$ed;\n        }\n        public function getNombre() {\n                return $this-&gt;nombre;\n        }\n        public function getEdad() {\n                return $this-&gt;edad;\n        }\n        public function __clone() {\n                $this-&gt;edad=0;\n        }\n}\n\n$persona1=new Persona();\n$persona1-&gt;fijarNombreEdad('Juan',20);\n\necho 'Datos de $persona1:';\necho $persona1-&gt;retornarNombre().' - '.$persona1-&gt;retornarEdad().'&lt;br&gt;';\n\n$persona2=clone($persona1);\necho 'Datos de $persona2:';\necho $persona2-&gt;retornarNombre().' - '.$persona2-&gt;retornarEdad().'&lt;br&gt;';\n?&gt;\n</code></pre> El m\u00e9todo <code>__clone</code> se ejecutar\u00e1 cuando llamemos al operador <code>clone</code> para esta clase:</p> <p><pre><code>public function __clone() {\n$this-&gt;edad=0;\n}\n</code></pre> Es decir cuando realicemos la asignaci\u00f3n:</p> <pre><code>$persona2 = clone($persona1);\n</code></pre> <p>inicialmente se hace una copia id\u00e9ntica de $persona1 pero luego se ejecuta el m\u00e9todo __clone con lo que el atributo $edad se modifica.  Si queremos que una clase no pueda clonarse simplemente podemos implementar el siguiente c\u00f3digo en el m\u00e9todo __clone(): <pre><code>public function __clone() {\n    die('No esta permitido clonar objetos de esta clase');\n}\n</code></pre> M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/language.oop5.cloning.php.</p>"},{"location":"ut03/ut0307/","title":"Ut0307","text":"<p>PHP soporta herencia simple, de manera que una clase solo puede heredar de otra clase, no de dos o m\u00e1s clases a la vez. Para ello se utiliza la palabra clave <code>extends</code>. Si queremos que la clase A hereda de la clase B haremos:</p> <pre><code>class A extends B\n</code></pre> <p>La clase hija hereda los atributos y m\u00e9todos p\u00fablicos y protegidos de la clase madre.</p> <p>Cada clase en un archivo</p> <p>Como ya hemos comentado, deber\u00edamos colocar cada clase en un archivo diferente para posteriormente utilizarlo mediante <code>include</code>. En los siguientes ejemplos los hemos colocado juntos para facilitar su legibilidad.</p> <p>Por ejemplo, tenemos una clase <code>Producto</code> y una <code>Tv</code> que hereda de <code>Producto</code>:</p> <pre><code>&lt;?php\n    class Producto {\n        protected $codigo;\n        protected $nombre;\n        protected $nombreCorto;\n        protected $PVP;\n\n        public function mostrarResumen() {\n            echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n        }\n    }\n\n    class Tv extends Producto {\n        protected $pulgadas;\n        protected $tecnologia;\n    }\n</code></pre> <p>Podemos utilizar las siguientes funciones para averiguar si hay relaci\u00f3n entre dos clases:</p> <ul> <li><code>get_parent_class(object): string</code></li> <li><code>is_subclass_of(object, string): bool</code></li> </ul> <pre><code>&lt;?php\n    $t = new Tv();\n    $t-&gt;codigo = 33;\n    if ($t instanceof Producto) {\n        echo $t-&gt;mostrarResumen();\n    }\n\n    $madre = get_parent_class($t);\n    echo \"&lt;br&gt;La clase madre es: \" . $madre;\n    $objetoMadre = new $madre;\n    echo $objetoMadre-&gt;mostrarResumen();\n\n    if (is_subclass_of($t, 'Producto')) {\n        echo \"&lt;br&gt;Soy una hija de Producto\";\n    }\n</code></pre>"},{"location":"ut03/ut0307/#1-sobreescribir-metodos","title":"1. Sobreescribir m\u00e9todos","text":"<p>Podemos crear m\u00e9todos en las clase hijas con el mismo nombre que la clase madre, cambiando su comportamiento. Para invocar a los m\u00e9todos de la clase madre: <code>parent::nombreMetodo()</code>.</p> <pre><code>&lt;?php\nclass Tv extends Producto {\n   public $pulgadas;\n   public $tecnologia;\n\n   public function mostrarResumen() {\n      parent::mostrarResumen();\n      echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n   }\n}\n</code></pre>"},{"location":"ut03/ut0307/#2-constructor-en-clases-hijas","title":"2. Constructor en clases hijas","text":"<p>En cambio, si lo definimos en la clase hija, hemos de invocar al de la clase madre de manera expl\u00edcita.</p> PHP 7PHP 8 <pre><code>&lt;?php\n  class Producto {\n    public string $codigo;\n\n    public function __construct(string $codigo) {\n      $this-&gt;codigo = $codigo;\n    }\n\n    public function mostrarResumen() {\n      echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }\n  }\n\n  class Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n\n    public function __construct(string $codigo, int $pulgadas, string $tecnologia) {\n      parent::__construct($codigo);\n      $this-&gt;pulgadas = $pulgadas;\n      $this-&gt;tecnologia = $tecnologia;\n    }\n\n    public function mostrarResumen() {\n      parent::mostrarResumen();\n      echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n</code></pre> <pre><code>&lt;?php\n    class Producto {\n        public function __construct(private string $codigo) { }\n\n        public function mostrarResumen() {\n            echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n        }\n    }\n\n    class Tv extends Producto {\n\n        public function __construct(\n            string $codigo,\n            private int $pulgadas,\n            private string $tecnologia)\n        {\n            parent::__construct($codigo);\n        }\n\n        public function mostrarResumen() {\n            parent::mostrarResumen();\n            echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n        }\n    }\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 308</code></li> <li><code>Ejercicio 309</code></li> <li><code>Ejercicio 310</code></li> <li><code>Ejercicio 311</code></li> </ul>"},{"location":"ut03/ut0308/","title":"Ut0308","text":"<p>Las clases abstractas obligan a heredar de estas clases, ya que no se permite su instanciaci\u00f3n; s\u00ed se permite a las clases heredadas (siempre que no est\u00e9n tambi\u00e9n definidas como abstractas). Se define mediante <code>abstract class NombreClase {</code>.</p> <p>Una clase abstracta puede contener atributos y m\u00e9todos no-abstractos, y/o m\u00e9todos abstractos.</p> <pre><code>&lt;?php\n  // Clase abstracta\n  abstract class Producto {\n     private $codigo;\n\n     public function getCodigo() : string {\n        return $this-&gt;codigo;\n     }\n\n     // M\u00e9todo abstracto\n     abstract public function mostrarResumen();\n  }\n</code></pre> <p>Cuando una clase hereda de una clase abstracta, obligat\u00f3riamente debe implementar los m\u00e9todos que tiene la clase madre marcados como abstractos.</p> <pre><code>&lt;?php\n  class Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n\n    public function mostrarResumen() { //obligado a implementarlo\n      echo \"&lt;p&gt;C\u00f3digo \".$this-&gt;getCodigo().\"&lt;/p&gt;\";\n      echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n  }\n\n  $t = new Tv();\n  echo $t-&gt;getCodigo();\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 312</code></li> <li><code>Ejercicio 313</code></li> <li><code>Ejercicio 314</code></li> </ul>"},{"location":"ut03/ut0309/","title":"Ut0309","text":"<p>Son clases opuestas a abstractas, ya que evitan que se pueda heredar una clase o m\u00e9todo para sobreescribirlo. Se define mediante <code>final class NombreClase {</code>.</p> <pre><code>&lt;?php\n  class Producto {\n    private $codigo;\n\n    public function getCodigo() : string {\n        return $this-&gt;codigo;\n    }\n\n    final public function mostrarResumen() : string {\n        return \"Producto \".$this-&gt;codigo;\n    }\n  }\n\n  // No podremos heredar de Microondas\n  final class Microondas extends Producto {\n    private $potencia;\n\n    public function getPotencia() : int {\n        return $this-&gt;potencia;\n    }\n\n    // No podemos implementar mostrarResumen()\n  }\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 315</code></li> </ul>"},{"location":"ut03/ut0310/","title":"Ut0310","text":"<p>Permite definir un contrato con las firmas de los m\u00e9todos a cumplir. As\u00ed pues, s\u00f3lo contiene declaraciones de funciones y todas deben ser p\u00fablicas.</p> <p>Se declaran con la palabra clave <code>interface</code> y luego las clases que cumplan el contrato lo realizan mediante la palabra clave <code>implements</code>.</p> <pre><code>&lt;?php\n    interface Nombreable {\n        // declaraci\u00f3n de funciones\n    }\n    class NombreClase implements NombreInterfaz {\n        // c\u00f3digo de la clase\n</code></pre> <p>Se permite la herencia de interfaces. Adem\u00e1s, una clase puede implementar varios interfaces (en este caso, s\u00ed soporta la herecia m\u00faltiple, pero s\u00f3lo de interfaces).</p> <pre><code>&lt;?php\n  interface Mostrable {\n     public function mostrarResumen() : string;\n  }\n\n  interface MostrableTodo extends Mostrable {\n     public function mostrarTodo() : string;\n  }\n\n  interface Facturable {\n     public function generarFactura() : string;\n  }\n\n  class Producto implements MostrableTodo, Facturable {\n     // Implementaciones de los m\u00e9todos\n     // Obligatoriamente deber\u00e1 implementar:\n     //    - public function mostrarResumen, \n     //    - public function mostrarTodo y \n     //    - public function generarFactura\n  }\n</code></pre> Actividad Proyecto Videoclub a realizar <p>Realizar la actividad Proyecto Videoclub: - <code>Ejercicios 321</code> - <code>Ejercicios 322</code> - <code>Ejercicios 323</code> - <code>Ejercicios 324</code> - <code>Ejercicios 325</code> - <code>Ejercicios 326</code> - <code>Ejercicios 327</code> - <code>Ejercicios 328</code> - <code>Ejercicios 329</code> - <code>Ejercicios 330</code></p>"},{"location":"ut03/ut0311/","title":"Ut0311","text":"<p>Sigue el planteamiento de la programaci\u00f3n funcional, y tambi\u00e9n se conoce como method chaining. Plantea que sobre un objeto se realizan varias llamadas; o sea, consiste en llamar varios m\u00e9todos de un objeto en una misma l\u00ednea, basta con a\u00f1adir al final de cada m\u00e9todo: <code>return $this;</code> Con el siguiente ejemplo se entiende f\u00e1cilmente.</p> <p>Para facilitarlo, vamos a modificar todos sus m\u00e9todos mutadores (que modifican datos, setters, ...) para que devuelvan una referencia a <code>$this</code>:</p> PhpResultado <pre><code>&lt;?php\nclass Coche {\n        public function lavar(){\n            echo \"Coche lavado.\\n\";\n                return $this;\n        }\n\n        public function encerar(){\n                echo \"Coche encerado.\\n\";\n                return $this;\n        }\n}\n\n// ejemplo llamada a los m\u00e9todos encadenados    \n$coche = new Coche;\n$coche-&gt;lavar()-&gt;encerar();\n</code></pre> <pre><code>// mostrar\u00e1\nCoche lavado.\nCoche encerado.\n</code></pre> <p>Otro ejemplo:</p> <pre><code>&lt;?php\n  class Libro {\n    private string $nombre;\n    private string $autor;\n\n    public function getNombre() : string {\n        return $this-&gt;nombre;\n    }\n    public function setNombre(string $nombre) : Libro { \n        $this-&gt;nombre = $nombre;\n        return $this;\n    }\n\n    public function getAutor() : string {\n        return $this-&gt;autor;\n    }\n    public function setAutor(string $autor) : Libro {\n        $this-&gt;autor = $autor;\n        return $this;\n    }\n\n    public function __toString() : string {\n        return $this-&gt;nombre.\" de \".$this-&gt;autor;\n    }\n  }\n</code></pre>"},{"location":"ut03/ut0312/","title":"Ut0312","text":"<p>Todas las clases PHP ofrecen un conjunto de m\u00e9todos, tambi\u00e9n conocidos como magic methods que se pueden sobreescribir para sustituir su comportamiento. Algunos de ellos ya los hemos utilizado.</p> <p>Ante cualquier duda, es conveniente consultar la documentaci\u00f3n oficial.</p> <p>Los m\u00e1s destacables son:</p> <ul> <li><code>__construct()</code></li> <li><code>__destruct()</code> \u2192 se invoca al perder la referencia. Se utiliza para cerrar una conexi\u00f3n a la BD, cerrar un fichero, ...</li> <li><code>__toString()</code> \u2192 representaci\u00f3n del objeto como cadena. Es decir, cuando hacemos echo $objeto se ejecuta autom\u00e1ticamente este m\u00e9todo.</li> <li><code>get(atributo)</code>, <code>set(atributo, valor)</code> \u2192 Permitir\u00eda acceder a los atributos privados, aunque siempre es m\u00e1s legible/mantenible codificar los getter/setter.</li> <li><code>__isset(atributo)</code>, <code>__unset(atributo)</code> \u2192 Permite averiguar o quitar el valor a un atributo.</li> <li><code>sleep()</code>, <code>wakeup()</code> \u2192 Se ejecutan al recuperar (unserialize^) o almacenar un objeto que se serializa (serialize), y se utilizan para permite definir qu\u00e9 atributos se serializan.</li> <li><code>call()</code>, <code>callStatic()</code> \u2192 Se ejecutan al llamar a un m\u00e9todo que no es p\u00fablico. Permiten sobrecargar m\u00e9todos.</li> </ul>"},{"location":"ut03/ut0313/","title":"Ut0313","text":"<p>Desde PHP 5.3 y tambi\u00e9n conocidos como Namespaces, permiten organizar las clases, interfaces, funciones y constantes en un \u00e1mbito separado. Esto evita colisiones o conflictos de nombres entre distintos elementos, como ocurre en otros lenguajes (por ejemplo, los paquetes en Java).</p>"},{"location":"ut03/ut0313/#1-por-que-usar-namespaces","title":"1. Por qu\u00e9 usar <code>namespaces</code>","text":"Ejemplo de por qu\u00e9 usar <code>namespaces</code> <p>Imag\u00ednate que tenemos el siguiente c\u00f3digo: <pre><code>&lt;?php\n    class Producto {\n        public $nombre;\n    }\n\n    class Producto {\n        public $nombre;\n    }\n</code></pre></p> <p>Este c\u00f3digo dar\u00eda error porque existen dos clases con el mismo nombre. Esto provoca un conflicto y PHP no sabe cu\u00e1l de las dos clases utilizar. Con <code>namespaces</code> el ejemplo anterior podr\u00eda quedar:</p> <p><pre><code>&lt;?php\n    namespace Tienda\\Alimentos;\n    class Producto {\n        public $nombre;\n    }\n\n    namespace Tienda\\Electronica;\n    class Producto {\n        public $nombre;\n    }\n</code></pre> Aqu\u00ed, al estar en diferentes namespaces, ambas clases <code>Producto</code> pueden coexistir sin problemas.</p> <p>Los namespaces permiten:</p> <ul> <li>Evitar conflictos de nombre al reutilizar librer\u00edas o frameworks.</li> <li>Mejorar la estructura y organizaci\u00f3n de tu c\u00f3digo.</li> <li>Facilitar la colaboraci\u00f3n en proyectos grandes.</li> </ul> <p>Recomendaci\u00f3n</p> <p>Mant\u00e9n un solo namespace por archivo y organiza los archivos en una estructura de carpetas que refleje los diferentes niveles de los namespaces, similar a c\u00f3mo se organizan los paquetes en Java.</p>"},{"location":"ut03/ut0313/#2-declaracion-de-un-namespace","title":"2. Declaraci\u00f3n de un namespace","text":"<p>Un namespace se declara en la primera l\u00ednea del archivo usando la palabra clave <code>namespace</code> seguida del nombre del espacio de nombres. Los niveles de un namespace se separan con barras invertidas <code>\\</code>.</p> Ejemplo <code>namespace</code> <p>En el siguiente ejemplo, la clase <code>Producto</code> y la constante <code>IVA</code> pertenecen al namespace <code>Dwes\\Ejemplos</code>.</p> <pre><code>&lt;?php\n    namespace Dwes\\Ejemplos;\n\n    const IVA = 0.21;\n\n    class Producto {\n        public $nombre;\n\n        public function muestra(): void {\n            echo \"&lt;p&gt;Producto: \" . $this-&gt;nombre . \"&lt;/p&gt;\";\n        }\n    }\n</code></pre>"},{"location":"ut03/ut0313/#3-tipos-de-acceso-a-los-recursos-en-namespaces","title":"3. Tipos de acceso a los recursos en namespaces","text":"<p>Para acceder a recursos dentro de un namespace, es necesario incluirlos primero en el archivo, usando <code>include</code> o <code>require</code>. Dependiendo de la ubicaci\u00f3n del recurso, hay tres tipos de acceso:</p> <ul> <li>Sin cualificar: Se refiere directamente al recurso si est\u00e1 en el mismo namespace.</li> </ul> Ejemplo acceso sin cualificar <pre><code>&lt;?php\nnamespace MiNamespace;\n\nclass MiClase {\n    public function mostrar() {\n        echo \"Esto es MiClase\";\n    }\n}\n\n// Como MiClase est\u00e1 en el mismo namespace (MiNamespace),\n// puedo crear una instancia sin especificar el namespace completo.\n$miObjeto = new MiClase();  // Acceso sin cualificar\n$miObjeto-&gt;mostrar();\n</code></pre> <ul> <li>Cualificado: Usa una ruta relativa dentro del mismo namespace o subnamespace (<code>rutaRelativa\\recurso</code>)\u2192 no hace falta poner el namespace completo.</li> </ul> Ejemplo acceso cualificado <pre><code>&lt;?php\nnamespace MiNamespace\\SubNamespace;\n\nclass ClaseSecundaria {\n    public function mostrar() {\n        echo \"Esto es ClaseSecundaria en SubNamespace\";\n    }\n}\n\nnamespace MiNamespace;\n\nclass MiClase {\n    public function mostrar() {\n        echo \"Esto es MiClase en MiNamespace\";\n    }\n}\n\n// Como ClaseSecundaria est\u00e1 en un subnamespace de MiNamespace,\n// puedo usar el nombre cualificado sin poner la barra inicial.\n$secundaria = new SubNamespace\\ClaseSecundaria();  // Acceso cualificado\n$secundaria-&gt;mostrar();\n</code></pre> <ul> <li>Totalmente cualificado: Usa la ruta completa desde la ra\u00edz del namespace ( <code>\\rutaAbsoluta\\recurso</code>)     ???+example \"Ejemplo acceso totalmente cualificado\"     <pre><code>&lt;?php\nnamespace OtroNamespace;\n\nclass ClaseExterna {\n    public function mostrar() {\n        echo \"Esto es ClaseExterna en OtroNamespace\";\n    }\n}\n\nnamespace MiNamespace;\n\nclass MiClase {\n    public function mostrar() {\n        echo \"Esto es MiClase en MiNamespace\";\n    }\n}\n\n// Como ClaseExterna est\u00e1 en un namespace completamente diferente,\n// necesitamos usar el namespace completo y comenzar con una barra invertida.\n$externa = new \\OtroNamespace\\ClaseExterna();  // Acceso totalmente cualificado\n$externa-&gt;mostrar();\n</code></pre></li> </ul> Ejemplo de acceso <pre><code>&lt;?php\nnamespace Dwes\\Ejemplos;\n\ninclude_once(\"Producto.php\");\n\n// acceso sin cualificar (est\u00e1 en el mismo namespace)\necho IVA;   // imprime 0,21\n\n// acceso cualificado (error si Utilidades no existe)\necho Utilidades\\IVA;       // Error, Utilidades no est\u00e1 definido\n\n// acceso totalmente cualificado\necho \\Dwes\\Ejemplos\\IVA; // Correcto\n\n$p1 = new Producto();\n// busca la clase en el mismo namespace y\n// encuentra \\Dwes\\Ejemplos\\Producto\n\n$p2 = new Model\\Producto();\n// dar\u00eda error, no existe el namespace Model.\n// Est\u00e1 buscando \\Dwes\\Ejemplos\\Model\\Producto\n\n$p3 = new \\Dwes\\Ejemplos\\Producto();\n// \\Dwes\\Ejemplos\\Producto\n</code></pre>"},{"location":"ut03/ut0313/#31-resumen-de-los-tipos-de-acceso","title":"3.1. Resumen de los Tipos de Acceso","text":"Tipo de Acceso Ejemplo de Uso Descripci\u00f3n Sin cualificar <code>new MiClase();</code> Se usa cuando el recurso est\u00e1 en el mismo namespace. Cualificado <code>new SubNamespace\\ClaseSecundaria();</code> Se usa una ruta relativa si el recurso est\u00e1 en un subnamespace o en el mismo namespace. Totalmente cualificado <code>new \\OtroNamespace\\ClaseExterna();</code> Se usa la ruta completa desde la ra\u00edz del namespace, con una barra inicial <code>\\</code>. <p>Puedes echar un vistazo</p> <p>video.</p>"},{"location":"ut03/ut0313/#32-use","title":"3.2. <code>use</code>","text":"<p>Para evitar la necesidad de escribir rutas cualificadas o totalmente cualificadas constantemente, PHP permite declarar el uso de recursos de otros namespaces mediante la palabra clave <code>use</code>, similar al <code>import</code> en Java.</p>"},{"location":"ut03/ut0313/#33-formas-de-utilizar-use","title":"3.3. Formas de utilizar <code>use</code>","text":"<ul> <li>Usar constantes: <code>use const nombreCualificadoConstante</code></li> <li>Usar funciones: <code>use function nombreCualificadoFuncion</code></li> <li>Usar clases: <code>use nombreCualificadoClase</code></li> <li>Alias de la clase: <code>use nombreCualificadoClase as NuevoNombre</code> (renombrar para evitar conflictos).</li> </ul> Ejemplo de <code>use</code> <p>Si queremos utilizar la clase <code>\\Dwes\\Ejemplos\\Producto</code> en un archivo en la ra\u00edz, por ejemplo <code>inicio.php</code>, lo har\u00edamos as\u00ed:</p> <pre><code>&lt;?php\n    include_once(\"Dwes\\Ejemplo\\Producto.php\");\n\n    use const Dwes\\Ejemplos\\IVA;  // uso de constante\n    use \\Dwes\\Ejemplos\\Producto;  // uso de clase\n\n    echo IVA;  // imprime 0,21\n    $p1 = new Producto();  // no se necesita la ruta completa, gracias a `use`\n</code></pre> Ejemplo de alias <pre><code>&lt;?php\n    use App\\Modelos\\Producto as ProductoAlimentos;\n    use Tienda\\Electronica\\Producto as ProductoElectronico;\n\n    $p1 = new ProductoAlimentos();\n    $p2 = new ProductoElectronico();\n</code></pre> <p>Uso de <code>use</code></p> <p>El uso de <code>use</code> solo es necesario para acceder a recursos que est\u00e1n en un namespace diferente. Si est\u00e1s trabajando dentro del mismo namespace, no es necesario.</p> <p>Puedes echar un vistazo</p> <p>video</p>"},{"location":"ut03/ut0313/#4-organizacion-de-proyectos-con-namespaces","title":"4. Organizaci\u00f3n de proyectos con namespaces","text":"<p>A medida que un proyecto crece, es fundamental organizar el c\u00f3digo fuente de forma estructurada. Una recomendaci\u00f3n com\u00fan es colocar los archivos que interact\u00faan con el navegador en la ra\u00edz del proyecto y organizar las clases dentro de un namespace en una carpeta espec\u00edfica, como <code>src</code> o <code>app</code>.</p> <p>Reglas de organizaci\u00f3n:</p> <ol> <li>Un recurso por archivo: Cada clase, funci\u00f3n o constante debe estar en su propio archivo.</li> <li>Incluir namespaces: Declara el namespace en la primera l\u00ednea del archivo (si no est\u00e1 en el directorio ra\u00edz).</li> <li>Usar <code>include_once</code>: Para cargar los recursos necesarios (clases, interfaces, etc.).</li> <li>Declarar dependencias: Cada recurso debe incluir las dependencias que necesita, como clases base o interfaces.</li> <li>Uso de <code>use</code>: Si el recurso est\u00e1 en un namespace diferente, utiliza <code>use</code> para facilitar el acceso sin cualificar.</li> </ol> Ejemplo de organizaci\u00f3n de archivos <pre><code>/index.php\n/app/Modelos/Usuario.php\n/app/Modelos/Producto.php\n</code></pre> <p>Cada archivo debe incluir su namespace correspondiente:</p> Ejemplo de estructura <pre><code>    &lt;?php\n    // /app/Modelos/Usuario.php         \n    namespace App\\Modelos;\n\n    class Usuario {\n        public $nombre;\n    }\n</code></pre> <pre><code>    &lt;?php\n    // /app/Modelos/Producto.php\n    namespace App\\Modelos;\n\n    class Producto {\n        public $nombre\n    }\n</code></pre> Ejemplo de acceso a clases <pre><code>&lt;?php\n    include_once \"app/Modelos/Usuario.php\";\n    include_once \"app/Modelos/Producto.php\";\n\n    use App\\Modelos\\Usuario;\n    use App\\Modelos\\Producto;\n\n    $usuario = new Usuario();\n    $producto = new Producto();\n</code></pre>"},{"location":"ut03/ut0313/#5-autoload-carga-automatica-de-clases","title":"5. Autoload: carga autom\u00e1tica de clases","text":"<p>Para evitar la necesidad de usar <code>include_once</code> o <code>require</code> en cada archivo, PHP ofrece el autoload, que permite cargar clases autom\u00e1ticamente cuando son necesarias. Esto se hace mediante la funci\u00f3n <code>spl_autoload_register</code>.</p> Ejemplo de autoload <pre><code>&lt;?php\n    spl_autoload_register(function($nombreClase) {\n        include_once $nombreClase . '.php';\n    });\n\n    $producto = new App\\Modelos\\Producto();  // Autocarga Producto.php\n</code></pre>"},{"location":"ut03/ut0313/#51-organizacion-con-autoload","title":"5.1. Organizaci\u00f3n con autoload","text":"<p>Y \u00bfc\u00f3mo organizamos ahora nuestro c\u00f3digo aprovechando el autoload?</p> Ordenar clases en una carpeta (app). <p>Una buena pr\u00e1ctica es organizar todas las clases dentro de una carpeta como <code>app</code>. Luego, el autoload se configura para buscar clases dentro de esta carpeta:</p> Ejemplo de estructura de directorios <pre><code>/index.php\n/app/Modelos/Usuario.php\n/app/Modelos/Producto.php\n/autoload.php\n</code></pre> Ejemplo de autoload en el archivo  <code>autoload.php</code> <pre><code>&lt;?php\n    spl_autoload_register(function($nombreClase) {\n        $ruta = __DIR__ . \"/\" . $nombreClase . '.php';\n        $ruta = str_replace(\"\\\\\", \"/\", $ruta);\n\n        // Verifica si el archivo existe antes de incluirlo\n        if (file_exists($ruta)) {\n            include_once $ruta;\n        } else {\n            die(\"No se pudo cargar la clase: $nombreClase\");\n        }\n    });\n</code></pre> Ejemplo de uso de autoload en el archivo principal <pre><code>&lt;?php\n    // /index.php\n    include_once \"autoload.php\";\n\n    use App\\Modelos\\Producto;\n    use App\\Modelos\\Usuario;\n\n    $usuario = new Usuario();\n    $producto = new Producto();\n</code></pre> <p>Puedes echar un vistazo</p> <p>Aqu\u00ed encontramos un peque\u00f1o video en el que https://www.youtube.com/watch?v=lP1hbkNA2uc.</p>"},{"location":"ut03/ut0314/","title":"Ut0314","text":"<p>PHP clasifica los errores que ocurren en diferentes niveles. Cada nivel se identifica con una constante. Por ejemplo:</p> <ul> <li><code>E_ERROR</code>: errores fatales, no recuperables. Se interrumpe el script.</li> <li><code>E_WARNING</code>: advertencias en tiempo de ejecuci\u00f3n. El script no se interrumpe.</li> <li><code>E_NOTICE</code>: avisos en tiempo de ejecuci\u00f3n.</li> </ul> <p>Listado completo de constantes de error</p> <p>Pod\u00e9is comprobar el listado completo de constantes de https://www.php.net/manual/es/errorfunc.constants.php.</p> <p>Para la configuraci\u00f3n de los errores podemos hacerlo de dos formas:</p> <p>A nivel de <code>php.ini</code>:     - <code>error_reporting</code>: indica los niveles de errores a notificar. <code>error_reporting = E_ALL &amp; ~E_NOTICE</code> -&gt; Todos los errores menos los avisos en tiempo de ejecuci\u00f3n.     - <code>display_errors</code>: indica si mostrar o no los errores por pantalla. En entornos de producci\u00f3n es com\u00fan ponerlo a <code>off</code>.  Mediante c\u00f3digo con las siguientes funciones:     - <code>error_reporting(codigo)</code> -&gt; Controla qu\u00e9 errores notificar.     - <code>set_error_handler(nombreManejador)</code> -&gt; Indica qu\u00e9 funci\u00f3n se invocar\u00e1 cada vez que se encuentre un error. El manejador recibe como par\u00e1metros el nivel del error y el mensaje.</p> EjemploResultado <p>Funciones para la gesti\u00f3n de errores:</p> <pre><code>&lt;?php\n    error_reporting(E_ALL &amp; ~E_NOTICE &amp; ~E_WARNING);\n    $resultado = $dividendo / $divisor;\n\n    error_reporting(E_ALL &amp; ~E_NOTICE);\n    set_error_handler(\"miManejadorErrores\");\n    $resultado = $dividendo / $divisor;\n\n    restore_error_handler(); // restaura el manejador de errores predeterminado de PHP\n\n    function miManejadorErrores($nivel, $mensaje) {\n        switch($nivel) {\n            case E_WARNING:\n                echo \"&lt;strong&gt;Warning&lt;/strong&gt;: $mensaje.&lt;br/&gt;\";\n                break;\n            default:\n                echo \"Error de tipo no especificado: $mensaje.&lt;br/&gt;\";\n        }\n    }\n</code></pre> <p>Consola:</p> <pre><code>Error de tipo no especificado: Undefined variable: dividendo.\nError de tipo no especificado: Undefined variable: divisor.\nError de tipo Warning: Division by zero.\n</code></pre>"},{"location":"ut03/ut0315/","title":"Ut0315","text":"<p>La gesti\u00f3n de excepciones forma parte desde PHP 5. Su funcionamiento es similar a Java, haciendo uso de un bloque <code>try</code> / <code>catch</code> / <code>finally</code>. Si detectamos una situaci\u00f3n an\u00f3mala y queremos lanzar una excepci\u00f3n, deberemos realizar <code>throw new Exception</code> (adjuntando el mensaje que lo ha provocado).</p> <pre><code>&lt;?php\n    try {\n        if ($divisor == 0) {\n            throw new Exception(\"Divisi\u00f3n por cero.\");\n        }\n        $resultado = $dividendo / $divisor;\n    } catch (Exception $e) {\n        echo \"Se ha producido el siguiente error: \".$e-&gt;getMessage();\n    }\n</code></pre> <p>La clase <code>Exception</code> es la clase madre de todas las excepciones. Su constructor recibe <code>mensaje [, codigoError][, excepcionPrevia]</code>.</p> <p>A partir de un objeto <code>Exception</code>, podemos acceder a los m\u00e9todos <code>getMessage()</code> y <code>getCode()</code> para obtener el mensaje y el c\u00f3digo de error de la excepci\u00f3n capturada.</p> <p>El propio lenguaje ofrece un conjunto de excepciones ya definidas, las cuales podemos capturar (y lanzar desde PHP 7). Se recomienda su consulta en la documentaci\u00f3n oficial.</p>"},{"location":"ut03/ut0315/#1-creando-excepciones","title":"1. Creando excepciones","text":"<p>Para crear una excepci\u00f3n, la forma m\u00e1s corta es crear una clase que \u00fanicamente herede de <code>Exception</code>.</p> <pre><code>&lt;?php\n  class HolaExcepcion extends Exception {}\n</code></pre> <p>Si queremos, y es recomendable dependiendo de los requisitos, podemos sobrecargar los m\u00e9todos m\u00e1gicos, por ejemplo, sobrecargando el constructor y llamando al constructor de la clase madre, o rescribir el m\u00e9todo <code>__toString</code> para cambiar su mensaje:</p> <pre><code>&lt;?php\n  class MiExcepcion extends Exception {\n    public function __construct($msj, $codigo = 0, Exception $previa = null) {\n      // c\u00f3digo propio\n      parent::__construct($msj, $codigo, $previa);\n    }\n    public function __toString() {\n      return __CLASS__ . \": [{$this-&gt;code}]: {$this-&gt;message}\\n\";\n    }\n    public function miFuncion() {\n      echo \"Una funci\u00f3n personalizada para este tipo de excepci\u00f3n\\n\";\n    }\n  }\n</code></pre> <p>Si definimos una excepci\u00f3n de aplicaci\u00f3n dentro de un namespace, cuando referenciemos a <code>Exception</code>, deberemos referenciarla mediante su nombre totalmente cualificado (<code>\\Exception</code>), o utilizando <code>use</code>:</p> Mediante nombre totalmente cualificadoMediante use <pre><code>&lt;?php\n    namespace \\Dwes\\Ejemplos;\n\n    class AppExcepcion extends \\Exception {}\n</code></pre> <pre><code>&lt;?php\n    namespace \\Dwes\\Ejemplos;\n\n    use Exception;\n\n    class AppExcepcion extends Exception {}\n</code></pre>"},{"location":"ut03/ut0315/#2-excepciones-multiples","title":"2. Excepciones m\u00faltiples","text":"<p>Se pueden usar excepciones m\u00faltiples para comprobar diferentes condiciones. A la hora de capturarlas, se hace de m\u00e1s espec\u00edfica a m\u00e1s general.</p> <pre><code>&lt;?php\n    $email = \"ejemplo@ejemplo.com\";\n    try {\n      // Comprueba si el email es v\u00e1lido\n      if(filter_var($email, FILTER_VALIDATE_EMAIL) === FALSE) {\n         throw new MiExcepcion($email);\n      }\n      // Comprueba la palabra ejemplo en la direcci\u00f3n email\n      if(strpos($email, \"ejemplo\") !== FALSE) {\n         throw new Exception(\"$email es un email de ejemplo no v\u00e1lido\");\n      }\n    } catch (MiExcepcion $e) {\n        echo $e-&gt;miFuncion();\n    } catch(Exception $e) {\n        echo $e-&gt;getMessage();\n    }\n</code></pre> Autoevaluaci\u00f3n <p>Qu\u00e9 pasar\u00eda al ejecutar el siguiente c\u00f3digo?</p> <pre><code>&lt;?php \n    class MainException extends Exception {}\n    class SubException extends MainException {}\n\n    try {\n        throw new SubException(\"Lanzada SubException\");\n    } catch (MainException $e) {\n        echo \"Capturada MainException \" . $e-&gt;getMessage();\n    } catch (SubException $e) {\n        echo \"Capturada SubException \" . $e-&gt;getMessage();\n    } catch (Exception $e) {\n        echo \"Capturada Exception \" . $e-&gt;getMessage();\n    }\n</code></pre> <p>Si en el mismo <code>catch</code> queremos capturar varias excepciones, hemos de utilizar el operador <code>|</code> :</p> <pre><code>&lt;?php\n    class MainException extends Exception {}\n    class SubException extends MainException {}\n\n    try {\n        throw new SubException(\"Lanzada SubException\");\n    } catch (MainException | SubException $e ) {\n        echo \"Capturada Exception \" . $e-&gt;getMessage();\n    }\n</code></pre> <p>Desde PHP 7, existe el tipo <code>Throwable</code>, el cual es un interfaz que implementan tanto los errores como las excepciones, y nos permite capturar los dos tipos a la vez:</p> <pre><code>&lt;?php\n    try {\n        // tu codigo\n    } catch (Throwable $e) {\n        echo 'Forma de capturar errores y excepciones a la vez';\n    }\n</code></pre> <p>Si s\u00f3lo queremos capturar los errores fatales, podemos hacer uso de la clase <code>Error</code>:</p> <pre><code>&lt;?php\n    try {\n        // Genera una notificaci\u00f3n que no se captura\n        echo $variableNoAsignada;\n        // Error fatal que se captura\n        funcionQueNoExiste();\n    } catch (Error $e) {\n        echo \"Error capturado: \" . $e-&gt;getMessage();\n    }\n</code></pre>"},{"location":"ut03/ut0315/#3-relanzar-excepciones","title":"3. Relanzar excepciones","text":"<p>En las aplicaciones reales, es muy com\u00fan capturar una excepci\u00f3n de sistema y lanzar una de aplicaci\u00f3n que hemos definido nosotros. Tambi\u00e9n podemos lanzar las excepciones sin necesidad de estar dentro de un <code>try</code> / <code>catch</code>.</p> <pre><code>&lt;?php\n    class AppException extends Exception {}\n\n    try {\n        // C\u00f3digo de negocio que falla\n    } catch (Exception $e) {\n        throw new AppException(\"AppException: \".$e-&gt;getMessage(), $e-&gt;getCode(), $e);\n    }\n</code></pre>"},{"location":"ut03/ut0316/","title":"Ut0316","text":"<p>Standard PHP Library es el conjunto de funciones y utilidades que ofrece PHP, como:</p> <ul> <li>Estructuras de datos:</li> <li>pila, cola, cola de prioridad, lista doblemente enlazada, etc...</li> <li>Conjunto de iteradores dise\u00f1ados para recorrer estructuras agregadas:</li> <li>arrays, resultados de bases de datos, \u00e1rboles XML, listados de directorios, etc.</li> </ul> <p>Pod\u00e9is consultar la documentaci\u00f3n en https://www.php.net/manual/es/book.spl.php o ver algunos ejemplos en https://diego.com.es/tutorial-de-la-libreria-spl-de-php.</p> <p>Tambi\u00e9n define un conjunto de excepciones que podemos utilizar para que las lancen nuestras aplicaciones:</p> <ul> <li><code>LogicException (extends Exception)</code></li> <li><code>BadFunctionCallException</code></li> <li><code>BadMethodCallException</code></li> <li><code>DomainException</code></li> <li><code>InvalidArgumentException</code></li> <li><code>LengthException</code></li> <li><code>OutOfRangeException</code></li> <li><code>RuntimeException (extends Exception)</code></li> <li><code>OutOfBoundsException</code></li> <li><code>OverflowException</code></li> <li><code>RangeException</code></li> <li><code>UnderflowException</code></li> <li><code>UnexpectedValueException</code></li> </ul> <p>Tambi\u00e9n pod\u00e9is consultar la documentaci\u00f3n de estas excepciones en https://www.php.net/manual/es/spl.exceptions.php.</p> Actividad Proyecto Videoclub 2.0 a realizar <p>Realizar la actividad Proyecto Videoclub: - <code>Ejercicios 331</code> - <code>Ejercicios 332</code> - <code>Ejercicios 333</code> - <code>Ejercicios 334</code> - <code>Ejercicios 335</code> - <code>Ejercicios 336</code> - <code>Ejercicios 337</code> - <code>Ejercicios 338</code></p>"},{"location":"ut03/ut03ac/","title":"Ut03ac","text":""},{"location":"ut03/ut03ac/#ejercicio-301-investigacion","title":"Ejercicio 301 Investigaci\u00f3n","text":"<p>Investiga la diferencia entre un paradigma orientado a objetos basado en clases (PHP) respecto a uno basado en prototipos (JavaScript).</p>"},{"location":"ut03/ut03ac/#ejercicio-302","title":"Ejercicio 302","text":"<p><code>302Empleado.php</code>: crea una clase <code>Empleado</code> con su nombre, apellidos y sueldo. Encapsula las propiedades mediante getters/setters y a\u00f1ade m\u00e9todos para:</p> <ul> <li> <p><code>getNombreCompleto(): string</code>  : obtener su nombre completo</p> </li> <li> <p><code>debePagarImpuestos(): bool</code> : que devuelva un booleano indicando si debe o no pagar impuestos (se pagan cuando el sueldo es superior a 3333\u20ac).</p> </li> </ul>"},{"location":"ut03/ut03ac/#ejercicio-303","title":"Ejercicio 303","text":"<p><code>303EmpleadoTelefonos.php</code>: copia la clase del ejercicio anterior y modif\u00edcala. A\u00f1ade una propiedad privada que almacene un array de n\u00fameros de tel\u00e9fonos. A\u00f1ade los siguientes m\u00e9todos:</p> <ul> <li><code>public function anyadirTelefono(int $telefono) : void</code> : a\u00f1ade un tel\u00e9fono al array.</li> <li><code>public function listarTelefonos(): string</code> : muestra los tel\u00e9fonos separados por comas.</li> <li><code>public function vaciarTelefonos(): void</code> : elimina todos los tel\u00e9fonos.</li> </ul>"},{"location":"ut03/ut03ac/#ejercicio-304","title":"Ejercicio 304","text":"<p><code>304EmpleadoConstructor.php</code>: copia la clase del ejercicio anterior y modif\u00edcala. Elimina los setters de <code>nombre</code> y <code>apellidos</code>, de manera que dichos datos se asignan mediante el constructor (utiliza la sintaxis de PHP7). Si el constructor recibe un tercer par\u00e1metro, ser\u00e1 el sueldo del <code>Empleado</code>. Si no, se le asignar\u00e1 1000\u20ac como sueldo inicial.</p> <p><code>304EmpleadoConstructor8.php</code>: modifica la clase y utiliza la sintaxis de PHP 8 de promoci\u00f3n de las propiedades del constructor.</p>"},{"location":"ut03/ut03ac/#ejercicio-305","title":"Ejercicio 305","text":"<p><code>305EmpleadoConstante.php</code>: copia la clase del ejercicio anterior y modif\u00edcala. A\u00f1ade una constante <code>SUELDO_TOPE</code> con el valor del sueldo que debe pagar impuestos, y modifica el c\u00f3digo para utilizar la constante.</p>"},{"location":"ut03/ut03ac/#ejercicio-306","title":"Ejercicio 306","text":"<p><code>306EmpleadoSueldo.php</code>: copia la clase del ejercicio anterior y modif\u00edcala. Cambia la constante por una variable est\u00e1tica <code>sueldoTope</code>, de manera que mediante getter/setter puedas modificar su valor.</p>"},{"location":"ut03/ut03ac/#ejercicio-307","title":"Ejercicio 307","text":"<p><code>307EmpleadoStatic.php</code>: copia la clase del ejercicio anterior y modif\u00edcala.</p> <p>Completa la clase con el siguiente m\u00e9todo que muestre los datos de un empleado dentro de un p\u00e1rrafo y todos los tel\u00e9fonos mediante una lista ordenada en HTML (para ello, deber\u00e1s crear un getter para los tel\u00e9fonos): <code>public static function toHtml(Empleado $emp): string</code></p>"},{"location":"ut03/ut03ac/#ejercicio-308","title":"Ejercicio 308","text":"La clase Empleado hereda de la clase Persona (ejercicio308). <p><code>308Persona.php</code>: copia la clase del ejercicio anterior en <code>308Empleado.php</code> y modif\u00edcala.</p> <p>Crea una clase <code>Persona</code> que sea padre de <code>Empleado</code>, de manera que <code>Persona</code> contenga el nombre y los apellidos, y en <code>Empleado</code> quede el salario y los tel\u00e9fonos.</p>"},{"location":"ut03/ut03ac/#ejercicio-309","title":"Ejercicio 309","text":"<p><code>309PersonaH.php</code>: copia las clases del ejercicio anterior y modif\u00edcalas. Crea en <code>Persona</code> el m\u00e9todo est\u00e1tico <code>toHtml(Persona $p)</code>, y modifica en <code>Empleado</code> el mismo m\u00e9todo <code>toHtml(Persona $p)</code>, pero cambia la firma para que reciba una <code>Persona</code> como par\u00e1metro.</p> <p>Para acceder a las propiedades del empleado con la persona que recibimos como par\u00e1metro, comprobaremos su tipo:</p> <pre><code>&lt;?php\nclass Empleado extends Persona {\n   // resto del c\u00f3digo\n\n   public static function toHtml(Persona $p): string {\n      if ($p instanceof Empleado) {\n          // Aqui ya podemos acceder a las propiedades y m\u00e9todos de Empleado\n      }\n   }\n}\n</code></pre>"},{"location":"ut03/ut03ac/#ejercicio-310","title":"Ejercicio 310","text":"<p><code>310PersonaE.php</code>: copia las clases del ejercicio anterior y modif\u00edcalas.</p> <p>A\u00f1ade en <code>Persona</code> un atributo <code>edad</code>.</p> <p>A la hora de saber si un empleado debe pagar impuestos, lo har\u00e1 siempre y cuando tenga m\u00e1s de 21 a\u00f1os y dependa del valor de su sueldo. Modifica todo el c\u00f3digo necesario para mostrar y/o editar la edad cuando sea necesario.</p>"},{"location":"ut03/ut03ac/#ejercicio-311","title":"Ejercicio 311","text":"<p><code>311PersonaS.php</code>: copia las clases del ejercicio anterior y modif\u00edcalas. A\u00f1ade nuevos m\u00e9todos que hagan una representaci\u00f3n de todas las propiedades de las clases <code>Persona</code> y <code>Empleado</code>, de forma similar a los realizados en HTML, pero sin que sean est\u00e1ticos, de manera que obtenga los datos mediante <code>$this</code>:</p> <ul> <li><code>function public __toString(): string</code></li> </ul> <p>Magic method</p> <p>El m\u00e9todo <code>__toString()</code> es un m\u00e9todo m\u00e1gico que se invoca autom\u00e1ticamente cuando queremos obtener la representaci\u00f3n en cadena de un objeto.</p>"},{"location":"ut03/ut03ac/#ejercicio-312","title":"Ejercicio 312","text":"<p><code>312PersonaA.php</code>: copia las clases del ejercicio anterior y modif\u00edcalas.</p> <p>Transforma <code>Persona</code> a una clase abstracta donde su m\u00e9todo est\u00e1tico <code>toHtml(Persona $p)</code> tenga que ser redefinido en todos sus hijos. </p>"},{"location":"ut03/ut03ac/#ejercicio-313","title":"Ejercicio 313","text":"<p><code>313Trabajador.php</code>: copia las clases del ejercicio anterior y modif\u00edcalas.</p> <ul> <li> <p>Cambia la estructura de clases conforme al gr\u00e1fico respetando todos los m\u00e9todos que ya est\u00e1n hechos.</p> </li> <li> <p><code>Trabajador</code> es una clase abstracta que ahora almacena los <code>telefonos</code> y donde <code>calcularSueldo</code> es un m\u00e9todo abstracto de manera que:</p> </li> <li> <p>El sueldo de un <code>Empleado</code> se calcula a partir de las horas trabajadas y lo que cobra por hora.</p> </li> <li> <p>Para los <code>Gerente</code>s, su sueldo se incrementa porcentualmente en base a su edad: <code>salario + salario*edad/100</code></p> </li> </ul> Estructura de herencia de clases del ejercicio 313."},{"location":"ut03/ut03ac/#ejercicio-314","title":"Ejercicio 314","text":"<p><code>314Empresa.php</code>: utilizando las clases de los ejercicios anteriores:</p> <ul> <li> <p>Crea una clase <code>Empresa</code> que adem\u00e1s del nombre y la direcci\u00f3n, contenga una propiedad con un array de <code>Trabajador</code>es, ya sean <code>Empleado</code>s o <code>Gerente</code>s.</p> </li> <li> <p>A\u00f1ade getters/setters para el nombre y direcci\u00f3n.</p> </li> <li> <p>A\u00f1ade m\u00e9todos para a\u00f1adir y listar los trabajadores.</p> </li> <li> <p><code>public function anyadirTrabajador(Trabajador $t)</code></p> </li> <li> <p><code>public function listarTrabajadoresHtml() : string</code> -&gt; utiliza <code>Trabajador::toHtml(Persona $p)</code></p> </li> <li> <p>A\u00f1ade un m\u00e9todo para obtener el coste total en n\u00f3minas.</p> </li> <li> <p><code>public function getCosteNominas(): float</code> -&gt; recorre los trabajadores e invoca al m\u00e9todo <code>calcularSueldo()</code>.</p> </li> </ul>"},{"location":"ut03/ut03ac/#ejercicio-315","title":"Ejercicio 315","text":"<p><code>315EmpresaI.php</code>: copia las clases del ejercicio anterior y modif\u00edcalas.</p> <p>a) Crea un interfaz <code>JSerializable</code>, de manera que ofrezca los m\u00e9todos:</p> <ul> <li><code>toJSON(): string</code> \u2192 utiliza la funci\u00f3n json_encode(mixed). Ten en cuenta que como tenemos las propiedades de los objetos privados, debes recorrer las propiedades y colocarlas en un mapa. Por ejemplo:</li> </ul> <pre><code>&lt;?php\n    public function toJSON(): string {\n        foreach ($this as $clave =&gt; $valor) {\n            $mapa-&gt;$clave = $valor;\n        }\n        return json_encode($mapa);\n    }\n?&gt;\n</code></pre> <ul> <li><code>toSerialize(): string</code> \u2192 utiliza la funci\u00f3n serialize(mixed)</li> </ul> <p>b) Modifica todas las clases que no son abstractas para que implementen el interfaz creado.</p>"},{"location":"ut03/ut03ac/#proyecto-videoclub","title":"Proyecto Videoclub","text":"<p>En los siguientes ejercicios vamos a simular un peque\u00f1o proyecto de un Videoclub (basado en la propuesta que hace el tutorial de desarrolloweb.com), el cual vamos a realizar mediante un desarrollo incremental y siguiendo la pr\u00e1ctica de programaci\u00f3n en parejas (pair programming).</p> <p>Proyecto no real</p> <p>El siguiente proyecto est\u00e1 pensado desde un punto de vista formativo. Algunas de las decisiones que se toman no se deben usar (como hacer <code>echo</code> dentro de las clases) o probar el c\u00f3digo comparando el resultado en el navegador.</p> <p>Git del proyecto</p> <p>Antes de nada, crea un repositorio privado en GitHub y sube el proyecto actual de <code>Videoclub</code>. Una vez creado, invita a tu compa\u00f1ero al repositorio como colaborador. 1. Inicializa en local tu repositorio de git, mediante <code>git init</code>. 2. A\u00f1ade y sube los cambios a tu repositorio, mediante <code>git add .</code> y luego <code>git commit -m 'Inicializando proyecto'</code>. 3.Conecta tu repositorio con GitHub y sube los cambios (mira la instrucciones de GitHub: comandos <code>git remote</code> y <code>git push</code>). Tu compa\u00f1ero deber\u00e1 descargar el proyecto con sus credenciales.</p> <p>Cada clase debe ir en un archivo php separado. Para facilitar su implementaci\u00f3n, se muestra la estructura UML del modelo y un fragmento de c\u00f3digo para probar las clases:</p>"},{"location":"ut03/ut03ac/#ejercicio-321","title":"Ejercicio 321","text":"Estructura de la clase Soporte del ejercicio 321. <p>Crea una clase para almacenar soportes (<code>Soporte.php</code>). Esta clase ser\u00e1 la clase madre de los diferentes soportes con los que trabaje nuestro videoclub (cintas de v\u00eddeo, videojuegos, etc...):</p> <ul> <li>Crea el constructor que inicialice sus propiedades. F\u00edjate que la clase no tiene m\u00e9todos setters.</li> <li>Definir una constante mediante un propiedad privada y est\u00e1tica denominada <code>IVA</code> con un valor del 21%.</li> <li>Crear un archivo (<code>inicio.php</code>) para usar las clases y copia el siguiente fragmento:</li> </ul> Ejemplo inicio.phpResultado <pre><code>&lt;?php\n    include_once (\"Soporte.php\");\n\n    $soporte1 = new Soporte(\"Tenet\", 22, 3); \n    echo \"&lt;strong&gt;\" . $soporte1-&gt;titulo . \"&lt;/strong&gt;\"; \n    echo \"&lt;br&gt;Precio: \" . $soporte1-&gt;getPrecio() . \" \u20ac\"; \n    echo \"&lt;br&gt;Precio con IVA: \" . $soporte1-&gt;getPrecioConIVA() . \" \u20ac\";\n    echo \"&lt;br/&gt;\";\n    echo $soporte1-&gt;muestraResumen();\n</code></pre> <p></p>"},{"location":"ut03/ut03ac/#ejercicio-322","title":"Ejercicio 322","text":"La clase CintaVideo hereda de la clase Soporte (ejercicio322). <p>Crea la clase <code>CintaVideo</code> la cual hereda de <code>Soporte</code>. A\u00f1ade el atributo <code>duracion</code> y sobreescribe tanto el constructor como el m\u00e9todo <code>muestraResumen</code> (desde <code>CintaVideo</code> deber\u00e1s llamar al m\u00e9todo <code>muestraResumen</code> del padre).</p> <p>A\u00f1ade a <code>inicio.php</code> el c\u00f3digo para probar la clase:</p> Ejemplo inicio.phpResultado <pre><code>&lt;?php\n    include_once \"CintaVideo.php\";\n\n    $miCinta = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107); \n    echo \"&lt;strong&gt;\" . $miCinta-&gt;titulo . \"&lt;/strong&gt;\"; \n    echo \"&lt;br&gt;Precio: \" . $miCinta-&gt;getPrecio() . \" \u20ac\"; \n    echo \"&lt;br&gt;Precio con IVA: \" . $miCinta-&gt;getPrecioConIva() . \" \u20ac\";\n    echo \"&lt;br/&gt;\";\n\n    echo $miCinta-&gt;muestraResumen();\n</code></pre> <p></p>"},{"location":"ut03/ut03ac/#ejercicio-323","title":"Ejercicio 323","text":"las clases CintaVideo y Dvd heredan de la clase Soporte (ejercicio323). <p>Crea la clase <code>Dvd</code> la cual hereda de <code>Soporte</code>. A\u00f1ade los atributos <code>idiomas</code> (que se un array como \"es\", \"en\", ...) y <code>formatoPantalla</code>. A continuaci\u00f3n sobreescribe tanto el constructor como el m\u00e9todo <code>muestraResumen</code>.</p> <p>A\u00f1ade a <code>inicio.php</code> el c\u00f3digo para probar la clase:</p> Ejemplo inicio.phpResultado <pre><code>&lt;?php\n    include_once \"Dvd.php\";\n\n    $miDvd = new Dvd(\"Origen\", 24, 15, [\"es\",\"en\",\"fr\"], \"16:9\"); \n    echo \"&lt;strong&gt;\" . $miDvd-&gt;titulo . \"&lt;/strong&gt;\"; \n    echo \"&lt;br&gt;Precio: \" . $miDvd-&gt;getPrecio() . \" \u20ac\"; \n    echo \"&lt;br&gt;Precio con IVA: \" . $miDvd-&gt;getPrecioConIva() . \" \u20ac\";\n    echo \"&lt;br/&gt;\";\n\n    echo $miDvd-&gt;muestraResumen();\n</code></pre> <p></p>"},{"location":"ut03/ut03ac/#ejercicio-324","title":"Ejercicio 324","text":"<p>Crea la clase <code>Juego</code> la cual hereda de <code>Soporte</code>. A\u00f1ade los atributos <code>consola</code>, <code>minNumJugadores</code> y <code>maxNumJugadores</code>. </p> <p>A continuaci\u00f3n a\u00f1ade el m\u00e9todo <code>muestraJugadoresPosibles</code>, el cual debe mostrar Para un jugador, Para X jugadores o De X a Y jugadores dependiendo de los valores de las atributos creados. </p> <p>Finalmente, sobreescribe tanto el constructor como el m\u00e9todo <code>muestraResumen</code>.</p> <p>A\u00f1ade a <code>inicio.php</code> el c\u00f3digo para probar la clase:</p> Ejemplo inicio.phpResultado <pre><code>&lt;?php\n    include_once \"Juego.php\";\n\n    $miJuego = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1); \n    echo \"&lt;strong&gt;\" . $miJuego-&gt;titulo . \"&lt;/strong&gt;\"; \n    echo \"&lt;br&gt;Precio: \" . $miJuego-&gt;getPrecio() . \" \u20ac\"; \n    echo \"&lt;br&gt;Precio con IVA: \" . $miJuego-&gt;getPrecioConIva() . \" \u20ac\";\n    echo \"&lt;br/&gt;\";\n\n    echo $miJuego-&gt;muestraResumen();\n</code></pre> <p></p> <p>Llegados a este punto, nuestro modelo es similar al siguiente diagrama:</p> Estructura de herencia para el ejercicio 324."},{"location":"ut03/ut03ac/#ejercicio-325","title":"Ejercicio 325","text":"Estructura de la clase Cliente para el ejercicio 325. <p>Crear la clase <code>Cliente</code>. El constructor recibir\u00e1 el <code>nombre</code>, <code>numero</code> y <code>maxAlquilerConcurrente</code>, este \u00faltimo pudiendo ser opcional y tomando como valor por defecto 3. </p> <p>Tras ello, a\u00f1ade getter/setter \u00fanicamente a <code>numero</code>, y un getter a <code>numSoportesAlquilados</code> (este campo va a almacenar un contador del total de alquileres que ha realizado). </p> <p>El array de soportes alquilados <code>$soportesAlquilados</code> contedr\u00e1 clases que hereden de <code>Soporte</code>. </p> <p>Finalmente, a\u00f1ade el m\u00e9todo <code>muestraResumen</code> que muestre el nombre y la cantidad de alquileres (tama\u00f1o del array <code>soportesAlquilados</code>).</p>"},{"location":"ut03/ut03ac/#ejercicio-326","title":"Ejercicio 326","text":"<p>Dentro de <code>Cliente</code>, a\u00f1ade las siguiente operaciones:</p> <ul> <li><code>tieneAlquilado(Soporte $s): bool</code> : recorre el array de soportes y comprueba si est\u00e1 el soporte alquilado.</li> <li><code>alquilar(Soporte $s): bool</code> : debe comprobar si el soporte est\u00e1 alquilado y si no ha superado el cupo de alquileres. Al alquilar, incrementar\u00e1 el <code>numSoportesAlquilados</code> y almacenar\u00e1 el soporte en el array. Para cada caso debe mostrar un mensaje informando de lo ocurrido.</li> </ul>"},{"location":"ut03/ut03ac/#ejercicio-327","title":"Ejercicio 327","text":"<p>Seguimos con <code>Cliente</code> para a\u00f1adir las operaciones:</p> <ul> <li><code>devolver(int $numSoporte): bool</code> : debe comprobar que el soporte estaba alquilado y actualizar la cantidad de soportes alquilados. Para cada caso debe mostrar un mensaje informando de lo ocurrido.</li> <li><code>listarAlquileres(): void</code> : informa de cuantos alquileres tiene el cliente y los muestra.</li> </ul> <p>Crea el archivo <code>inicio2.php</code> con el siguiente c\u00f3digo fuente para probar la clase:</p> Ejemplo inicio2.phpResultado <pre><code>&lt;?php\n    include_once \"CintaVideo.php\";\n    include_once \"Dvd.php\";\n    include_once \"Juego.php\";\n    include_once \"Cliente.php\";\n\n    //instanciamos un par de objetos cliente\n    $cliente1 = new Cliente(\"Bruce Wayne\", 23);\n    $cliente2 = new Cliente(\"Clark Kent\", 33);\n\n    echo \"&lt;br/&gt;\";\n    //mostramos el n\u00famero de cada cliente creado \n    echo \"&lt;br&gt;El identificador del cliente 1 es: \" . $cliente1-&gt;getNumero();\n    echo \"&lt;br&gt;El identificador del cliente 2 es: \" . $cliente2-&gt;getNumero();\n\n    //instancio algunos soportes \n    $soporte1 = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107);\n    $soporte2 = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1);  \n    $soporte3 = new Dvd(\"Origen\", 24, 15, [\"es\",\"en\",\"fr\"], \"16:9\");\n    $soporte4 = new Dvd(\"El Imperio Contraataca\", 4, 3, [\"es\",\"en\"],\"16:9\");\n\n    //alquilo algunos soportes\n    $cliente1-&gt;alquilar($soporte1);\n    $cliente1-&gt;alquilar($soporte2);\n    $cliente1-&gt;alquilar($soporte3);\n\n    //voy a intentar alquilar de nuevo un soporte que ya tiene alquilado\n    $cliente1-&gt;alquilar($soporte1);\n    //el cliente tiene 3 soportes en alquiler como m\u00e1ximo\n    //este soporte no lo va a poder alquilar\n    $cliente1-&gt;alquilar($soporte4);\n    //este soporte no lo tiene alquilado\n    $cliente1-&gt;devolver(4);\n    //devuelvo un soporte que s\u00ed que tiene alquilado\n    $cliente1-&gt;devolver(2);\n    //alquilo otro soporte\n    $cliente1-&gt;alquilar($soporte4);\n    //listo los elementos alquilados\n    $cliente1-&gt;listarAlquileres();\n    //este cliente no tiene alquileres\n    $cliente2-&gt;devolver(2);\n</code></pre> <p></p>"},{"location":"ut03/ut03ac/#ejercicio-328","title":"Ejercicio 328","text":"<p>Llegado a este punto, vamos a relacionar los clientes y los soportes mediante la clase <code>Videoclub</code>. As\u00ed pues crea la clase que representa la imagen posterior, teniendo en cuenta que:</p> <ul> <li><code>productos</code> es un array de <code>Soporte</code>.</li> <li><code>socios</code> es una array de <code>Cliente</code>.</li> <li>Los m\u00e9todos p\u00fablicos de incluir alg\u00fan soporte, crear\u00e1n la clase y llamar\u00e1n al m\u00e9todo privado de <code>incluirProducto</code>, el cual es el encargado de introducirlo dentro del array.</li> </ul> <p>El modelo completo quedar\u00e1 de la siguiente manera:</p> Estructura de herencia de las clases implicadas (ejercicio328). <p>Y para probar el proyecto, dentro inicio3.php colocaremos:</p> Ejemplo inicio3.phpResultado <pre><code>&lt;?php\n   include_once \"Videoclub.php\"; // No incluimos nada m\u00e1s\n\n   $vc = new Videoclub(\"Severo 8A\"); \n\n   //voy a incluir unos cuantos soportes de prueba \n   $vc-&gt;incluirJuego(\"God of War\", 19.99, \"PS4\", 1, 1); \n   $vc-&gt;incluirJuego(\"The Last of Us Part II\", 49.99, \"PS4\", 1, 1);\n   $vc-&gt;incluirDvd(\"Torrente\", 4.5, [\"es\"],\"16:9\"); \n   $vc-&gt;incluirDvd(\"Origen\", 4.5, [\"es\",\"en\",\"fr\"], \"16:9\"); \n   $vc-&gt;incluirDvd(\"El Imperio Contraataca\", 3, [\"es,en\"],\"16:9\"); \n   $vc-&gt;incluirCintaVideo(\"Los cazafantasmas\", 3.5, 107); \n   $vc-&gt;incluirCintaVideo(\"El nombre de la Rosa\", 1.5, 140); \n\n   //listo los productos \n   $vc-&gt;listarProductos(); \n\n   //voy a crear algunos socios \n   $vc-&gt;incluirSocio(\"Amancio Ortega\"); \n   $vc-&gt;incluirSocio(\"Pablo Picasso\", 2); \n\n   $vc-&gt;alquilarSocioProducto(1,2); \n   $vc-&gt;alquilarSocioProducto(1,3); \n   //alquilo otra vez el soporte 2 al socio 1. \n   // no debe dejarme porque ya lo tiene alquilado \n   $vc-&gt;alquilarSocioProducto(1,2); \n   //alquilo el soporte 6 al socio 1. \n   //no se puede porque el socio 1 tiene 2 alquileres como m\u00e1ximo \n   $vc-&gt;alquilarSocioProducto(1,6); \n\n   //listo los socios \n   $vc-&gt;listarSocios();\n</code></pre> <p></p>"},{"location":"ut03/ut03ac/#ejercicio-329","title":"Ejercicio 329","text":"<p>Transforma <code>Soporte</code> a una clase abstracta y comprueba que todo sigue funcionando. \u00bfQu\u00e9 conseguimos al hacerla abstracta?</p>"},{"location":"ut03/ut03ac/#ejercicio-330","title":"Ejercicio 330","text":"<p>Crea un interfaz <code>Resumible</code> de manera que las clases que lo implementen deben ofrecer el m\u00e9todo <code>muestraResumen()</code>.</p> <p>Modifica la clase <code>Soporte</code> y haz que implemente el interfaz. \u00bfHace falta que tambi\u00e9n lo implementen los hijos?</p>"},{"location":"ut03/ut03ac/#proyecto-videoclub-20","title":"Proyecto Videoclub 2.0","text":"<p>Git del proyecto</p> <p>Antes de comenzar con la segunda parte del videoclub, crea una etiqueta mediante <code>git tag</code> con el nombre <code>v0.330</code> y sube los cambios a GitHub.</p>"},{"location":"ut03/ut03ac/#ejercicio-331","title":"Ejercicio 331","text":"<p>Modifica las operaciones de alquilar, tanto en <code>Cliente</code> (m\u00e9todos <code>alquilar</code>, <code>devolver</code>) como en <code>Videoclub</code>  (m\u00e9todos <code>incluirProducto</code>, <code>incluirCintaVideo</code>, <code>incluirDvd</code>, <code>incluirJuego</code>, <code>incluirSocio</code>, <code>listarProductos</code>, <code>listarSocios</code>, <code>alquilarSocioProducto</code>) , para dar soporte al encadenamiento de m\u00e9todos. </p> <p>Posteriormente, modifica el c\u00f3digo de prueba para utilizar esta t\u00e9cnica. <pre><code>&lt;?php\ninclude_once \"Videoclub.php\"; // No incluimos nada m\u00e1s\n\n$vc = new Videoclub(\"Severo 8A\");\n\n// Incluir soportes de prueba y crear algunos socios con encadenamiento de m\u00e9todos\n$vc-&gt;incluirJuego(\"God of War\", 19.99, \"PS4\", 1, 1)\n   -&gt;incluirJuego(\"The Last of Us Part II\", 49.99, \"PS4\", 1, 1)\n   -&gt;incluirDvd(\"Torrente\", 4.5, [\"es\"], \"16:9\")\n   -&gt;incluirDvd(\"Origen\", 4.5, [\"es\", \"en\", \"fr\"], \"16:9\")\n   -&gt;incluirDvd(\"El Imperio Contraataca\", 3, [\"es\", \"en\"], \"16:9\")\n   -&gt;incluirCintaVideo(\"Los cazafantasmas\", 3.5, 107)\n   -&gt;incluirCintaVideo(\"El nombre de la Rosa\", 1.5, 140)\n   -&gt;listarProductos() // Listar productos despu\u00e9s de a\u00f1adirlos\n   -&gt;incluirSocio(\"Amancio Ortega\") \n   -&gt;incluirSocio(\"Pablo Picasso\", 2)\n   -&gt;alquilarSocioProducto(1, 2)\n   -&gt;alquilarSocioProducto(1, 3)\n   -&gt;alquilarSocioProducto(1, 2) // Intento de alquilar un soporte ya alquilado\n   -&gt;alquilarSocioProducto(2, 6) // Intento de alquilar m\u00e1s de lo permitido\n   -&gt;listarSocios(); // Listar socios despu\u00e9s de realizar las operaciones de alquiler\n?&gt;\n</code></pre></p>"},{"location":"ut03/ut03ac/#ejercicio-332","title":"Ejercicio 332","text":"<p>Haciendo uso de namespaces:</p> <ul> <li>Coloca todas las clases/interfaces en <code>Dwes\\ProyectoVideoclub</code>.</li> <li>Cada clase debe hacer <code>include_once</code> de los recursos que emplea.</li> <li>Coloca el/los archivos de prueba en el ra\u00edz (sin espacio de nombres).</li> <li>Desde el archivo de pruebas, utiliza <code>use</code> para poder realizar accesos sin cualificar:</li> </ul> <pre><code>&lt;?php\nuse Dwes\\ProyectoVideoclub\\Videoclub;\n\ninclude_once \"Videoclub.php\";\n\n$vc = new Videoclub(\"Severo 8A\");\n\n// Incluir soportes de prueba y crear algunos socios con encadenamiento de m\u00e9todos\n$vc-&gt;incluirJuego(\"God of War\", 19.99, \"PS4\", 1, 1)\n   -&gt;incluirJuego(\"The Last of Us Part II\", 49.99, \"PS4\", 1, 1)\n   -&gt;incluirDvd(\"Torrente\", 4.5, [\"es\"], \"16:9\")\n   -&gt;incluirDvd(\"Origen\", 4.5, [\"es\", \"en\", \"fr\"], \"16:9\")\n   -&gt;incluirDvd(\"El Imperio Contraataca\", 3, [\"es\", \"en\"], \"16:9\")\n   -&gt;incluirCintaVideo(\"Los cazafantasmas\", 3.5, 107)\n   -&gt;incluirCintaVideo(\"El nombre de la Rosa\", 1.5, 140)\n   -&gt;listarProductos() // Listar productos despu\u00e9s de a\u00f1adirlos\n   -&gt;incluirSocio(\"Amancio Ortega\") \n   -&gt;incluirSocio(\"Pablo Picasso\", 2)\n   -&gt;alquilarSocioProducto(1, 2)\n   -&gt;alquilarSocioProducto(1, 3)\n   -&gt;alquilarSocioProducto(1, 2) // Intento de alquilar un soporte ya alquilado\n   -&gt;alquilarSocioProducto(2, 6) // Intento de alquilar m\u00e1s de lo permitido\n   -&gt;listarSocios(); // Listar socios despu\u00e9s de realizar las operaciones de alquiler\n?&gt;\n</code></pre> <p>Git del proyecto</p> <p>Etiqueta los cambios como <code>v0.331</code>.</p>"},{"location":"ut03/ut03ac/#ejercicio-333","title":"Ejercicio 333","text":"<p>Reorganiza las carpeta tal como hemos visto en los apuntes: <code>app</code>, <code>test</code> y<code>vendor</code>.</p> <ul> <li>Crea un fichero <code>autoload.php</code> para registrar la ruta donde encontrar las clases</li> <li>Modifica todo el c\u00f3digo necesario, incluyendo <code>autoload.php</code> donde sea necesario y borrando los includes previos.</li> </ul>"},{"location":"ut03/ut03ac/#ejercicio-334","title":"Ejercicio 334","text":"<p>A continuaci\u00f3n vamos a crear un conjunto de excepciones de aplicaci\u00f3n. Estas excepciones son simples, no necesitan sobreescribir ning\u00fan m\u00e9todo. As\u00ed pues, crea la excepci\u00f3n de aplicaci\u00f3n <code>VideoclubException</code> en el namespace <code>Dwes\\ProyectoVideoclub\\Util</code>. Posteriormente crea los siguientes hijos (deben heredar de <code>VideoclubException</code>), cada uno en su propio archivo:</p> <ul> <li><code>SoporteYaAlquiladoException</code>.</li> <li><code>CupoSuperadoException</code>.</li> <li><code>SoporteNoEncontradoException</code>.</li> <li><code>ClienteNoEncontradoException</code>.</li> </ul>"},{"location":"ut03/ut03ac/#ejercicio-335","title":"Ejercicio 335","text":"<p>En <code>Cliente</code>, modifica los m\u00e9todos <code>alquilar</code> y <code>devolver</code>, para que hagan uso de las nuevas excepciones (lanz\u00e1ndolas cuando sea necesario) y funcionen como m\u00e9todos encadenados. Destacar que estos m\u00e9todos, no se capturar est\u00e1s excepciones, s\u00f3lo se lanzan. En <code>Videoclub</code>, modifica <code>alquilarSocioPelicula</code>para capturar todas las excepciones que ahora lanza <code>Cliente</code> e informar al usuario en consecuencia.</p>"},{"location":"ut03/ut03ac/#ejercicio-336","title":"Ejercicio 336","text":"<p>Vamos a modificar el proyecto para que el videoclub sepa qu\u00e9 productos est\u00e1n o no alquilados:</p> <ul> <li>En <code>Soporte</code>, crea una propiedad p\u00fablica cuyo nombre sea <code>alquilado</code> que inicialmente estar\u00e1 a <code>false</code>. Cuando se alquile, se pondr\u00e1 a <code>true</code>. Al devolver, la volveremos a poner a <code>false</code>.</li> <li> <p>En <code>Videoclub</code>, crea dos nuevas propiedades y sus getters:</p> <p>_ <code>numProductosAlquilados</code> _ <code>numTotalAlquileres</code></p> </li> </ul>"},{"location":"ut03/ut03ac/#ejercicio-337","title":"Ejercicio 337","text":"<p>Crea un nuevo m\u00e9todo en <code>Videoclub</code> llamado <code>alquilarSocioProductos(int numSocio, array numerosProductos)</code>, el cual debe recibir un array con los productos a alquilar.</p> <p>Antes de alquilarlos, debe comprobar que todos los soportes est\u00e9n disponibles, de manera que si uno no lo est\u00e1, no se le alquile ninguno.</p>"},{"location":"ut03/ut03ac/#ejercicio-338","title":"Ejercicio 338","text":"<p>Crea dos nuevos m\u00e9todos en <code>Videoclub</code>, y mediante la definici\u00f3n, deduce qu\u00e9 deben realizar:</p> <ul> <li><code>devolverSocioProducto(int numSocio, int numeroProducto)</code></li> <li><code>devolverSocioProductos(int numSocio, array numerosProductos)</code></li> </ul> <p>Deben soportar el encadenamiento de m\u00e9todos. Recuerda actualizar la propiedad <code>alquilado</code> de los diferentes soportes.</p> <p>Git del proyecto</p> <p>Cuando hayas realizado todos los ejercicios, crea una etiqueta mediante <code>git tag</code> con el nombre <code>v0.338</code> y sube los cambios a GitHub.</p>"},{"location":"ut04/ut0401/","title":"UT 4. Programaci\u00f3n Web","text":"<p>Duraci\u00f3n estimada: 15 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA4. Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. a) Se han identificado los mecanismos disponibles para el mantenimiento de la informaci\u00f3n que concierne a un cliente web concreto y se han se\u00f1alado sus ventajas. b) Se han utilizado sesiones para mantener el estado de las aplicaciones Web. c) Se han utilizado cookies para almacenar informaci\u00f3n en el cliente Web y para recuperar su contenido. d) Se han identificado y caracterizado los mecanismos disponibles para la autentificaci\u00f3n de usuarios. e) Se han escrito aplicaciones que integren mecanismos de autentificaci\u00f3n de usuarios. f) Se han realizado adaptaciones a aplicaciones Web existentes como gestores de contenidos u otras. g) Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo."},{"location":"ut04/ut0402/","title":"Ut0402","text":"<p>PHP almacena la informaci\u00f3n del servidor y de las peticiones HTTP en seis arrays globales:</p> <ul> <li><code>$_ENV</code>: informaci\u00f3n sobre las variables de entorno.</li> <li><code>$_GET</code>: par\u00e1metros enviados en la petici\u00f3n GET.</li> <li><code>$_POST</code>: par\u00e1metros enviados en el envio POST.</li> <li><code>$_COOKIE</code>: contiene las cookies de la petici\u00f3n, las claves del array son los nombres de las cookies.</li> <li><code>$_SERVER</code>: informaci\u00f3n sobre el servidor.</li> <li><code>$_FILES</code>: informaci\u00f3n sobre los ficheros cargados via upload.</li> </ul>"},{"location":"ut04/ut0402/#1-_server","title":"1. $_SERVER","text":"<p>Si nos centramos en el array <code>$_SERVER</code> podemos consultar las siguientes propiedades:</p> <ul> <li><code>PHP_SELF</code>: nombre del script ejecutado, relativo al document root (p.e. <code>/tienda/carrito.php</code>).</li> <li><code>SERVER_SOFTWARE</code>: (p.e. <code>Apache</code>).</li> <li><code>SERVER_NAME</code>: dominio, alias DNS (p.e. <code>www.mitienda.es</code>).</li> <li><code>REQUEST_METHOD</code>: GET.</li> <li><code>REQUEST_URI</code>: URI, sin el dominio.</li> <li><code>QUERY_STRING</code>: todo lo que va despu\u00e9s de <code>?</code> en la URL (p.e.: <code>nombre=Cambria&amp;stock=14</code>).</li> </ul> Ejemplo: formulario02.htmlResultado <p><pre><code>    &lt;form action=\"server02.php\" method=\"get\"&gt;\n    &lt;label for=\"nombre\"&gt;Introduce nombre:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" required&gt;\n    &lt;br&gt;\n    &lt;label for=\"stock\"&gt;Introduce stock:&lt;/label&gt;\n    &lt;input type=\"number\" id=\"stock\" name=\"stock\" required&gt;\n    &lt;br&gt;\n    &lt;input type=\"submit\" value=\"Enviar\"&gt;\n&lt;/form&gt;\n</code></pre> Formulario tipo GET.</p> <p><pre><code>&lt;?php\n// EJEMPLO:\necho $_SERVER[\"PHP_SELF\"].\"&lt;br&gt;\";        // /pru04/401server.php\necho $_SERVER[\"SERVER_SOFTWARE\"].\"&lt;br&gt;\"; // Apache/2.4.62 (Debian) OpenSSL/1.1.1g PHP/7.4.9\necho $_SERVER[\"SERVER_NAME\"].\"&lt;br&gt;\";     // localhost\n\necho $_SERVER[\"REQUEST_METHOD\"].\"&lt;br&gt;\";  // GET\necho $_SERVER[\"REQUEST_URI\"].\"&lt;br&gt;\";     // /pru04/server.php?nombre=Cambria&amp;stock=14\necho $_SERVER[\"QUERY_STRING\"].\"&lt;br&gt;\";    // nombre=Cambria&amp;stock=14\n</code></pre> Mostrar diferentes par\u00e1metros de $_SERVER.</p> <p>M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/reserved.variables.server.php.</p> <p>Otras propiedades relacionadas:</p> <ul> <li><code>PATH_INFO</code>: ruta extra tras la petici\u00f3n (p.e. si la URL es <code>http://www.php.com/php/pathInfo.php/algo/cosa?foo=bar</code>, entonces  <code>$_SERVER['PATH_INFO']</code>  ser\u00e1 <code>/algo/cosa</code>).</li> <li><code>REMOTE_HOST</code>: hostname que hizo la petici\u00f3n.</li> <li><code>REMOTE_ADDR</code>: IP del cliente.</li> <li><code>AUTH_TYPE</code>: tipo de autenticaci\u00f3n (p.e. <code>Basic</code>).</li> <li><code>REMOTE_USER</code>: nombre del usuario autenticado.</li> </ul> <p>Apache crea una clave para cada cabecera HTTP, en may\u00fasculas y sustituyendo los guiones por subrayados:</p> <ul> <li><code>HTTP_USER_AGENT</code>: agente (navegador).</li> <li><code>HTTP_REFERER</code>: p\u00e1gina desde la que se hizo la petici\u00f3n.</li> </ul> <pre><code>&lt;?php\n    echo $_SERVER[\"HTTP_USER_AGENT\"].\"&lt;br&gt;\"; // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 401</code></li> </ul>"},{"location":"ut04/ut0403/","title":"Ut0403","text":"<p>A la hora de enviar un formulario, debemos tener claro cu\u00e1ndo usar el m\u00e9todo <code>GET</code> o el m\u00e9todo <code>POST</code>:</p> <p><code>GET</code>: los par\u00e1metros se pasan en la URL y son visibles directamente en la barra de direcciones del navegador.</p> <ul> <li>&lt;2048 caracteres (dependiendo de navegador y servidor).</li> <li> <p>S\u00f3lo acepta caracterers ASCII (alfanum\u00e9ricos, espacios codificados, etc.).</p> </li> <li> <p>Permite almacenar la direcci\u00f3n completa (guardar la URL en marcadores o historial).</p> </li> <li> <p>Idempotente: dos llamadas con los mismos datos siempre debe dar el mismo resultado.</p> </li> <li> <p>El navegador puede cachear las llamadas (para agilizar las visitas repetidas a la misma URL).</p> </li> </ul> <p>Ejemplo:   <pre><code>https://ejemplo.com/buscar?nombre=Alba&amp;edad=2\n</code></pre></p> <p><code>POST</code>: par\u00e1metros ocultos (aunque no est\u00e1n visibles en la URL los datos no est\u00e1n encriptados; menos probable que los usuarios manipulen manualmente los datos).</p> <ul> <li>Sin l\u00edmite de datos.</li> <li>Permite datos binarios (im\u00e1genes, archivos, JSON, etc.).</li> <li>No se pueden cachear (los navegadores no almacenan las solicitudes <code>POST</code> en cach\u00e9 ni las incluyen en el historial; y as\u00ed no repetirlas accidentalmente).</li> <li>No idempotente (generalmente cambian el estado del servidor, como actualizar una base de datos).</li> </ul> <p>As\u00ed pues, para recoger los datos accederemos al array dependiendo del m\u00e9todo del formulario que nos ha invocado:</p> <pre><code>&lt;?php\n    $par = $_GET[\"parametro\"]\n    $par = $_POST[\"parametro\"]\n</code></pre> <p>Para los siguientes apartados nos vamos a basar en el siguiente formulario de ejemplo:</p> <pre><code>&lt;form action=\"formulario.php\" method=\"GET\"&gt;\n  &lt;p&gt;\n    &lt;label for=\"nombre\"&gt;Nombre del alumno:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"\" /&gt;\n  &lt;/p&gt;\n  &lt;p&gt;\n    &lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWES\" value=\"DWES\" /&gt;\n    &lt;label for=\"modulosDWES\"&gt;Desarrollo web en entorno servidor&lt;/label&gt;\n  &lt;/p&gt;\n  &lt;p&gt;\n    &lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWEC\" value=\"DWEC\" /&gt;\n    &lt;label for=\"modulosDWEC\"&gt;Desarrollo web en entorno cliente&lt;/label&gt;\n  &lt;/p&gt;\n  &lt;input type=\"submit\" value=\"Enviar\" name=\"enviar\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"ut04/ut0403/#1-validacion","title":"1. Validaci\u00f3n","text":"<p>Respecto a la validaci\u00f3n, es conveniente siempre hacer validaci\u00f3n doble:</p> <ul> <li>En el cliente mediante JS.</li> <li>En servidor, antes de llamar a negocio, es conveniente volver a validar los datos.</li> </ul> <pre><code>&lt;?php\n    if (isset($_GET[\"parametro\"])) {\n        $par = $_GET[\"parametro\"];\n        // comprobar si $par tiene el formato adecuado, su valor, etc...\n    }\n</code></pre> <p>Librer\u00edas de validaci\u00f3n</p> <p>Existen diversas librer\u00edas que facilitan la validaci\u00f3n de los formularios, como son respect/validation o particle/validator. Cuando estudiemos Laravel profundizaremos en la validaci\u00f3n de forma declarativa.</p>"},{"location":"ut04/ut0403/#2-parametros-multivalor","title":"2. Par\u00e1metros multivalor","text":"<p>Existen elementos HTML que env\u00edan varios valores:</p> <ul> <li><code>select multiple</code></li> <li><code>checkbox</code></li> </ul> <p>Para recoger los datos, el nombre del elemento debe ser un array:</p> <pre><code>&lt;!-- Ejemplo selecci\u00f3n m\u00faltiple --&gt;\n&lt;select name=\"lenguajes[]\" multiple=\"true\"&gt;\n    &lt;option value=\"c\"&gt;C&lt;/option&gt;\n    &lt;option value=\"java\"&gt;Java&lt;/option&gt;\n    &lt;option value=\"php\"&gt;PHP&lt;/option&gt;\n    &lt;option value=\"python\"&gt;Python&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;!-- Ejemplo casillas m\u00faltiples --&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes2[]\" value=\"c\" /&gt;C&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes2[]\" value=\"java\" /&gt;Java&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes2[]\" value=\"php\" /&gt;Php&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes2[]\" value=\"python\" /&gt;Python&lt;br /&gt;\n</code></pre> <p>M\u00e1s tarde, en el fichero de destino, este array se tratar\u00e1 como un array asociativo:</p> <pre><code>&lt;?php\n    $lenguajes = $_GET[\"lenguajes\"];\n\n    foreach ($lenguajes as $lenguaje) \n    {\n        echo \"$lenguaje &lt;br /&gt;\";\n    }\n</code></pre>"},{"location":"ut04/ut0403/#3-volviendo-a-rellenar-un-formulario","title":"3. Volviendo a rellenar un formulario","text":"<p>Un sticky form es un formulario que recuerda sus valores. Para ello, hemos de rellenar los atributos <code>value</code> de los elementos HTML con la informaci\u00f3n que conten\u00edan:</p> <pre><code>&lt;?php\n   if (!empty($_POST['nombre']) &amp;&amp; !empty($_POST['modulos'])) \n   {\n     // Aqu\u00ed se incluye el c\u00f3digo a ejecutar cuando los datos son correctos\n   } else {\n     /* Generamos el formulario:\n      * El operador ?? verifica si el valor a la izquierda existe y no es null. \n      * Si es as\u00ed, se utiliza ese valor. Si no, se toma el valor a la derecha \n      * como valor predeterminado.     \n      */\n     $nombre = $_POST['nombre'] ?? \"\";  \n     $modulos = $_POST['modulos'] ?? [];\n?&gt;\n\n   &lt;form action=\"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;\" method=\"POST\"&gt;\n     &lt;p&gt;\n       &lt;label for=\"nombre\"&gt;Nombre alumno:&lt;/label&gt;\n       &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"&lt;?= $nombre ?&gt;\" /&gt; \n     &lt;/p&gt;\n     &lt;p&gt;\n       &lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWES\" value=\"DWES\"\n       &lt;?php if(in_array(\"DWES\",$modulos)) echo 'checked=\"checked\"'; ?&gt; /&gt;\n       &lt;label for=\"modulosDWES\"&gt;Desarrollo web en entorno servidor&lt;/label&gt;\n     &lt;/p&gt;\n     &lt;p&gt;\n       &lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWEC\" value=\"DWEC\"\n       &lt;?php if(in_array(\"DWEC\",$modulos)) echo 'checked=\"checked\"'; ?&gt; /&gt;\n       &lt;label for=\"modulosDWEC\"&gt;Desarrollo web en entorno cliente&lt;/label&gt;\n     &lt;/p&gt;\n      &lt;input type=\"submit\" value=\"Enviar\" name=\"enviar\"/&gt;\n   &lt;/form&gt;\n\n&lt;?php \n   } // cierre del else\n?&gt;\n</code></pre>"},{"location":"ut04/ut0403/#4-subiendo-archivos","title":"4. Subiendo archivos","text":"<p>Se almacenan en el servidor en el array <code>$_FILES</code> con el nombre del campo del tipo <code>file</code> del formulario.</p> <pre><code>&lt;form enctype=\"multipart/form-data\" action=\"&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;\"  method=\"POST\"&gt;\n    Archivo: &lt;input name=\"archivoEnviado\" type=\"file\" /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"submit\" name=\"btnSubir\" value=\"Subir\" /&gt;\n&lt;/form&gt;\n</code></pre> <p>Configuraci\u00f3n en <code>php.ini</code>:</p> <ul> <li><code>file_uploads</code>: on / off.</li> <li><code>upload_max_filesize</code>: 2M.</li> <li><code>upload_tmp_dir</code>: directorio temporal. No es necesario configurarlo, coger\u00e1 el predeterminado del sistema.</li> <li><code>post_max_size</code>: tama\u00f1o m\u00e1ximo de los datos POST. Debe ser mayor a upload_max_filesize.</li> <li><code>max_file_uploads</code>: n\u00famero m\u00e1ximo de archivos que se pueden cargar a la vez.</li> <li><code>max_input_time</code>: tiempo m\u00e1ximo empleado en la carga (GET/POST y upload \u2192 normalmente se configura en 60).</li> <li><code>memory_limit</code>: 128M.</li> <li><code>max_execution_time</code>: tiempo de ejecuci\u00f3n de un script (no tiene en cuenta el upload).</li> </ul> <p>Veamos de qu\u00e9 informaci\u00f3n disponemos en el array <code>$_FILES</code> para una imagen llamada <code>perfil.png</code> subida mediante nuestro formulario:</p> Formulario y retorno de $_FILESResultado <pre><code>&lt;form enctype=\"multipart/form-data\" action=\"&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;\"  method=\"POST\"&gt;\n    Archivo: &lt;input name=\"archivoEnviado\" type=\"file\" /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"submit\" name=\"btnSubir\" value=\"Subir\" /&gt;\n&lt;/form&gt;\n\n&lt;?php\n    if (isset($_POST['btnSubir'])) {\n        echo $_FILES['archivoEnviado']['name']; \n        echo \"&lt;br&gt;\";\n        echo $_FILES['archivoEnviado']['tmp_name'];\n        echo \"&lt;br&gt;\";\n        echo $_FILES['archivoEnviado']['type'];\n        echo \"&lt;br&gt;\";\n        echo $_FILES['archivoEnviado']['size'];\n\n    } else {\n        echo \"No se ha pulsado el bot\u00f3n de subir\";\n    }\n\n?&gt;\n</code></pre> <p>Par\u00e1metros de $_FILES.</p> <p>Cada archivo cargado en <code>$_FILES</code> tiene:</p> <ul> <li><code>name</code>: nombre.</li> <li><code>tmp_name</code>: nombre temporal asignado al fichero por el servidor. Este nombre es \u00fanico y permite identificarlo dentro de la carpeta de temporales.</li> <li><code>size</code>: tama\u00f1o en bytes.</li> <li><code>type</code>: tipo MIME.</li> <li><code>error</code>: c\u00f3digo de error de la subida, en nuestro caso 0 o UPLOAD_ERR_OK que indica que no se ha producido error alguno. C\u00f3digos de error subida de fichero.</li> </ul> <p>Para cargar los archivos, accedemos al array <code>$_FILES</code>:</p> <p><pre><code>&lt;?php\n  if (isset($_POST['btnSubir']) &amp;&amp; $_POST['btnSubir'] == 'Subir') {\n     if (isset($_FILES['archivoEnviado']) &amp;&amp; is_uploaded_file($_FILES['archivoEnviado']['tmp_name'])) {\n        // subido con \u00e9xito\n        $nombre = $_FILES['archivoEnviado']['name'];\n        move_uploaded_file($_FILES['archivoEnviado']['tmp_name'], \"./uploads/{$nombre}\");\n\n        echo \"&lt;p&gt;Archivo $nombre subido con \u00e9xito&lt;/p&gt;\";\n     }\n  } else {\n        echo \"&lt;p&gt;Error al subir el archivo: \" . $_FILES['archivoEnviado']['error'] . \"&lt;/p&gt;\";\n  }\n</code></pre> Debes tener en cuenta:</p> <ul> <li>que la carpeta <code>./uploads</code> est\u00e9 creada pr\u00e9viamente y con permisos de escritura.</li> <li>PHP tiene un l\u00edmite en el tama\u00f1o de los archivos que se pueden subir, configurado en php.ini mediante las directivas <code>upload_max_filesize</code> y <code>post_max_size</code>. </li> </ul>"},{"location":"ut04/ut0403/#41-filtrado-con-php-de-tipos-de-ficheros-subidos-con-html","title":"4.1. Filtrado con php de tipos de ficheros subidos con html","text":"<p>Una vez sabemos c\u00f3mo acceder a la informaci\u00f3n de los ficheros subidos, vamos a centrarnos en el filtrado de los tipos de ficheros aceptados. Limitar el tipo de fichero subido es recomendable para evitar posibles problemas de seguridad.</p> <p>Para este ejemplo se comprobar\u00e1 que la imagen subida sea en efecto una imagen con una de las extensiones m\u00e1s comunes y que su tama\u00f1o sea menor a 1 MB:</p> <pre><code>&lt;?php\n    $extensiones = ['image/jpg','image/jpeg','image/png'];\n    $max_tamanyo = 1024 * 1024 * 8;\n    if ( in_array($_FILES['archivoEnviado']['type'], $extensiones) ) {\n         echo 'Es una imagen';\n         if ( $_FILES['archivoEnviado']['size'] &lt; $max_tamanyo ) {\n              echo 'Pesa menos de 1 MB';\n         }\n    }\n?&gt;\n</code></pre>"},{"location":"ut04/ut0403/#42-escritura-de-imagenes-en-carpeta-del-servidor","title":"4.2. Escritura de im\u00e1genes en carpeta del servidor","text":"<p>Una vez tengamos nuestros ficheros filtrados vamos a proceder a guardarlos de forma permanente en una carpeta de nuestro servidor.</p> <p>Las imagenes o ficheros subidos mediante los formularios HTML son almacenados siempre en una carpeta temporal del sistema, por lo tanto deberemos moverlos para poder guardarlos permanentemente.</p> <p>Para trasladar los ficheros de la carpeta temporal directamente a nuestra carpeta elegida usaremos la  funci\u00f3n move_uploaded_file( origen, destino ).</p> <p>El siguiente ejemplo ser\u00eda un script alojado en la carpeta raiz de nuestra web, p.e. <code>index.php</code>:</p> <pre><code>&lt;?php\n  $ruta_indexphp = dirname(realpath(__FILE__));\n  $ruta_fichero_origen = $_FILES['archivoEnviado']['tmp_name'];\n  $ruta_nuevo_destino = $ruta_indexphp . '/uploads/' . $_FILES['imagen1']['name'];\n\n  if ( in_array($_FILES['archivoEnviado']['type'], $extensiones) ) \n  {   \n     echo 'Es una imagen';     \n     if ( $_FILES['archivoEnviado']['size']&lt; $max_tamanyo ) \n     {          \n        echo 'Pesa menos de 1 MB';          \n        if( move_uploaded_file ( $ruta_fichero_origen, $ruta_nuevo_destino ) ) \n        {                      \n            echo 'Fichero guardado con \u00e9xito';          \n        }     \n     }\n  }\n?&gt;\n</code></pre> <ul> <li>El nombre temporal del fichero subido, que se encuentra en la carpeta de temporales, es <code>$ruta_fichero_origen</code>.</li> <li>La ruta completa de destino del fichero, que se compone por una parte de la ruta raiz del script donde estamos trabajando (estamos programando en index.php) m\u00e1s el nombre de la carpeta que se ha creado para guardar las im\u00e1genes (/uploads) y por \u00faltimo el nombre definitivo que tendr\u00e1 el fichero (el nombre original del fichero).</li> </ul>"},{"location":"ut04/ut0403/#43-seguridad-de-escritura-de-imagenes-en-carpeta-del-servidor","title":"4.3. Seguridad de escritura de imagenes en carpeta del servidor","text":"<p>Al guardar los archivos subidos por los usuarios en nuestro servidor, puede ocurrir que no filtremos los ficheros introducidos, o guardemos ficheros susceptibles de provocar problemas de seguridad. </p> <p>Para evitar problemas de este tipo lo mejor ser\u00e1 incluir en la carpeta donde almacenamos los archivos (p.e. en la carpeta ./uploads) un peque\u00f1o script htaccess que evite la ejecuci\u00f3n de c\u00f3digo:</p> <pre><code>RemoveHandler .phtml .php3 .php .pl .py .jsp .asp .htm .shtml .sh .cgi .dat\nRemoveType .phtml .php3 .php .pl .py .jsp .asp .htm .shtml .sh .cgi .dat\n</code></pre> <p>Con estas dos l\u00edneas en un fichero con extensi\u00f3n .htaccess evitaremos una posible ejecuci\u00f3n de c\u00f3digo por parte de usuarios malintencionados. Recuerda que debes incluir este fichero en la misma carpeta donde almacenas los ficheros.</p> <p>Y ya est\u00e1, con esto tendr\u00edamos terminado un formulario para subir imagenes con php totalmente funcional, con comprobaciones de seguridad para evitar subidas de ficheros inesperadas que puedan provocar problemas o hackeos inesperados.</p> <p>Extra</p> Ejercicios a realizar <ul> <li><code>Ejercicio 402</code></li> <li><code>Ejercicio 403</code></li> <li><code>Ejercicio 404</code></li> <li><code>Ejercicio 405</code></li> </ul>"},{"location":"ut04/ut0403/#extra-1-mostrar-imagenes-subidas-con-html","title":"Extra 1: mostrar imagenes subidas con html","text":"<p>Mostrar las imagenes guardadas en nuestra carpeta de almacenamiento es sencillo, tan solo deberemos incluir la ruta hasta el fichero en una etiqueta IMG html:</p> <pre><code>&lt;img src=\"uploads/nombreImagen.jpg\" /&gt;\n</code></pre>"},{"location":"ut04/ut0403/#extra-2-descargar-ficheros-subidos-con-html","title":"Extra 2: descargar ficheros subidos con html","text":"<p>Si queremos incluir un enlace de descarga para el fichero almacenado,  en vez de utilizar una etiqueta IMG usaremos una etiqueta para enlaces con el atributo HREF la ruta al fichero:</p> <pre><code>&lt;a href=\"uploads/nombreImagen.jpg\"&gt; Descarga de la imagen &lt;/a&gt;\n</code></pre> <p>Este enlace producir\u00e1 que el usuario descargue el fichero en cuesti\u00f3n; no obstante si el archivo es por ejemplo una imagen o pdf, el usuario en vez de lograr una descarga directa visualizar\u00e1 el contenido, teniendo que descargarlo haciendo uso de la opci\u00f3n descargar del men\u00fa desplegable con clic derecho.</p> <p>Evitar la visualizaci\u00f3n de ficheros es posible gracias a HTML5 y los navegadores m\u00e1s modernos: Chrome, Firefox, Opera. Deberemos incluir el atributo <code>download</code> en la etiqueta de enlace anterior, as\u00ed, el enlace final para una descarga forzada quedar\u00eda as\u00ed:</p> <pre><code>&lt;a href=\"uploads/nombreImagen.jpg\" download=\"nombreImagen\"&gt;Descarga la imagen&lt;/a&gt;\n</code></pre>"},{"location":"ut04/ut0404/","title":"Ut0404","text":"<p>Se devuelven mediante la funci\u00f3n <code>header(cadena)</code>. Mediante las cabeceras podemos configurar el tipo de contenido, tiempo de expiraci\u00f3n, redireccionar el navegador, especificar errores HTTP, etc.</p> <p>La cabecera debe ser lo primero a devolver</p> <p>El motivo es que en cuando un programa genera contenido HTML, el servidor genera autom\u00e1ticamente la informaci\u00f3n de estado y los campos de cabecera, y a continuaci\u00f3n env\u00eda el contenido generado. Si despu\u00e9s el programa contiene una instrucci\u00f3n header(), se produce un error porque las cabeceras ya se han enviado (ni siquiera debes dejar una linea en blanco).</p> <pre><code>&lt;?php   \n    header(\"Content-Type: text/plain\");\n    header(\"Location: http://www.ejemplo.com/inicio.html\");\n    exit(); \n</code></pre> <p>Inspeccionando las cabeceras</p> <p>Se puede comprobar en las herramientas del desarrollador de los navegadores web mediante Developer Tools &gt; Network &gt; (doble clic ) &gt; Headers.</p> <p>Es muy com\u00fan configurar las cabeceras para evitar consultas a la cach\u00e9 o provocar su renovaci\u00f3n.</p> <p>Ejemplo de uso de <code>header</code></p> <pre><code>&lt;?php\n  header(\"Expires: Sun, 31 Jan 2025 23:59:59 GMT\");\n\n  // tres horas\n  $now = time();\n  $horas3 = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\", $now + 60 * 60 * 3); // convierte en una cadena formateada en GMT (Tiempo Universal Coordinado)\n  header(\"Expires: {$horas3}\");\n\n  // un a\u00f1o\n  $now = time();\n  $anyo1 = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\", $now + 365 * 86440);\n  header(\"Expires: {$anyo1}\");\n\n  // se marca como expirado (fecha en el pasado)\n  $pasado = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\");\n  header(\"Expires: {$pasado}\");\n\n  // evitamos cache de navegador y/o proxy\n  header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");   // Fecha en el pasado\n  header(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\"); // Fecha de \u00faltima modificaci\u00f3n\n  header(\"Cache-Control: no-store, no-cache, must-revalidate\"); // Control estricto de la cach\u00e9\n  header(\"Cache-Control: post-check=0, pre-check=0\", false); // Directiva adicional para control de cach\u00e9\n  header(\"Pragma: no-cache\"); // Compatibilidad con HTTP 1.0\n</code></pre> <p>Estas l\u00edneas env\u00edan varias cabeceras para evitar completamente que el navegador o el proxy almacenen el recurso en cach\u00e9:</p> <ul> <li><code>header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");</code>: Marca el recurso como expirado hace mucho tiempo, lo que fuerza al navegador a solicitar siempre una copia nueva del recurso desde el servidor.</li> <li><code>header(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\");</code>: Env\u00eda la fecha y hora actuales como la \u00faltima modificaci\u00f3n del recurso. Esto ayuda al navegador a saber cu\u00e1ndo fue la \u00faltima vez que se actualiz\u00f3 el contenido, lo que puede influir en c\u00f3mo maneja la cach\u00e9.</li> <li><code>header(\"Cache-Control: no-store, no-cache, must-revalidate\");</code>: Esta cabecera tiene tres partes importantes:</li> <li><code>no-store</code>: Impide que el navegador almacene el recurso en cach\u00e9.</li> <li><code>no-cache</code>: Obliga al navegador a verificar siempre con el servidor si el recurso ha cambiado antes de usar una copia almacenada.</li> <li><code>must-revalidate</code>: El navegador debe validar siempre el recurso con el servidor antes de usar una versi\u00f3n almacenada.</li> <li><code>header(\"Cache-Control: post-check=0, pre-check=0\", false);</code>: Esta cabecera es para navegadores y proxies antiguos, indicando que no se debe realizar ninguna verificaci\u00f3n de cach\u00e9 antes o despu\u00e9s de almacenar el recurso.</li> <li><code>header(\"Pragma: no-cache\");</code>: Esta es una directiva utilizada en HTTP 1.0 (anterior a HTTP/1.1) que tambi\u00e9n impide la cach\u00e9. Se incluye por compatibilidad con navegadores antiguos.</li> </ul>"},{"location":"ut04/ut0405/","title":"Ut0405","text":"<p>HTTP es un protocolo stateless (sin estado). Por ello, se simula el estado mediante el uso de cookies, tokens o sesiones. El estado es necesario para procesos tales como el carrito de la compra, operaciones asociadas a un usuario, etc... El mecanismo de PHP para gestionar la sesi\u00f3n emplea cookies de forma interna. Las cookies se almacenan en el navegador, y la sesi\u00f3n en el servidor web.</p>"},{"location":"ut04/ut0405/#1-cookies","title":"1. Cookies","text":"<p>Las cookies se almacenan en el array global <code>$_COOKIE</code>. Lo que coloquemos dentro de este array, se guardar\u00e1 en el cliente</p> <p>Aceptar cookies</p> <p>Hay que tener presente que el cliente puede no querer almacenarlas. Entra...cookies?</p> <p>La mayor\u00eda de navegadores modernos, tienen una limitaci\u00f3n de 180-200 cookies por dominio (siendo el tama\u00f1o m\u00e1ximo de cada cookie de 4KB) y 4000-8000 en total en el navegador.</p> <p>En PHP, para crear una cookie se utiliza la funci\u00f3n <code>setcookie</code>:</p> <pre><code>&lt;?php\n  setcookie(nombre [, valor [, expira [, ruta [, dominio [, seguro [, httponly ]]]]]]);\n  setcookie(nombre [, valor = \"\" [, opciones = [] ]] )\n?&gt;\n</code></pre> <p>Destacar que el nombre no puede contener espacios ni el caracter <code>;</code>.</p> <p>Ejemplo</p> <p>Por ejemplo, mediante cookies podemos comprobar la cantidad de visitas diferentes que realiza un usuario: <pre><code>&lt;?php\n  $accesosPagina = 0;\n  if (isset($_COOKIE['accesos'])) { \n     $accesosPagina = $_COOKIE['accesos']; // recuperamos una cookie\n     setcookie('accesos', ++$accesosPagina); // le asignamos un valor\n  }\n?&gt;\n</code></pre></p> <p>Inspeccionando las cookies</p> <p>Si queremos ver que contienen las cookies que tenemos almacenadas en el navegador, se puede comprobar su valor en Dev Tools &gt; Storage</p> Ejemplo de cookies 1) <code>cookiesEj.html</code>2) cookiesEjTmp.php3) cookiesEj.php4) cookiesEjVa.php <p><pre><code>&lt;center&gt;\n    &lt;h2&gt;elige idioma:&lt;/h2&gt;\n    &lt;a href=\"cookiesEjTmp.php?idioma=va\"&gt;\n        &lt;img src=\"./images/flag_valencian.png\" height=\"70\" width=\"70\" title=\"valenci\u00e0\"&gt;\n    &lt;/a&gt;\n    &lt;a href=\"cookiesEjTmp.php?idioma=es\"&gt;\n        &lt;img src=\"./images/flag_spanish.png\" height=\"70\" width=\"70\" title=\"castellano\"&gt;\n    &lt;/a&gt;\n    &lt;a href=\"cookiesEjTmp.php?idioma=en\"&gt;\n        &lt;img src=\"./images/flag_england.png\" height=\"70\" width=\"70\" title=\"ingl\u00e9s\"&gt;\n    &lt;/a&gt;\n&lt;/center&gt;\n</code></pre> Ejemplo para mostrar en cookiesEj.html.</p> <p>Creamos fichero <code>cookiesEjTmp.php</code> en el que comprueba si se ha enviado el par\u00e1metro <code>idioma</code>, si es as\u00ed, crea una cookie de nombre <code>idioma</code>, valor <code>$_GET['idioma']</code>, tiempo <code>1 hora</code> y que trabaja desde la ra\u00edz <code>\\</code>.  Adem\u00e1s, se ha a\u00f1adido una cabecera que redireccionar\u00e1 a la p\u00e1gina <code>cookiesEj.php</code>: <pre><code>&lt;?php\n    if (isset($_GET['idioma'])){\n        setcookie('idioma',$_GET['idioma'], time()+3600, \"/\");\n        header(\"Location:cookiesEj.php\");\n    }\n?&gt;\n</code></pre></p> <p>Se comprueba el valor de la cookie <code>idioma</code>: <pre><code>&lt;?php\n    if (!$_COOKIE['idioma']){\n        header('Location:cookiesEj.html');\n    } else if ($_COOKIE['idioma']==\"va\"){\n        header('Location:cookiesEjVa.php');\n    } else if ($_COOKIE['idioma']==\"va\"){\n        header('Location:cookiesEjEs.php');\n    } else if ($_COOKIE['idioma']==\"va\"){\n        header('Location:cookiesEjEn.php');\n    }\n?&gt;\n</code></pre></p> <p>El fichero, por ejemplo, <code>cookiesEjVa.php</code> quedar\u00eda:     <pre><code>&lt;h2&gt; idioma en valenci\u00e0 &lt;/h2&gt;\n&lt;br /&gt; &lt;br /&gt;\n&lt;a href=\"cookiesEj2BorrarCookies.php\"&gt;borrar cookies&lt;/a&gt;\n</code></pre></p> <p>El tiempo de vida de las cookies puede ser tan largo como el sitio web en el que residen. Ellas seguir\u00e1n ah\u00ed, incluso si el navegador est\u00e1 cerrado o abierto.</p> <p>Para borrar una cookie se puede poner que expiren en el pasado:</p> <pre><code>&lt;?php\n    setcookie(nombre, \"\", 1) // pasado\n</code></pre> <p>O que caduquen dentro de un periodo de tiempo determinado:</p> <pre><code>&lt;?php\n    setcookie(nombre, valor, time() + 3600) // Caducan dentro de una hora\n</code></pre> Ejemplo 2 <p>Siguiendo con el ejemplo anterior de idiomas, podr\u00edamos crear el fichero <code>cookiesEj2BorrarCookies.php</code> y, desde ah\u00ed, eliminar la cookie idioma:</p> <pre><code>&lt;?php\n    setcookie('idioma', '', time()-1, '/');\n    header('Location:cookiesEj.html');\n?&gt;\n</code></pre> Resultado de una segunda petici\u00f3n a servidor con cookies. <p>Se utilizan para:</p> <ul> <li>Recordar los inicios de sesi\u00f3n.</li> <li>Almacenar valores temporales de usuario.</li> <li>Si un usuario est\u00e1 navegando por una lista paginada de art\u00edculos, ordenados de cierta manera, podemos almacenar el ajuste de la clasificaci\u00f3n.</li> </ul> <p>La alternativa en el cliente para almacenar informaci\u00f3n en el navegador es el objeto LocalStorage.   </p>"},{"location":"ut04/ut0405/#2-sesion","title":"2. Sesi\u00f3n","text":"<p>La sesi\u00f3n a\u00f1ade la gesti\u00f3n del estado a HTTP, almacenando en este caso la informaci\u00f3n en el servidor. Cada visitante tiene un ID de sesi\u00f3n \u00fanico; el cual por defecto se almacena en una cookie denominada <code>PHPSESSID</code>. Si el cliente no tiene las cookies activas, el ID se propaga en cada URL dentro del mismo dominio. Cada sesi\u00f3n tiene asociado un almac\u00e9n de datos mediante el array global <code>$_SESSION</code> en el cual podemos almacenar y recuperar informaci\u00f3n.</p> <p>La sesi\u00f3n comienza al ejecutar un script PHP. Se genera un nuevo ID y se cargan los datos del almac\u00e9n:</p> Resultado de una segunda petici\u00f3n a servidor con sesiones. <p>El trabajo con sesiones tiene tres partes:</p> <ul> <li> <p>Creaci\u00f3n o apertura de la sesi\u00f3n:    Cuando alguna p\u00e1gina crea una sesi\u00f3n utilizando la cabecera <code>session_start();</code>(recuerda que las cabeceras deben ir justo despu\u00e9s de <code>&lt;?php</code>), el servidor asocia al navegador del usuario un identificador de usuario \u00fanico. El identificador se guarda en el usuario en forma de cookie o, si el navegador del usuario no permite la creaci\u00f3n de cookies, a\u00f1adiendo el identificador en la direcci\u00f3n de la p\u00e1gina.</p> </li> <li> <p>Utilizaci\u00f3n de la sesi\u00f3n:    Si ya se ha creado la sesi\u00f3n, las p\u00e1ginas solicitadas por el mismo navegador pueden guardar y recuperar informaci\u00f3n en el servidor, informaci\u00f3n que se asocia al identificador de usuario, por lo que no es accesible a otros usuarios. La informaci\u00f3n se conserva hasta que el usuario o el servidor destruyan la sesi\u00f3n.</p> </li> <li> <p>Destrucci\u00f3n o cierre de la sesi\u00f3n:    Tanto el usuario como el servidor pueden cerrar la sesi\u00f3n. El usuario puede destruir la sesi\u00f3n cerrando el navegador. El servidor puede destruir la sesi\u00f3n cuando alguna p\u00e1gina utilice la funci\u00f3n <code>session_destroy();</code> o al cabo de un tiempo determinado (definido mediante la funci\u00f3n session_set_cookie_params()).</p> </li> </ul> <p>Las operaciones que podemos realizar con la sesi\u00f3n son:</p> <pre><code>&lt;?php\n    session_start(); // carga la sesi\u00f3n\n\n    session_id() // devuelve el id\n    $_SESSION[clave] = valor; // inserci\u00f3n\n\n    session_destroy(); // destruye la sesi\u00f3n\n    unset($_SESSION[clave]); // borrado\n</code></pre> <p>Utilizaci\u00f3n de sesi\u00f3n</p> <p>Vamos a ver mediante un ejemplo c\u00f3mo podemos insertar en un p\u00e1gina datos en la sesi\u00f3n para posteriormente en otra p\u00e1gina acceder a esos datos. </p> <code>sesion1.php</code><code>sesion2.php</code> <pre><code>&lt;?php\n    session_start(); // inicializamos\n\n    $_SESSION[\"ies\"] = \"IES Mestre Ramon Esteve\"; // asignaci\u00f3n\n\n    $instituto = $_SESSION[\"ies\"]; // recuperaci\u00f3n\n    echo \"Estamos en el $instituto\";\n?&gt;\n&lt;br /&gt;\n&lt;a href=\"sesion2.php\"&gt;Y luego&lt;/a&gt;\n</code></pre> <pre><code>&lt;?php\n    session_start();\n    $instituto = $_SESSION[\"ies\"]; // recuperaci\u00f3n\n    echo \"Otra vez, en el $instituto\";\n?&gt;\n</code></pre> <p>Configurando la sesi\u00f3n en <code>php.ini</code></p> <p>Las siguientes propiedades de <code>php.ini</code> permiten configurar algunos aspectos de la sesi\u00f3n: - <code>session.save_handler</code>: controlador que gestiona c\u00f3mo se almacena (valor <code>files</code>). - <code>session.save_path</code>: ruta donde se almacenan los archivos con los datos (si tenemos un cluster, podr\u00edamos usar /mnt/sessions en todos los servidores de manera que apuntan a una carpeta compartida). - <code>session.name</code>: nombre de la sesi\u00f3n (PHSESSID). - <code>session.auto_start</code>: Se puede hacer que se autocargue con cada script. Por defecto est\u00e1 deshabilitado. - <code>session.cookie_lifetime</code>: tiempo de vida por defecto. M\u00e1s informaci\u00f3n en la documentaci\u00f3n oficial.</p> <p>Cookie VS session</p> <p>Las sesiones no deben confundirse con las cookies. Las cookies es un m\u00e9todo que permite guardar informaci\u00f3n en el ordenador del cliente para recuperarla en el futuro; mientras que en las sesiones la informaci\u00f3n se mantiene en el servidor hasta que se cierra la sesi\u00f3n (por intervenci\u00f3n del usuario o por tiempo). En el manual de PHP se ofrece un cap\u00edtulo dedicado a las sesiones.</p> Ejemplo <p>He aqu\u00ed un ejemplo gr\u00e1fico de utilizaci\u00f3n de sesiones. Programa de dos p\u00e1ginas que muestra gr\u00e1ficamente los votos recogidos por dos opciones. - La primera p\u00e1gina contiene un formulario con tres botones de tipo <code>submit</code> con el mismo atributo <code>name</code>. - Dos botones permiten votar a una u otra opci\u00f3n. - El tercer bot\u00f3n pone a cero los contadores de votos. - La segunda p\u00e1gina recibe el dato, modifica la variable de sesi\u00f3n que contiene el n\u00famero de votos de la opci\u00f3n elegida (o ambas) y redirige a la primera p\u00e1gina. - Los dos n\u00fameros se guardan en dos variables de sesi\u00f3n. Si las variables de sesi\u00f3n no est\u00e1n definidas, se les dar\u00e1 el valor 0. - Las franjas correspondientes a los votos se alargan de 10px en 10px y no tienen l\u00edmite de tama\u00f1o.</p> <code>ps1.php</code><code>ps2.php</code>Resultado <pre><code>&lt;?php\n// Accedemos a la sesi\u00f3n\nsession_name(\"sesion1\");\nsession_start();\n\n// Si alg\u00fan contador no est\u00e1 guardado en la sesi\u00f3n, ponemos ambos a cero\nif (!isset($_SESSION[\"a\"]) || !isset($_SESSION[\"b\"])) {\n    $_SESSION[\"a\"] = $_SESSION[\"b\"] = 0;\n}\n?&gt;\n\n&lt;!-- ... --&gt;\n&lt;body&gt;\n&lt;h2&gt;Votar una opci\u00f3n&lt;/h2&gt;\n&lt;form action=\"ps2.php\" method=\"get\"&gt;\n  &lt;table&gt;\n  &lt;tr&gt;\n    &lt;td style=\"vertical-align: top;\"&gt;\n      &lt;button type=\"submit\" name=\"accion\" value=\"a\" \n              style=\"font-size: 60px; line-height: 50px; color: hwb(200 0% 0%);\"&gt;  &amp;#x2714; &lt;/button&gt;\n    &lt;/td&gt;\n    &lt;td&gt;\n      &lt;?php\n      // Dibujamos la primera barra\n      print \" &lt;svg width=\\\"$_SESSION[a]\\\" height=\\\"50\\\"&gt;\\n\";\n      print \"   &lt;line x1=\\\"0\\\" y1=\\\"25\\\" x2=\\\"$_SESSION[a]\\\" y2=\\\"25\\\" stroke=\\\"hwb(200 0% 0%)\\\" stroke-width=\\\"50\\\" /&gt;\\n\";\n      print \" &lt;/svg&gt;\\n\";\n      ?&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;button type=\"submit\" name=\"accion\" value=\"b\" style=\"font-size: 60px; line-height: 50px; color: hwb(35 0% 0%)\"&gt;&amp;#x2714;\n      &lt;/button&gt;\n    &lt;/td&gt;\n      &lt;?php\n      // Dibujamos la segunda barra\n      print \" &lt;td&gt;\\n\";\n      print \" &lt;svg width=\\\"$_SESSION[b]\\\" height=\\\"50\\\"&gt;\\n\";\n      print \"   &lt;line x1=\\\"0\\\" y1=\\\"25\\\" x2=\\\"$_SESSION[b]\\\" y2=\\\"25\\\" stroke=\\\"hwb(35 0% 0%)\\\" stroke-width=\\\"50\\\" /&gt;\\n\";\n      print \" &lt;/svg&gt;\\n\";\n      print \" &lt;/td&gt;\\n\";\n      ?&gt;\n  &lt;/tr&gt;\n  &lt;/table&gt;\n  &lt;p&gt;\n    &lt;button type=\"submit\" name=\"accion\" value=\"cero\"&gt;Poner a cero&lt;/button&gt;\n  &lt;/p&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;?php\nsession_name(\"sesion1\");\nsession_start();\n\n// Si alguno de los n\u00fameros de votos no est\u00e1 guardado en la sesi\u00f3n, redirigimos a la primera p\u00e1gina\nif (!isset($_SESSION[\"a\"]) || !isset($_SESSION[\"b\"])) {\n    header(\"Location:ps1.php\");\n    exit;\n}\n\n$accion = $_GET['accion'];\n// Dependiendo de la acci\u00f3n recibida, modificamos el n\u00famero correspondiente\nif ($accion == \"a\") {\n    $_SESSION[\"a\"] += 10;\n} elseif ($accion == \"b\") {\n    $_SESSION[\"b\"] += 10;\n} elseif ($accion == \"cero\") {\n    $_SESSION[\"a\"] = $_SESSION[\"b\"] = 0;\n}\n\n// Volvemos al formulario\nheader(\"Location:ps1.php\");\n</code></pre> <p>Resultado para ejemplo.</p> Ejercicios a realizar <ul> <li><code>Ejercicio 406</code></li> <li><code>Ejercicio 407</code></li> <li><code>Ejercicio 408</code></li> <li><code>Ejercicio 409</code></li> </ul>"},{"location":"ut04/ut0406/","title":"Ut0406","text":"<p>Una sesi\u00f3n establece una relaci\u00f3n an\u00f3nima con un usuario particular, de manera que podemos saber si es el mismo usuario entre dos peticiones distintas. Si preparamos un sistema de login, podremos saber qui\u00e9n utiliza nuestra aplicaci\u00f3n.</p> <p>Para ello, preparemos un sencillo sistema de autenticaci\u00f3n:</p> <ul> <li>Mostrar el formulario login/password.</li> <li>Comprobar los datos enviados.</li> <li>A\u00f1adir el login a la sesi\u00f3n.</li> <li>Comprobar el login en la sesi\u00f3n para realizar tareas espec\u00edficas del usuario.</li> <li>Eliminar el login de la sesi\u00f3n cuando el usuario la cierra.</li> </ul> <p>Vamos a ver en c\u00f3digo cada paso del proceso. Comenzamos con el archivo <code>index.php</code>:</p> <pre><code>&lt;form action='login.php' method='post'&gt;\n  &lt;fieldset&gt;\n    &lt;legend&gt;Login&lt;/legend&gt;\n    &lt;div&gt;&lt;span class='error'&gt;&lt;?php echo $error; ?&gt;&lt;/span&gt;&lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;label for='usuario'&gt;Usuario:&lt;/label&gt;&lt;br /&gt;\n        &lt;input type='text' name='inputUsuario' id='usuario' maxlength=\"50\" /&gt;&lt;br /&gt;\n    &lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;label for='password'&gt;Contrase\u00f1a:&lt;/label&gt;&lt;br /&gt;\n        &lt;input type='password' name='inputPassword' id='password' maxlength=\"50\" /&gt;&lt;br /&gt;\n    &lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;input type='submit' name='enviar' value='Enviar' /&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n  &lt;/form&gt;\n</code></pre> <p>Al hacer submit nos lleva a <code>login.php</code>, el cual hace de controlador:</p> <pre><code>&lt;?php\n// Comprobamos si ya se ha enviado el formulario\nif (isset($_POST['enviar'])) {\n    $usuario = $_POST['inputUsuario'];\n    $password = $_POST['inputPassword'];\n\n    // validamos que recibimos ambos par\u00e1metros\n    if (empty($usuario) || empty($password)) {\n        $error = \"Debes introducir un usuario y contrase\u00f1a\";\n        include \"index.php\";\n    } else {\n        if ($usuario == \"admin\" &amp;&amp; $password == \"admin\") {\n            // almacenamos el usuario en la sesi\u00f3n\n            session_start();\n            $_SESSION['usuario'] = $usuario;\n            // cargamos la p\u00e1gina principal\n            include \"main.php\";\n        } else {\n            // Si las credenciales no son v\u00e1lidas, se vuelven a pedir\n            $error = \"Usuario o contrase\u00f1a no v\u00e1lidos!\";\n            include \"index.php\";\n        }\n    }\n}\n</code></pre> <p>Dependiendo del usuario que se haya logueado, vamos a ir a una vista o a otra. Por ejemplo, en <code>main.php</code> tendr\u00edamos:</p> <pre><code>&lt;?php\n    // Recuperamos la informaci\u00f3n de la sesi\u00f3n\n    if(!isset($_SESSION)) {\n        session_start();\n    }\n\n    // Y comprobamos que el usuario se haya autentificado\n    if (!isset($_SESSION['usuario'])) {\n       die(\"Error - debe &lt;a href='index.php'&gt;identificarse&lt;/a&gt;.&lt;br /&gt;\");\n    }\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Listado de productos&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Bienvenido &lt;?= $_SESSION['usuario'] ?&gt;&lt;/h1&gt;\n    &lt;p&gt;Pulse &lt;a href=\"logout.php\"&gt;aqu\u00ed&lt;/a&gt; para salir&lt;/p&gt;\n    &lt;p&gt;Volver al &lt;a href=\"main.php\"&gt;inicio&lt;/a&gt;&lt;/p&gt;\n    &lt;h2&gt;Listado de productos&lt;/h2&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Producto 1&lt;/li&gt;\n        &lt;li&gt;Producto 2&lt;/li&gt;\n        &lt;li&gt;Producto 3&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Finalmente, necesitamos la opci\u00f3n de cerrar la sesi\u00f3n que colocamos en <code>logout.php</code>:</p> <pre><code>&lt;?php\n    // Recuperamos la informaci\u00f3n de la sesi\u00f3n\n    session_start();\n\n    // Y la destruimos\n    session_destroy();\n    header(\"Location: index.php\");\n?&gt;\n</code></pre> <p>!!!note \"Autenticaci\u00f3n en producci\u00f3n     En la actualidad la autenticaci\u00f3n de usuario no se realiza gestionando la sesi\u00f3n directamente, sino que se realiza mediante alg\u00fan framekwork que abstrae todo el proceso o la integraci\u00f3n de mecanismos de autenticaci\u00f3n tipo OAuth, como estudiaremos en el segundo bloque de nuestro temario Laravel.</p> Ejercicios a realizar <ul> <li><code>Ejercicio 410</code></li> <li><code>Ejercicio 411</code></li> <li><code>Ejercicio 412</code></li> <li><code>Ejercicio 413</code></li> <li><code>Ejercicio 414</code></li> <li><code>Ejercicio 415</code></li> </ul> Realizar, adem\u00e1s, la actividad proyecto Videoclub 3.0 <ul> <li><code>Ejercicio 416</code></li> <li><code>Ejercicio 417</code></li> <li><code>Ejercicio 418</code></li> <li><code>Ejercicio 419</code></li> <li><code>Ejercicio 420</code></li> <li><code>Ejercicio 421</code></li> <li><code>Ejercicio 422</code></li> </ul>"},{"location":"ut04/ut04ac/","title":"Ut04ac","text":""},{"location":"ut04/ut04ac/#inicio","title":"Inicio","text":""},{"location":"ut04/ut04ac/#ejercicio-401","title":"Ejercicio 401","text":"<ul> <li><code>401server.php</code>: igual que el ejemplo visto en los apuntes muestra los valores de <code>$_SERVER</code> al ejecutar un script en tu ordenador.</li> <li>Prueba a pasarle par\u00e1metros (p.e. nombre y apellidos) por GET desde <code>401get.html</code>.</li> <li>En otro ejemplo <code>401getNada.html</code> no le pases ning\u00fan par\u00e1metro.</li> <li> <p>Prepara un formulario (<code>401post.html</code>) que haga un env\u00edo por POST (p.e. nombre y apellidos) y compru\u00e9balo de nuevo.</p> </li> <li> <p>Crea una p\u00e1gina (<code>401enlace.html</code>) que tenga un enlace a <code>401server.php</code> y comprueba el valor de <code>HTTP_REFERER</code>.</p> </li> </ul>"},{"location":"ut04/ut04ac/#formularios","title":"Formularios","text":""},{"location":"ut04/ut04ac/#ejercicio-402","title":"Ejercicio 402","text":"<p><code>402formulario.html</code> y <code>402formulario.php</code>: Crea un formulario que solicite:</p> <ul> <li>Nombre y apellidos.</li> <li>Email.</li> <li>URL p\u00e1gina personal.</li> <li>Sexo (radio).</li> <li>N\u00famero de convivientes en el domicilio.</li> <li>Aficiones (checkboxes) \u2013 poner m\u00ednimo 4 valores.</li> <li>Men\u00fa favorito (lista selecci\u00f3n m\u00faltiple) \u2013 poner m\u00ednimo 4 valores.</li> </ul> <p>Muestra los valores cargados en una tabla-resumen.</p>"},{"location":"ut04/ut04ac/#ejercicio-403","title":"Ejercicio 403","text":"<p><code>403validacion.php</code>: a partir del formulario anterior, introduce validaciones en HTML mediante el atributo <code>required</code> de los campos (usa tambi\u00e9n los tipos adecuados para cada campo), y comprueba los tipos de los datos y que cumplen los valores esperados (por ejemplo, en los checkboxes que los valores recogidos forman parte de todos los posibles). </p> <p>Prueba a pasarle datos erroneos via URL y comprobar su comportamiento.</p> <p>Nota</p> <p>Investiga el uso de la funci\u00f3n <code>filter_var</code>.</p>"},{"location":"ut04/ut04ac/#ejercicio-404","title":"Ejercicio 404","text":"<p><code>404subida.html</code> y <code>404subida.php</code>: crea un formulario que permita subir un archivo al servidor. Adem\u00e1s del fichero, debe pedir en el mismo formulario dos campos num\u00e9ricos que soliciten la anchura y la altura. Comprueba que tanto el fichero como los datos llegan correctamente.</p>"},{"location":"ut04/ut04ac/#ejercicio-405","title":"Ejercicio 405","text":"<p><code>405subidaImagen.php</code>: modifica el ejercicio anterior para que \u00fanicamente permita subir im\u00e1genes (comprueba la propiedad <code>type</code> del archivo subido). Si el usuario selecciona otro tipo de archivos, se le debe informar del error y permitir que suba un nuevo archivo.</p> <p>En el caso de subir el tipo correcto, visualizar la imagen con el tama\u00f1o de anchura y altura recibido como par\u00e1metro.</p>"},{"location":"ut04/ut04ac/#cookies-y-sesion","title":"Cookies y sesi\u00f3n","text":""},{"location":"ut04/ut04ac/#ejercicio-406","title":"Ejercicio 406","text":"<p><code>406contadorVisitas.php</code>: Mediante el uso de cookies, informa al usuario de si es su primera visita, o si no lo es, muestre su valor (valor de un contador). Adem\u00e1s, debes permitir que el usuario reinicialice su contador de visitas.</p>"},{"location":"ut04/ut04ac/#ejercicio-407","title":"Ejercicio 407","text":"<p><code>407fondo.php</code>: Mediante el uso de cookies, crea una p\u00e1gina con un desplegable con varios colores, de manera que el usuario pueda cambiar el color de fondo de la p\u00e1gina (atributo <code>bgcolor</code>). Al cerrar la p\u00e1gina, \u00e9sta debe recordar, al menos durante 24h, el color elegido y la pr\u00f3xima vez que se cargue la pagina, lo haga con el \u00faltimo color seleccionado.</p>"},{"location":"ut04/ut04ac/#ejercicio-408","title":"Ejercicio 408","text":"<p><code>408fondoSesion1.php</code>: Modifica el ejercicio anterior para almacenar el color de fondo en la sesi\u00f3n y no emplear cookies. Adem\u00e1s, debe contener un enlace al siguiente archivo. </p> <p><code>408fondoSesion2.php</code>: Debe mostrar el color y dar la posibilidad de:</p> <ul> <li>volver a la p\u00e1gina anterior mediante un enlace</li> <li>y mediante otro enlace, vaciar la sesi\u00f3n y volver a la p\u00e1gina anterior.</li> </ul>"},{"location":"ut04/ut04ac/#ejercicio-409","title":"Ejercicio 409","text":"<p>Haciendo uso de la sesi\u00f3n, vamos a dividir el formulario del ejercicio <code>402formulario.php</code> en 2 subformularios:</p> <ul> <li><code>409formulario1.php</code> env\u00eda los datos (nombre y apellidos, email, url y sexo) a <code>409formulario2.php</code>.</li> <li><code>409formulario2.php</code> lee los datos y los mete en la sesi\u00f3n. A continuaci\u00f3n, muestra el resto de campos del formulario a rellenar (convivientes, aficiones y men\u00fa). Env\u00eda estos datos a <code>409formulario3.php</code>.</li> <li><code>409formulario3.php</code> recoge los datos enviados en el paso anterior y junto a los que ya estaban en la sesi\u00f3n, se muestran todos los datos en una tabla/lista desordenada.</li> </ul>"},{"location":"ut04/ut04ac/#autenticacion","title":"Autenticaci\u00f3n","text":"<p>En los siguientes ejercicios vamos a montar una estructura de inicio de sesi\u00f3n similar a la vista en los apuntes.</p>"},{"location":"ut04/ut04ac/#ejercicio-410","title":"Ejercicio 410","text":"<p><code>410index.php</code>: formulario de inicio de sesi\u00f3n</p>"},{"location":"ut04/ut04ac/#ejercicio-411","title":"Ejercicio 411","text":"<p><code>411login.php</code>: hace de controlador, por lo que debe comprobar los datos recibidos (solo permite la entrada de <code>usuario / usuario</code> y si todo es correcto, ceder el control a la vista del siguiente ejercicio. No contiene c\u00f3digo HTML.</p>"},{"location":"ut04/ut04ac/#ejercicio-412","title":"Ejercicio 412","text":"<p><code>412peliculas.php</code>: vista que muestra como t\u00edtulo \"Listado de Pel\u00edculas\", y una lista desordenada con tres pel\u00edculas.</p>"},{"location":"ut04/ut04ac/#ejercicio-413","title":"Ejercicio 413","text":"<p><code>413logout.php</code>: vac\u00eda la sesi\u00f3n y nos lleva de nuevo al formulario de inicio de sesi\u00f3n. No contiene c\u00f3digo HTML</p>"},{"location":"ut04/ut04ac/#ejercicio-414","title":"Ejercicio 414","text":"<p><code>414series.php</code>: A\u00f1ade un nueva vista similar a <code>412peliculas.php</code> que muestra un \"Listado de Series\" con una lista desordenada con tres series. Tanto <code>412pelicuas.php</code> como la vista recien creadas, deben tener un peque\u00f1o men\u00fa (sencillo, mediante enlaces) que permita pasar de un listado a otro. Comprueba que si se accede directamente a cualquiera de las vistas sin tener un usuario logueado via URL del navegador, no se muestra el listado.</p>"},{"location":"ut04/ut04ac/#ejercicio-415","title":"Ejercicio 415","text":"<p>Modifica tanto el controlador como las vistas para que:</p> <ul> <li>los datos los obtenga el controlador (almacena en la sesi\u00f3n un array de pel\u00edculas y otro de series)</li> <li>coloca los datos en la sesi\u00f3n</li> <li>En las vistas, los datos se recuperan de la sesi\u00f3n y se pintan en la lista desordenada recorriendo el array correspondiente.</li> </ul>"},{"location":"ut04/ut04ac/#proyecto-videoclub-30","title":"Proyecto Videoclub 3.0","text":""},{"location":"ut04/ut04ac/#ejercicio-416","title":"Ejercicio 416","text":"<p>Para el Videoclub, vamos a crear una p\u00e1gina <code>index.php</code> con un formulario que contenga un formulario de login/password. Se comprobar\u00e1n los datos en <code>login.php</code>. Los posibles usuarios son admin/admin o usuario/usuario</p> <ul> <li>Si el usuario es correcto, en <code>main.php</code> mostrar un mensaje de bienvenida con el nombre del usuario, junto a un enlace para cerrar la sesi\u00f3n, que lo llevar\u00eda de nuevo al login.</li> <li>Si el usuario es incorrecto, debe volver a cargar el formulario dando informaci\u00f3n al usuario de acceso incorrecto.</li> </ul>"},{"location":"ut04/ut04ac/#ejercicio-417","title":"Ejercicio 417","text":"<p>Si el usuario es administrador, se cargar\u00e1n en la sesi\u00f3n los datos de soportes y clientes del videoclub que ten\u00edamos en nuestras pruebas. En la siguiente unidad los obtendremos de la base de datos. En <code>mainAdmin.php</code>, adem\u00e1s de la bienvenida, debe mostrar:</p> <ul> <li>Listado de clientes</li> <li>Listado de soportes</li> </ul>"},{"location":"ut04/ut04ac/#ejercicio-418","title":"Ejercicio 418","text":"<p>Vamos a modificar la clase <code>Cliente</code> para almacenar el <code>user</code> y la <code>password</code> de cada cliente. Tras codificar los cambios, modificar el listado de clientes de <code>mainAdmin.php</code> para a\u00f1adir al listado el usuario.</p>"},{"location":"ut04/ut04ac/#ejercicio-419","title":"Ejercicio 419","text":"<p>Si el usuario que accede no es administrador y coincide con alguno de los clientes que tenemos cargados tras el login, debe cargar <code>mainCliente.php</code> donde se mostrar\u00e1 un listado de los alquileres del cliente. Para ello, modificaremos la clase <code>Cliente</code> para ofrecer el m\u00e9todo <code>getAlquileres() : array</code>, el cual llamaremos y luego recorreremos para mostrar el listado solicitado.</p> L\u00f3gica para estructura de p\u00e1ginas del ejercicio 423. <p>Ahora volvemos a la parte de administraci\u00f3n:</p>"},{"location":"ut04/ut04ac/#ejercicio-420","title":"Ejercicio 420","text":"<p>Adem\u00e1s de mostrar el listado de clientes, vamos a ofrecer la opci\u00f3n de dar de alta a un nuevo cliente en <code>formCreateCliente.php</code>. Los datos se enviar\u00e1n mediante POST a <code>createCliente.php</code> que los introducir\u00e1 en la sesi\u00f3n. Una vez creado el cliente, debe volver a cargar <code>mainAdmin.php</code> donde se podr\u00e1 ver el cliente insertado. Si hay alg\u00fan dato incorrecto, debe volver a cargar el formulario de alta.</p>"},{"location":"ut04/ut04ac/#ejercicio-421","title":"Ejercicio 421","text":"<p>Crea en <code>formUpdateCliente.php</code> un formulario que permita editar los datos de un cliente. Debes recoger los datos en <code>updateCliente.php</code> Los datos de cliente se deben poder modificar desde la propia p\u00e1gina de un cliente, as\u00ed como desde el listado del administrador.</p>"},{"location":"ut04/ut04ac/#ejercicio-422","title":"Ejercicio 422","text":"<p>Desde el listado de clientes del administrador debes ofrecer la posibilidad de borrar un cliente. En el navegador, antes de redirigir al servidor, el usuario debe confirmar mediante JS que realmente desea eliminar al cliente. Finalmente, en <code>removeCliente.php</code> elimina al cliente de la sesi\u00f3n. Una vez eliminado, debe volver al listado de clientes.</p> L\u00f3gica para estructura de p\u00e1ginas del ejercicio 426."},{"location":"ut05/ut0501/","title":"UT 5. Acceso a Base de Datos","text":"<p>En esta unidad aprenderemos a acceder a datos que se encuentran en un servidor; recuperando, editando y creando estos datos a trav\u00e9s de una base de datos.</p> <p>A trav\u00e9s de las diferentes capas o niveles, de las cuales dos de ellas ya conocemos (Apache, PHP) y MySQL, la que estudiaremos en este tema.</p> <p>Duraci\u00f3n estimada: 12 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA6. Desarrolla aplicaciones de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n. a) Se han analizado las tecnolog\u00edas que permiten el acceso mediante programaci\u00f3n a la informaci\u00f3n disponible en almacenes de datos. b) Se han creado aplicaciones que establezcan conexiones con bases de datos. c) Se ha recuperado informaci\u00f3n almacenada en bases de datos. d) Se ha publicado en aplicaciones web la informaci\u00f3n recuperada. e) Se han utilizado conjuntos de datos para almacenar la informaci\u00f3n. f) Se han creado aplicaciones web que permiten la actualizaci\u00f3n y la eliminaci\u00f3n de informaci\u00f3n disponible en una base de datos. g) Se han utilizado transacciones para mantener la consistencia de la informaci\u00f3n."},{"location":"ut05/ut0502/","title":"Ut0502","text":"<p>Podemos instalar dos opciones:</p> <p>\u00a0\u00a0\u00a0\u00a0a) XAMPP: simplemente nos descargar\u00edamos el programa y lo activar\u00edamos. Para descargar XAMPP pulsa aqu\u00ed.</p> <p>\u00a0\u00a0\u00a0\u00a0b) Docker: utilizando el software de contenedores nos descargaremos la imagen docker de esta unidad did\u00e1ctica del curso y lanzamos:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Si todo ha salido bien y el contenedor est\u00e1 en marcha, podremos visitar la p\u00e1gina de phpMyAdmin de la siguiente manera:</p> <pre><code>http://localhost:8000\n</code></pre> <p>Para acceder debemos utilizar las siguientes credenciales que vienen configuradas en el archivo <code>docker-compose.yml</code>:</p> <pre><code>usuario: root\ncontrase\u00f1a: 1234\n</code></pre> Inicio de phpMyAdmin. <p>Recuerda</p> <p>Podemos utilizar tambi\u00e9n el docker Portainer para gestionar (lanzar, parar, acceder) a los contenedores generados en la imagen anterior.</p>"},{"location":"ut05/ut0503/","title":"Ut0503","text":"<p>Echando un vistazo al m\u00f3dulo de primer curso Bases de Datos sabemos que una base de datos tiene muchos campos con sus nombres y valores; pero adem\u00e1s sabemos que la base de datos debe tener un nombre. Por tanto, tendr\u00edamos la siguiente estructura para una base de datos:</p> <pre><code>NombreBaseDeDatos\n    |__Tabla-#1\n    |         |__DatosTabla-#1\n    |\n    |__Tabla-#2\n    |         |__DatosTabla-#2\n    |    \n    |__Tabla-#3\n    |         |__DatosTabla-#3\n    [...]\n</code></pre> <p>Ejemplo real</p> <pre><code>Ryanair\n    |__pasajero\n    |     |__id[*]\n    |     |__nombre\n    |     |__apellidos\n    |     |__edad\n    |     |__id_vuelo[^]\n    |\n    |__vuelo\n    |     |__id[*]\n    |     |__n_plazas\n    |     |__disponible\n    |     |__id_pais[^]\n    |\n    |__pais\n          |__id[*]\n          |__nombre\n\n\n[*] Clave primaria    [^] Clave For\u00e1nea\n</code></pre> <p>Elementos de una tabla</p>"},{"location":"ut05/ut0504/","title":"Ut0504","text":"<p>Utilizaremos el lenguaje de consulta estructurada (Structured Query Language) SQL para realizar las consultas a nuestras bases de datos y para mostrar el contenido en las distintas interfaces web que creemos a lo largo de la unidad. Si quieres saber m\u00e1s detalles visita Wiki SQL.</p> <p>Ejemplo de una sentencia SQL donde seleccionamos todas las filas y columnas de nuestra tabla llamada <code>pais</code>:</p> <pre><code>SELECT * FROM pais\n</code></pre> <p>Estas sentencias pueden invocarse desde la consola de comandos mediante el int\u00e9rprete <code>mysql</code>(previamente instalado en el sistema) o a trav\u00e9s de la herramienta <code>phpMyAdmin</code>.</p> <p>Las sentencias SQL tambi\u00e9n las podemos usar dentro de nuestro c\u00f3digo php; de tal manera que cuando se cargue nuestra interfaz web, lance una sentecia SQL para mostrar los datos que queramos.</p> <pre><code>&lt;?php\n    // Listado de clientes, ordenados por DNI de manera ASCendente\n    $clientesOrdenadosPorDNI = \"SELECT * FROM `pasajero` ORDER BY `dni` ASC\";\n?&gt;\n</code></pre>"},{"location":"ut05/ut0505/","title":"Ut0505","text":"<p>Este software funciona bajo Apache y PHP y es una interfaz web para gestionar las bases de datos que tengamos disponibles en nuestro servidor local. Muchos hostings ofrecen esta herramienta por defecto para poder gestionar las BBDD que tengamos configuradas bajo nuestra cuenta.</p>"},{"location":"ut05/ut0505/#1-creando-una-base-de-datos-dentro-de-phpmyadmin","title":"1. Creando una base de datos dentro de phpMyAdmin","text":"<ol> <li> <p>Para crear una nueva base de datos debemos entrar en phpMyAdmin como usuario root y pinchar en la opci\u00f3n Nueva del men\u00fa de la izquierda.</p> </li> <li> <p>En la nueva ventana de creaci\u00f3n pondremos un nombre a nuestra bd.</p> </li> <li> <p>Tambi\u00e9n estableceremos el cotejamiento <code>utf8m4_unicode_ci</code> para que nuestra bd soporte todo tipo de caracteres (como los asi\u00e1ticos e incluso emojis :smile:).</p> </li> <li> <p>Le damos al bot\u00f3n de Crear para crear la bd y comenzar a creaer las distintas tablas que vayamos a introducir en ella.</p> </li> </ol> Pasos para crear una base de datos en phpMyAdmin. <p>El sistema generar\u00e1 el c\u00f3digo SQL para crear todo lo que le hemos puesto y crear\u00e1 la base de datos con las tablas que le hayamos insertado.</p> <pre><code>CREATE TABLE `persona` ( `id` INT NOT NULL AUTO_INCREMENT , `nombre` TINYTEXT NOT NULL , `apellidos` TEXT NOT NULL , `telefono` TINYTEXT NOT NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;\n</code></pre>"},{"location":"ut05/ut0505/#2-opciones-en-phpmyadmin","title":"2. Opciones en phpMyAdmin","text":"<p>Cuando seleccionamos una base de datos de la lista, el sistema nos muestra varias pesta\u00f1as con las cuales interactuar con la base de datos en cuesti\u00f3n:</p> <ul> <li> <p><code>Estructura</code> : podemos ver las distintas tablas que consolidan nuestra base de datos.</p> </li> <li> <p><code>SQL</code> : si queremos inyectar c\u00f3digo SQL para que el sistema lo interprete.</p> </li> <li> <p><code>Buscar</code> : para buscar por t\u00e9rminos, en nuestra base de datos, aplicando distintos filtros de b\u00fasqueda.</p> </li> <li> <p><code>Generar consulta</code> : parecido a SQL pero de forma gr\u00e1fica, sin tener que saber nada del lenguaje.</p> </li> <li> <p><code>Exportar</code> e <code>importar</code> : como su nombre indica, para hacer cualquiera de las 2 operaciones sobre la base de datos.</p> </li> <li> <p><code>Operaciones</code> : distintas opciones avanzadas para realizar en nuestra base de datos, de la cual destacaremos la opci\u00f3n Cotejamiento donde podremos cambiar el cotejamiento de nuestra tabla.</p> </li> </ul> <p>Ojo con esto!</p> <p>Porque podemos eliminar datos sin querer, ya que al cambiar el cotejamiento podemos suprimir caracteres no soportados por el nuevo cotejamiento.</p> <p>No vamos a profundizar en el resto de opciones, pero, en la pesta\u00f1a M\u00e1s, existe la opci\u00f3n Dise\u00f1ador para poder editar las relaciones entre tablas de una manera gr\u00e1fica (pinchando y arrastrando) que veremos m\u00e1s adelante.</p> Ejercicios a realizar <ul> <li><code>Ejercicio 501</code></li> <li><code>Ejercicio 502</code></li> <li><code>Ejercicio 503</code></li> </ul>"},{"location":"ut05/ut0506/","title":"Ut0506","text":"<p>PHP hace uso de esta extensi\u00f3n mejorada para poder comunicarse con las bases de datos, ya sean MySQL (4.1 o superior) o MariaDB.</p> <p>Cualquier consulta que queramos hacer a una base de datos necesitaremos hacer uso de la extensi\u00f3n <code>mysqli()</code>.</p> <p>Veamos c\u00f3mo conectarnos con una base de datos a trav\u00e9s del c\u00f3digo PHP:</p> <pre><code>&lt;?php\n    // \u2592\u2592 pruebas.php \u2592\u2592\n\n    // \"SERVIDOR\", \"USUARIO\", \"CONTRASE\u00d1A\", \"BASE DE DATOS\"\n    $conexion = mysqli_connect(\"d939ebf6a741\",\"tuUsuario\",\"tuContrase\u00f1a\",\"tuBaseDeDatos\");\n\n    // COMPROBAMOS LA CONEXI\u00d3N\n    if(mysqli_connect_errno()) {\n       echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n       exit();\n    }\n\n    echo \"&lt;h1&gt;Bienvenid@ a MySQL !!&lt;/h1&gt;\";\n?&gt;\n</code></pre> <ul> <li><code>servidor</code>: el servidor donde se encuentra la base de datos que queremos usar suele ser localhost.</li> </ul> <p><code>servidor</code> en docker</p> <p>En nuestro caso, al utilizar Docker ser\u00e1 el nombre de la imagen mysql:8.0 que aparece al dejar el rat\u00f3n encima en el Visual Studio Code.</p> <p>El nombre del servidor, en Docker, ser\u00e1 el ID o c\u00f3digo del contenedor del servidor MySql.</p> <ul> <li><code>usuarioDB</code>: el usuario de la base de datos.</li> <li><code>passwordDB</code>: la contrase\u00f1a para ese usuario de la base de datos.</li> <li><code>baseDeDatos</code>: nombre de la base de datos que queramos usar.</li> </ul> <p>Si todo ha salido bien habr\u00e9is visto un mensaje diciendo Bienvenid@ a MySQL !!</p>"},{"location":"ut05/ut0506/#1-recuperando-datos-de-una-bd","title":"1. Recuperando datos de una BD","text":"<p>Ahora que ya sabemos c\u00f3mo conectarnos a una base de datos alojada en nuestro servidor, lo que necesitamos saber es c\u00f3mo recuperar datos almacenados en la base de datos.</p> <p>Durante la instalaci\u00f3n de la imagen de Docker, se ha creado una tabla llamada Pruebas que contiene varios registros de distintas personas.</p> <p>Vamos a recuperar esos datos para ver de qu\u00e9 forma se hace con PHP.</p> <pre><code>&lt;?php\n   // \u2592\u2592 pruebas.php \u2592\u2592\n\n   $conexion = mysqli_connect(\"d939ebf6a741\", \"usuario\", \"1234\", \"pruebadb\");\n\n   // COMPROBAMOS LA CONEXI\u00d3N\n   if (mysqli_connect_errno()) {\n       echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n       exit();\n   }\n\n   // CONSULTA A LA BASE DE DATOS\n   $consulta = \"SELECT * FROM `productos`\";\n   $listaproductos = mysqli_query($conexion, $consulta);\n\n   // COMPROBAMOS SI EL SERVIDOR NOS HA DEVUELTO RESULTADOS\n   if($listaproductos) {\n       // RECORREMOS CADA RESULTADO QUE NOS DEVUELVE EL SERVIDOR\n       foreach ($listaproductos as $elemento) {\n            echo \"$elemento[id] - \n                  $elemento[descripcion] - \n                  $elemento[stock]\n                   &lt;br&gt;\n            \";\n       }\n   }\n?&gt;\n</code></pre> <p>Si todo ha salido bien, por pantalla ver\u00e1s el siguiente listado:</p> <pre><code>1 - leche - 25\n2 - pan - 12\n3 - galletas - 5\n4 - gominolas - 120\n5 - monster - 2\n6 - kit kat - 17\n7 - patatas fritas - 7\n8 - donetes - 5\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 504</code></li> </ul>"},{"location":"ut05/ut0507/","title":"Ut0507","text":"<p>De la misma manera que hemos visto con mysqli, PHP Data Objects (o <code>PDO</code>) es un driver de PHP que se utiliza para trabajar bajo una interfaz de objetos con la base de datos. A d\u00eda de hoy, es lo que m\u00e1s se utiliza para manejar informaci\u00f3n desde una base de datos, ya sea relacional o no relacional.</p> <p>De igual manera que pasaba con los objetos en PHP nativos, en la interfaz de MySQL el momento de la conexi\u00f3n es distinta:</p> <pre><code>&lt;?php\n   $conexion = new PDO('mysql:host=localhost; dbname=pruebadb', 'usuario', '1234');\n</code></pre> <p>En Docker</p> <p>Recordar cambiar el valor de host de localhost por ID del contenedor mysql:8.0.</p> <p>Adem\u00e1s, con PDO podemos usar las excepciones con <code>try</code>/<code>catch</code> para gestionar los errores que se produzcan en nuestra aplicaci\u00f3n. Para ello, como hac\u00edamos antes, debemos encapsular el c\u00f3digo entre bloques try / catch:</p> <pre><code>&lt;?php\n    $host = \"localhost\";\n    $db = \"prueba\";\n    // dsn (Nombre del Origen de Datos, DSN)\n    $dsn = \"mysql: host=$host; dbname=$db\"; \n    $usuario = \"dwes\";\n    $contrasenya = \"dwes\";\n\n   try {\n        $con = new PDO($dsn, $usuario, $contrasenya);\n        $con -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n   } catch (PDOException $e) {\n        echo 'Fallo en la conexi\u00f3n: ' . $e-&gt;getMessage();\n   }\n</code></pre> <p>Los pasos a seguir han sigo:</p> <p>1\u00ba ) Creamos la conexi\u00f3n con la base de datos a trav\u00e9s del constructor PDO pas\u00e1ndole la informaci\u00f3n de la base de datos. </p> <p>2\u00ba ) Establecemos los par\u00e1metros para manejar las excepciones, en este caso hemos utilizado:</p> <ul> <li> <p><code>PDO::ATTR_ERRMODE</code> indic\u00e1ndole a PHP que queremos un reporte de errores.</p> </li> <li> <p><code>PDO::ERRMODE_EXCEPTION</code> con este atributo obligamos a que lance excepciones, adem\u00e1s de ser la opci\u00f3n m\u00e1s humana y legible que hay a la hora de controlar errores.</p> </li> </ul> <p>3\u00ba ) Cualquier error que se lance a trav\u00e9s de PDO, el sistema lanzar\u00e1 una PDOException.</p>"},{"location":"ut05/ut0507/#1-fichero-de-configuracion-de-la-bd","title":"1. Fichero de configuraci\u00f3n de la BD","text":"<p>De la misma manera que creamos nuestro archivo de funciones <code>funciones-php</code> y albergamos todas las funciones que se usan de manera global en la aplicaci\u00f3n, podemos establecer un archivo de constantes donde definamos los par\u00e1metros de conexi\u00f3n con la base de datos.</p> <pre><code>&lt;?php\n    // conexion.php\n    $host = \"localhost\";\n    $db = \"prueba\";\n    $dsn = \"mysql: host=$host; dbname=$db\"; \n    $usuario = \"dwes\";\n    $contrasenya = \"dwes\";\n</code></pre> <p>Ojo</p> <p>Este archivo contiene informaci\u00f3n muy sensible as\u00ed que no es recomendable que subas este archivo a git.</p>"},{"location":"ut05/ut0507/#2-sentencias-preparadas","title":"2. Sentencias preparadas","text":"<p>Se trata de sentencias que se establecen como si fueran plantillas de la SQL que vamos a lanzar, aceptando par\u00e1metros que son establecidos a posteriori de la declaraci\u00f3n de la sentencia preparada.</p> <p>Las sentencias preparadas evitan la injecci\u00f3n de SQL (SQL Injection) y mejoran el rendimiento de nuestras aplicaci\u00f3nes o p\u00e1ginas web.</p> <pre><code>&lt;?php\n    $sql = \"INSERT INTO productos VALUES (?, ?, ?)\";\n</code></pre> <p>Cada interrogante es un par\u00e1metro que estableceremos despu\u00e9s unas cuantas l\u00edneas m\u00e1s abajo.</p> <p>Una vez tenemos la plantilla de nuestra consulta, debemos seguir con la preparaci\u00f3n junto con 3 m\u00e9todos m\u00e1s de PHP para su completa ejecuci\u00f3n:</p> <p>1\u00ba ) <code>prepare</code>: prepara la sentencia antes de ser ejecutada.</p> <p>2\u00ba ) <code>bind</code>: el tipo de uni\u00f3n (bind) de dato. Puede ser mediante  <code>?</code>  o  <code>:parametro</code> .</p> <p>3\u00ba ) <code>execute</code>: se ejecuta la consulta uniendo la plantilla con las variables o par\u00e1metros que hemos establecido.</p> Ejemplo par\u00e1metros <pre><code>&lt;?php\n    // Borrado con par\u00e1metros\n    include \"config/database.inc.php\";\n\n    $conexion = null;\n\n    try { \n        $cantidad = $_GET[\"cantidad\"];\n\n        $conexion = new PDO(DSN, USUARIO, PASSWORD);\n        $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $sql = \"DELETE FROM productos WHERE stock = ?\";\n        $sentencia = $conexion -&gt; prepare($sql);\n\n        $isOk = $sentencia -&gt; execute([$cantidad]);\n        $cantidadAfectada = $sentencia -&gt; rowCount();\n\n        echo $cantidadAfectada . \" fila(s) afectada(s).\";\n\n    } catch (PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null;\n</code></pre> Ejemplo bindParam <p>Muy parecido a utilizar par\u00e1metros pero esta vez la variable est\u00e1 dentro de la sentencia SQL, en este caso la hemos llamado <code>:cant</code></p> <pre><code>&lt;?php\n    include \"config/database.inc.php\";\n\n    $conexion=null;\n\n    try {\n        $cantidad = $_GET[\"cantidad\"] ?? 0;\n\n        $conexion = new PDO(DSN, USUARIO, PASSWORD);\n        $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $sql = \"DELETE FROM productos WHERE stock = :cant\";\n\n        $sentencia = $conexion -&gt; prepare($sql);\n        $sentencia -&gt; bindParam(\":cant\", $cantidad);\n\n        $isOk = $sentencia -&gt; execute();\n\n        $cantidadAfectada = $sentencia -&gt; rowCount();\n\n        echo $cantidadAfectada . \" fila(s) afectada(s).\";\n\n    } catch (PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null;\n</code></pre>"},{"location":"ut05/ut0507/#3-bindvalue-vs-bindparam","title":"3. bindValue VS bindParam","text":"<p>Utilizaremos <code>bindValue()</code> cuando tengamos que insertar datos s\u00f3lo una vez. En cambio, deberemos usar <code>bindParam()</code> cuando tengamos que pasar datos m\u00faltiples, como por ejemplo, un array.</p> <pre><code>&lt;?php\n   // \u2592\u2592\u2592 FALTA CONEXI\u00d3N A BD \u2592\u2592\u2592\u2592\n   // se asignan nombre a los parametros\n   $sql = \"DELETE FROM productos WHERE stock = :cant\";\n   $sentencia = $conexion -&gt; prepare($sql);\n\n  // bindValue enlaza por VALOR\n  $cantidad = 0;\n  $sentencia -&gt; bindValue(\":cant\", $cantidad);\n  $cantidad = 1;\n  // se eliminan con cant = 0\n  $isOk = $sentencia-&gt;execute();\n\n  // bindParam enlaza por REFERENCIA\n  $cantidad = 0;\n  $sentencia -&gt; bindParam(\":cant\", $cantidad);\n  $cantidad = 1;\n  // se eliminan con cant = 1\n  $isOk = $sentencia -&gt; execute();\n</code></pre> <p>Para m\u00e1s informaci\u00f3n y uso de las variables PDO consulta el manual de PHP.</p>"},{"location":"ut05/ut0507/#4-insertando-registros","title":"4. Insertando registros","text":"<p>A la hora de insertar registros en una base de datos, debemos tener en cuenta que en la tabla puede haber valores autoincrementados. Para salvaguardar esto, lo que debemos hacer es dejar vac\u00edo ese campo autoincrementado; pero a la hora de hacer la conexi\u00f3n, debemos recuperarlo con el m\u00e9todo <code>lastInsertId()</code>.</p> <pre><code>&lt;?php\n  include \"config/database.inc.php\";\n\n  try{\n    $descripcion = $_GET[\"descripcion\"] ?? \"PRODUCTO X\";\n    $stock = $_GET[\"stock\"] ?? 0;\n\n    $conexion = null;\n\n    $conexion = new PDO(DSN, USUARIO, PASSWORD);\n    $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $sql=\"insert into productos (descripcion, stock) values (:desc, :stock)\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; bindParam(\":desc\", $descripcion);\n    $sentencia -&gt; bindParam(\":stock\", $stock);\n\n    $isOk = $sentencia -&gt; execute();\n    $idGenerado = $conexion -&gt; lastInsertId();\n\n  } catch(PDOException $e){\n    echo $e-&gt;getMessage();\n  }\n</code></pre>"},{"location":"ut05/ut0507/#5-consultando-registros","title":"5. Consultando registros","text":"<p>A la hora de recuperar los resultados de una consulta, bastar\u00e1 con invocar al m\u00e9todo <code>PDOStatement::fetch</code> para listar las filas generadas por la consulta.</p> <p>Pero debemos elegir el tipo de dato que queremos recibir entre los 3 que hay disponibles:</p> <ul> <li><code>PDO::FETCH_ASSOC</code> : array indexado cuyos keys son el nombre de las columnas.</li> <li><code>PDO::FETCH_NUM</code> : array indexado cuyos keys son n\u00fameros.</li> <li><code>PDO::FETCH_BOTH</code> : valor por defecto. Devuelve un array indexado cuyos keys son tanto el nombre de las columnas como n\u00fameros.</li> </ul> Resultado de un FETCH_NUM, un FETCH_ASSOC y un FETCH_BOTH. <pre><code>&lt;?php\n  // consulta con array asociativo.php\n  include \"config/database.inc.php\";\n\n  $conexion = null;\n\n  try{\n    $conexion = new PDO(DSN, USUARIO, PASSWORD);\n    $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $sql = \"select * from productos\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_ASSOC);\n    $sentencia -&gt; execute();\n\n    while($fila = $sentencia -&gt; fetch()){\n      echo \"Id:\" . $fila[\"id\"] . \"&lt;br /&gt;\";\n      echo \"Descripci\u00f3n:\" . $fila[\"descripcion\"] . \"&lt;br /&gt;\";\n      echo \"Stock:\" . $fila[\"stock\"] . \"&lt;br /&gt;&lt;br /&gt;\";\n    }\n\n  }catch(PDOException $e) {\n    echo $e -&gt; getMessage();\n  }\n\n  $conexion = null;\n</code></pre> <p>Recuperando datos con una matriz como resultado de nuestra consulta:</p> <pre><code>&lt;?php\n  // consulta con array asociativo\n  include \"config/database.inc.php\";\n\n  $conexion = null;\n\n  try{\n    $conexion = new PDO(DSN, USUARIO, PASSWORD);\n    $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $sql=\"SELECT * FROM productos\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_ASSOC);\n    $sentencia -&gt; execute();\n    // recuperado en la matriz $productos\n    $productos = $sentencia -&gt; fetchAll();\n\n    foreach($productos as $elemento) {\n      echo\"Id:\" . $elemento[\"id\"] . \"&lt;br /&gt;\";\n      echo\"Descripci\u00f3n:\" . $elemento[\"descripcion\"] . \"&lt;br /&gt;\";\n      echo\"Stock:\" . $elemento[\"stock\"] . \"&lt;br /&gt;&lt;br /&gt;\";        \n    }\n\n  }catch(PDOException $e) {\n      echo $e -&gt; getMessage();\n  }\n\n  $conexion = null;\n</code></pre> <p>Pero si lo que queremos es leer datos con forma de objeto utilizando <code>PDO::FETCH_OBJ</code>, debemos crear un objeto con propiedades p\u00fablicas con el mismo nombre que las columnas de la tabla que vayamos a consultar.</p> <pre><code>&lt;?php\n  // consulta con formato de objeto\n  include \"config/database.inc.php\";\n\n  $conexion = null;\n\n  try{\n    $conexion = new PDO(DSN, USUARIO, PASSWORD);\n    $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $sql = \"SELECT * FROM productos\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_OBJ);\n    $sentencia -&gt; execute();\n\n    while($p = $sentencia -&gt; fetch()) {\n        echo\"Id:\" . $p -&gt; id . \"&lt;br /&gt;\";\n        echo\"Descripci\u00f3n:\" . $p -&gt; descripcion . \"&lt;br /&gt;\";\n        echo\"Stock:\" . $p -&gt; stock . \"&lt;br /&gt;\";\n    }\n\n  }catch(PDOException $e) {\n    echo $e -&gt; getMessage();\n  }\n\n  $conexion = null;\n</code></pre>"},{"location":"ut05/ut0507/#6-consultas-con-modelos","title":"6. Consultas con modelos","text":"<p>Llevamos tiempo creando clases en PHP y las consultas tambi\u00e9n admiten este tipo de datos mediante el uso de <code>PDO::FETCH_CLASS</code>.</p> <p>Si usamos este m\u00e9todo, debemos tener en cuenta que los nombres de los atributos privados deben coincidir con los nombres de las columnas de la tabla que vayamos a manejar.</p> <p>As\u00ed pues, si por lo que sea cambiamos la estructura de la tabla DEBEMOS CAMBIAR nuestra clase para que todo siga funcionando.</p> <pre><code>&lt;?php\n  // clase Producto\n  class Producto {\n    private int $id;\n    private string $descripcion;\n    private ? int $stock;\n\n    public function getId() : int {\n      return $this -&gt; id;\n    }\n\n    public function getDescripcion() : string {\n      return $this -&gt; descripcion;\n    }\n\n    public function getStock() : ?int {\n      return $this -&gt; stock;\n    }\n  }\n?&gt;\n\n&lt;?php\n  // Consultar a trav\u00e9s de la clase Producto\n  $sql = \"SELECT * FROM productos\";\n  $sentencia = $conexion -&gt; prepare($sql);\n\n  // Aqu\u00ed 'Tienda' es el nombre de nuestra clase\n  $sentencia -&gt; setFetchMode(PDO::FETCH_CLASS, \"Producto\");\n  $sentencia -&gt; execute();\n\n  while($p = $sentencia -&gt; fetch()) {\n    echo \"Id: \" . $p -&gt; getId() . \"&lt;br /&gt;\";\n    echo \"Descripcion: \" . $p -&gt; getDescripcion() . \"&lt;br /&gt;\";\n    echo \"Stock: \" . $p -&gt; getStock() . \"&lt;br /&gt;&lt;br /&gt;\";\n\n    //var_dump($p);\n  }\n</code></pre> <p>Pero \u00bfqu\u00e9 pasa si nuestras clases tienen constructor? pues que debemos indicarle, al m\u00e9todo FECTH, que rellene las propiedades despu\u00e9s de llamar al constructor y para ello hacemos uso de <code>PDO::FETCH_PROPS_LATE</code>.</p> <pre><code>&lt;?php\n  // clase Producto\n  class Producto {\n    public function __construct (public int $id=1, \n                          public string $descripcion=\"x\", \n                          public int $stock=1 ){  }\n\n    public function getId() : int {\n       return $this -&gt; id;\n    }\n    public function getDescripcion() : string {\n       return $this -&gt; descripcion;\n    }\n    public function getStock() : int {\n       return $this -&gt; stock;\n    }\n  }\n?&gt;   \n\n&lt;?php\n  // consulta con array asociativo.php\n  include \"config/database.inc.php\";\n  $conexion = null;\n  try{\n     $conexion = new PDO(DSN, USUARIO, PASSWORD);\n     $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n     $sql = \"SELECT * FROM productos\";\n\n     $sentencia = $conexion -&gt; prepare($sql);\n     $sentencia -&gt; setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, \"Producto\");\n\n     $sentencia -&gt; execute();\n\n     //$productos = $sentencia -&gt; fetchAll();\n     while($p = $sentencia -&gt; fetch()) {\n        echo\"Id:\" . $p -&gt; id . \"&lt;br /&gt;\";\n        echo\"Descripci\u00f3n:\" . $p -&gt; descripcion . \"&lt;br /&gt;\";\n        echo\"Stock:\" . $p -&gt; stock . \"&lt;br /&gt;&lt;br /&gt;\";\n     }\n  }catch(PDOException $e) {\n     echo $e -&gt; getMessage();\n  }\n\n  $conexion = null;\n</code></pre>"},{"location":"ut05/ut0507/#7-consultas-con-like","title":"7. Consultas con LIKE","text":"<p>Para utilizar el comod\u00edn LIKE u otros comodines, debemos asociarlo al dato y NUNCA en la propia consulta.</p> <pre><code>&lt;?php\n  // clase Producto\n  class Producto {\n     public function __construct (public int $id=1, \n                         public string $descripcion=\"x\", \n                         public int $stock=1 ){  }\n\n     public function getId() : int {\n         return $this -&gt; id;\n     }\n     public function getDescripcion() : string {\n         return $this -&gt; descripcion;\n     }\n     public function getStock() : int {\n         return $this -&gt; stock;\n     }\n  }\n?&gt;\n\n&lt;?php\n  $busqueda1 = $_POST[\"cadenaDescripcion\"];\n  $busqueda2 = $_POST[\"numStock\"];\n\n  // Utilizando comodines :: LIKE\n  include \"config/database.inc.php\";\n\n  $conexion = null;\n  try{\n     $conexion = new PDO(DSN, USUARIO, PASSWORD);\n     $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n     $sql = \"SELECT * FROM productos where descripcion like :desc and stock = :stk\";\n\n     $sentencia = $conexion -&gt; prepare($sql);\n     $sentencia -&gt; setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, Producto::class);\n\n     $cadBuscar1 = \"%\" . $busqueda . \"%\";\n\n     $sentencia -&gt; execute([\"desc\" =&gt; $cadBuscar1,\"stk\" =&gt; $cadBuscar2]);\n\n     while($p = $sentencia -&gt; fetch()) {\n         echo\"Id:\" . $p -&gt; id . \"&lt;br /&gt;\";\n         echo\"Descripci\u00f3n:\" . $p -&gt; descripcion . \"&lt;br /&gt;\";\n         echo\"Stock:\" . $p -&gt; stock . \"&lt;br /&gt;&lt;br /&gt;\";\n     }        \n\n  }catch(PDOException $e) {\n     echo $e -&gt; getMessage();\n  }\n\n  $conexion = null;\n</code></pre> <p>Caja abierta que podemos cerrar</p> <p>Ten\u00e9is una lista de ejemplos muy completa en la documentaci\u00f3n oficial.</p> Ejercicios a realizar <ul> <li><code>Ejercicio 505</code></li> <li><code>Ejercicio 506</code></li> <li><code>Ejercicio 507</code></li> </ul>"},{"location":"ut05/ut0508/","title":"Ut0508","text":"Ejemplo de introducci\u00f3n de usuario y contrase\u00f1a. <p>Para manejar un sistema completo de login y password con contrase\u00f1as cifradas, necesitamos un m\u00e9todo que cifre esos strings que el usuario introduce como contrase\u00f1a; tanto en el formulario de registro como en el del login, ya que al codificar una contrase\u00f1a, despu\u00e9s tenemos que decodificarla para comprobar que ambas contras\u00f1eas (la que instroduce el usuario en el login y la que tenemos en la base de datos) coincidan.</p> <p>Necesitamos pues:</p> <p>1\u00ba ) <code>password_hash()</code> para almacenar la contrase\u00f1a en la base de datos a la hora de hacer el INSERT.</p> <ul> <li><code>PASSWORD_DEFAULT</code> almacenamos la contrase\u00f1a usando el m\u00e9todo de encriptaci\u00f3n bcrypt.</li> <li><code>PASSWORD_BCRYPT</code> almacenamos la contrase\u00f1a usando el algoritmo CRYPT_BLOWFISH compatible con crypt().</li> </ul> <p>2\u00ba ) <code>password_verify()</code> para verificar el usuario y la contrase\u00f1a.</p> <p>Ejemplo:</p> <pre><code>&lt;form action=\"loginCrear.php\" method=\"post\"&gt;\n    &lt;label for=\"usuario\"&gt;usuario: &lt;/label&gt;\n    &lt;input type=\"text\" name=\"usuario\"&gt;\n\n    &lt;label for=\"password\"&gt;password: &lt;/label&gt;\n    &lt;input type=\"password\" name=\"password\"&gt; \n\n    &lt;input type=\"submit\" name=\"enviar\" value=\"enviar\"&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>&lt;?php\n  // loginCrear.php\n  include \"config/database.inc.php\";\n\n  $conexion = null;\n  try{\n    $conexion = new PDO($dsn, $usuario, $contrasenya);\n    $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $usu = $_POST[\"usuario\"];\n    $pas = $_POST[\"password\"];    \n    $fechaActual = date(\"Y-m-d H:i:s\"); \n    $cre = $fechaActual; \n    $acc = $fechaActual;  \n\n    // Encriptar la contrase\u00f1a\n    $pasE= password_hash($pas, PASSWORD_DEFAULT);\n\n    $sql = \"INSERT INTO users (username, password, creacion, actualizacion) \n                                      VALUES (:usu, :pas, :cre, :acc)\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; bindParam (':usu', $usu);  \n    $sentencia -&gt; bindParam (':pas', $pasE);  \n    $sentencia -&gt; bindParam (':cre', $cre);  \n    $sentencia -&gt; bindParam (':acc', $acc);  \n    $isOk = $sentencia -&gt; execute();\n    //$idGenerado = $conexion -&gt; lastInsertId();\n\n  } catch (PDOException $e) {\n    echo $e -&gt; getMessage();\n  }\n\n  $conexion = null;  \n</code></pre> <p>Ahora que tenemos el usuario codificado y guardado en la base de datos, vamos a recuperarlo para poder loguearlo correctamente.</p> <pre><code>&lt;?php\n  // Recuperar usuario y password en BD\n  include \"config/database.inc.php\";\n  $conexion = null;\n  try{\n    $conexion = new PDO(DSN, USUARIO, PASSWORD);\n    $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n    $usu = $_POST[\"usuario\"] ?? \"\";\n    $sql = \"select * from usuarios where usuario = :usu\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; bindParam (':usu', $usu);  \n    $sentencia -&gt; execute();\n\n    $usuario = $sentencia -&gt; fetch();\n\n    if($usuario &amp;&amp; password_verify($_POST['password'], $usuario['password'])) {\n        echo \"OK!\";\n    } else {\n        echo \"Usuario y/o contrase\u00f1a no son correctos.\";\n    }\n  } catch (PDOException $e){\n    echo $e-&gt;getMessage();\n }\n $conexion = null;\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 508</code></li> </ul> Realizar, adem\u00e1s, la actividad proyecto CholloCenter <ul> <li><code>Ejercicio 415</code></li> <li><code>Ejercicio 416</code></li> <li><code>Ejercicio 417</code></li> <li><code>Ejercicio 418</code></li> </ul>"},{"location":"ut05/ut0509/","title":"Ut0509","text":"<p>Gracias a la funcion <code>fopen()</code> desde PHP podemos abrir archivos que se encuentren en nuestros servidor o una URL.</p> <p>A esta funci\u00f3n hay que pasarle 2 par\u00e1metros; el nombre del archivo que queremos abrir y el modo en el que se abrir\u00e1:</p> <pre><code>$fp = fopen(\"miarchivo.txt\", \"r\");\n</code></pre> <p>Muchas veces no podemos abrir el archivo porque \u00e9ste no se encuentra o no tenemos acceso a \u00e9l; por eso es recomendable comprobar que podemos hacerlo:</p> <pre><code>if (!$fp = fopen(\"miarchivo.txt\", \"r\")){\n    echo \"No se ha podido abrir el archivo\";\n}\n</code></pre>"},{"location":"ut05/ut0509/#1-modos-de-apertura-de-ficheros","title":"1. Modos de apertura de ficheros","text":"<ul> <li><code>r</code> : Modo lectura. Puntero al principio del archivo.</li> <li><code>r+</code> : Apertura para lectura y escritura. Puntero al principio del archivo.</li> <li><code>w</code> : Apertura para escritura. Puntero al principio del archivo y lo sobreescribe. Si no existe se intenta crear.</li> <li><code>w+</code> : Apertura para lectura y escritura. Puntero al principio del archivo y lo sobreescribe. Si no existe se intenta crear.</li> <li><code>a</code> : Apertura para escritura. Puntero al final del archivo. Si no existe se intenta crear.</li> <li><code>a+</code> : Apertura para lectura y escritura. Puntero al final del archivo. Si no existe se intenta crear.</li> <li><code>x</code> : Creaci\u00f3n y apertura para s\u00f3lo escritura. Puntero al principio del archivo. Si el archivo ya existe dar\u00e1 error E_WARNING. Si no existe se intenta crear.</li> <li><code>x+</code> : Creaci\u00f3n y apertura para lectura y escritura. Mismo comportamiento que x.</li> <li><code>c</code> : Apertura para escritura. Si no existe se crea. Si existe no se sobreescribe ni da ning\u00fan error. Puntero al principio del archivo.</li> <li><code>c+</code> : Apertura para lectura y escritura. Mismo comportamiento que C.</li> <li><code>b</code> : Cuando se trabaja con archivos binarios como jpg, pdf, png y dem\u00e1s. Se suele colocar al final del modo, es decir rb, r+b, x+b, wb...</li> </ul>"},{"location":"ut05/ut0509/#2-operaciones-con-archivos","title":"2. Operaciones con archivos","text":"<p>Para poder leer un archivo necesitamos usar la funci\u00f3n <code>fread()</code> de PHP:</p> <pre><code>&lt;?php\n    // \u2592\u2592 Abriendo un archivo y leyendo su contenido \u2592\u2592\n    $file = \"miarchivo.txt\";\n    $fp = fopen($file, \"r\");\n\n    // $contents guardar\u00e1 el contenido\n    // filesize() nos devuelve el tama\u00f1o del archivo en cuesti\u00f3n\n    $contents = fread($fp, filesize($file));\n    print $contents;\n\n    // Cerramos la conexi\u00f3n con el archivo\n    fclose($fp)\n?&gt;\n</code></pre> <p>Si lo que queremos es escribir en un archivo, deberemos hacer uso de la funci\u00f3n<code>fwrite()</code> :</p> <pre><code>&lt;?php\n    // \u2592\u2592 Escribiendo en un archivo \u2592\u2592\n    $file = \"miarchivo.txt\";\n    $texto = \"Hola qu\u00e9 tal\";\n\n    $fp = fopen($file, \"w\");\n\n    fwrite($fp, $texto);\n    fclose($fp);\n?&gt;\n</code></pre>"},{"location":"ut05/ut0509/#3-informacion-de-un-fichero","title":"3. Informaci\u00f3n de un fichero","text":"<p>Con PHP y su m\u00e9todo <code>stat()</code> podemos obtener informaci\u00f3n sobre los archivos que le indiquemos. Este m\u00e9todo devuelve hasta un total de 12 elementos con informaci\u00f3n acerca de nuestro archivo.</p> <pre><code>0   dev         n\u00famero de dispositivo\n1   ino         n\u00famero de i-nodo\n2   mode        modo de protecci\u00f3n del i-nodo\n3   nlink       n\u00famero de enlaces\n4   uid         ID de usuario del propietario\n5   gid         ID de grupo del propietario\n6   rdev        tipo de dispositivo, si es un dispositivo i-nodo\n7   size        tama\u00f1o en bytes\n8   atime       momento del \u00faltimo acceso (tiempo Unix)\n9   mtime       momento de la \u00faltima modificaci\u00f3n (tiempo Unix)\n10  ctime       momento de la \u00faltima modificaci\u00f3n del i-nodo (tiempo Unix)\n11  blksize     tama\u00f1o del bloque E/S del sistema de ficheros\n12  blocks      n\u00famero de bloques de 512 bytes asignados\n</code></pre> <p>Unos ejemplos...</p> <pre><code>&lt;?php\n  // \u2592\u2592 Informaci\u00f3n del archivo \u2592\u2592\n\n  $file = \"miarchivo.txt\";\n  $texto = \"Todos somos muy ignorantes, lo que ocurre es que no todos ignoramos las mismas cosas.\";\n\n  $fp = fopen($file, \"w\");\n  fwrite($fp, $texto);\n\n  $datos = stat($file);\n\n  echo $datos[3] . \"&lt;br&gt;\"; // N\u00famero de enlaces, 1\n  echo $datos[7] . \"&lt;br&gt;\"; // Tama\u00f1o en bytes, 85\n  echo $datos[8] . \"&lt;br&gt;\"; // Momento de \u00faltimo acceso, 1444138104\n  echo $datos[9] . \"&lt;br&gt;\"; // Momento de \u00faltima modificaci\u00f3n, 1444138251\n?&gt;\n</code></pre> <p>Echa un vistazo a las funciones de directorios que tiene PHP, es muy interesante.</p>"},{"location":"ut05/ut0509/#4-archivos-pdf","title":"4. Archivos PDF","text":"<p>Con PHP podemos manejar todo tipo de archivos como ya hemos visto pero, \u00bfqu\u00e9 pasa si queremos generar ficheros PDF con datos sacados de una base de datos?</p> <p>Gracias a una clase escrita en PHP, podemos generar archivos PDF sin necesidad de instalar librer\u00edas adicionales en nuestro servidor.</p> <p>Para ello, como tenemos composer dentro de nuestro proyecto en XAMPP o dentro de nuestra imagen de Docker, usaremos composer para instalar esta dependencia.</p> <p>Instalar biblioteca desde Composer</p> <p>1\u00ba inicia Composer Ejecuta el comando para inicializar un archivo <code>composer.json</code> en tu proyecto. <pre><code>/opt/lampp/bin/php /usr/local/bin/composer init\n</code></pre> 2\u00ba instala una biblioteca para PDF como puede ser FPDF (existen otras como Dompdf): <pre><code>/opt/lampp/bin/php /usr/local/bin/composer require setasign/fpdf\n</code></pre> 3\u00ba Verifica la Instalaci\u00f3n Composer descargar\u00e1 la biblioteca en la carpeta <code>vendor/</code> y actualizar\u00e1 el archivo <code>composer.json</code> con las dependencias. Confirma que la carpeta <code>vendor/</code> y el archivo <code>composer.lock</code> se hayan creado.</p> <p>1\u00ba inicia Composer Ejecuta el comando para inicializar un archivo <code>composer.json</code> en tu proyecto.     <pre><code>php C:\\xampp\\php\\composer.phar init\n</code></pre> O si Composer est\u00e1 configurado globalmente en tu sistema, puedes ejecutar simplemente: <pre><code>composer init\n</code></pre> 2\u00ba Instala <code>setasign/fpdf</code> Si Composer est\u00e1 configurado globalmente, ejecuta: <pre><code>composer require setasign/fpdf\n</code></pre> Si est\u00e1s usando <code>composer.phar</code> en el directorio de PHP de XAMPP, utiliza: <pre><code>php C:\\xampp\\php\\composer.phar require setasign/fpdf\n</code></pre> 3\u00ba Verifica la Instalaci\u00f3n Composer descargar\u00e1 la biblioteca en la carpeta <code>vendor/</code> y actualizar\u00e1 el archivo <code>composer.json</code> con las dependencias. Confirma que la carpeta <code>vendor/</code> y el archivo <code>composer.lock</code> se hayan creado.</p> <p>Ejemplo de <code>Hola Mundo</code> convertido a PDF</p> <pre><code>&lt;?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n// Instanciamos la clase\n// P = Portrait | mm = unidades en mil\u00edmetros | A4 = formato\n$pdf = new FPDF('P','mm','A4');\n\n// A\u00f1adimos una p\u00e1gina\n$pdf-&gt;AddPage();\n\n// Establecemos la fuente y el tama\u00f1o de letra\n$pdf-&gt;SetFont('Arial', 'B', 18);\n\n// Imprimimos una celda con el texto que nosotros queramos\n$pdf-&gt;Cell(60,20,'Hola clase DWES!');\n\n// Terminamos el PDF\n$pdf-&gt;Output();\n?&gt;\n</code></pre> <p>Hay muchos ejemplos y tutoriales, as\u00ed como documentaci\u00f3n de la clase FPDF en la p\u00e1gina oficial. </p> <p>Visita la secci\u00f3n de tutoriales y el manual para sacar mayor partido a esta clase.</p> <p>Otro ejemplo FPDF</p> <pre><code>&lt;?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nclass MiPdf extends FPDF {\n   // Cabecera\n   function Header() {\n      // A\u00f1adimos un logotipo\n      $this-&gt;Image('logo.png',10,7,22);\n      // establecemos la fuente y el tama\u00f1o\n      $this-&gt;SetFont('Arial','B',18);\n      // Movemos el contenido un poco a la derecha\n      $this-&gt;Cell(60);\n      // Pintamos la celda\n      $this-&gt;Cell(80,10,'IES Mestre Ramon Esteve',1,3,'C');\n      // Pasamos a la siguiente l\u00ednea\n      $this-&gt;Ln(15);\n   }\n\n   // Pie de p\u00e1gina\n   function Footer() {\n      // Nos posicionamos a 1.5 cm  desde abajo del todo de la p\u00e1gina\n      $this-&gt;SetY(-15);\n      // Arial italic 8\n      $this-&gt;SetFont('Arial','I',8);\n      // N\u00famero de p\u00e1gina\n      $this-&gt;Cell(0,10,'pagina ' . $this-&gt;PageNo() . ' | {nb}',0,0,'C');\n   }\n}\n\n// Instanciamos la clase\n$pdf = new MiPdf();\n\n// Definimos un alias para la numeraci\u00f3n de p\u00e1ginas\n$pdf-&gt;AliasNbPages();\n\n$pdf-&gt;AddPage();\n$pdf-&gt;SetFont('Times','',14);\n\nfor($i = 1; $i &lt;= 30; $i++){\n    $pdf-&gt;Cell(0, 10, 'Numero de linea: ' . $i, 0, 1);\n}\n//$pdf-&gt;Output();\n$pdf-&gt;Output('documento.pdf', 'I');\n\n?&gt;\n</code></pre> <p>Ejemplo de creaci\u00f3n de un fichero pdf.</p> Ejercicios a realizar <ul> <li><code>Ejercicio 509</code></li> <li><code>Ejercicio 510</code></li> </ul>"},{"location":"ut05/ut05ac/","title":"Ut05ac","text":""},{"location":"ut05/ut05ac/#ejercicio-501","title":"Ejercicio 501","text":"<p>Crea una nueva base de datos con el nombre <code>lol</code> y cotejamiento de datos <code>utf8mb4_unicode_ci</code>.</p>"},{"location":"ut05/ut05ac/#ejercicio-502","title":"Ejercicio 502","text":"<p>En nuestra base de datos <code>lol</code> que se ha creado en el ejercicio anterior, vamos a crear la tabla <code>campeon</code> con los siguientes campos (no olvides poner el tipo de datos de cada uno de los campos):</p> <ul> <li>id [*]</li> <li>nombre</li> <li>rol</li> <li>dificultad</li> <li>descripcion</li> </ul> <p>[*] id ser\u00e1 la clave primaria de la tabla lol.</p>"},{"location":"ut05/ut05ac/#ejercicio-503","title":"Ejercicio 503","text":"<p>Rellena la tabla <code>campeon</code> con, al menos 10 registros, con los datos que t\u00fa quieras o si lo prefieres, puedes basarte en la p\u00e1gina oficial del juego pero \u00a1\u00a1 NO TE PONGAS A JUGAR !!</p> <p>Ayuda sql</p> <p>Para la creaci\u00f3n de la tabla <code>campeon</code> y sus tuplas de ejemplo (Ejercicio 502 y Ejercicio 503), aqu\u00ed te dejo el sql a importar en la base de datos lol: lol_campeon.sql</p>"},{"location":"ut05/ut05ac/#pdo","title":"PDO","text":""},{"location":"ut05/ut05ac/#ejercicio-504","title":"Ejercicio 504","text":"<p>Crea <code>504campeones.php</code> y lista todos los campeones del LOL que has metido en tu base de datos (1\u00ba conexi\u00f3n a BD y 2\u00ba <code>foreach</code> para cada campe\u00f3n que tengas en la tabla <code>campeon</code>).</p>"},{"location":"ut05/ut05ac/#ejercicio-505","title":"Ejercicio 505","text":"<p>Modifica el archivo <code>504campeones.php</code> y gu\u00e1rdalo como <code>505campeones.php</code>. Pon al lado de cada uno de los campeones listados un bot\u00f3n para <code>editar</code> y otro para <code>borrar</code>. Cada uno de esos botones har\u00e1 la correspondiente funci\u00f3n dependiendo del id del campe\u00f3n seleccionado:</p> <ul> <li>Al clicar en el bot\u00f3n editar, el usuario ser\u00e1 redirigido al archivo <code>505editando.php</code> donde mostrar\u00e1 un formulario con los campos rellenos por los datos del campe\u00f3n seleccionado. Al darle al bot\u00f3n de <code>guardar</code> los datos se guardar\u00e1n en la base de datos y el usuario ser\u00e1 redirigido a la lista de campeones para poder ver los cambios.</li> <li>Al clicar en el bot\u00f3n borrar, el usuario ser\u00e1 preguntado a trav\u00e9s de un mensaje de JavaScript (prompt) si est\u00e1 seguro de que quiere borrar al campe\u00f3n seleccionado. En el mensaje de confirmaci\u00f3n debe aparecer el nombre del campe\u00f3n seleccionado. Si el usuario pincha en Aceptar el campe\u00f3n ser\u00e1 eliminado de la base de datos y el usuario ser\u00e1 redirigido nuevamente al listado de campeones para comprobar que, efectivamente dicho campe\u00f3n se ha eliminado de la lista.</li> </ul>"},{"location":"ut05/ut05ac/#filtros-y-comodines","title":"Filtros y comodines","text":""},{"location":"ut05/ut05ac/#ejercicio-506","title":"Ejercicio 506","text":"<p>Modifica el archivo <code>504campeones.php</code> y gu\u00e1rdalo como <code>506campeones.php</code> para que se muestre como una tabla con las columnas de la propia tabla de la base de datos; es decir; id, nombre, rol, dificultad, descripci\u00f3n. Al lado de cada nombre de cada columna, pon 2 iconos que sean \u02c4 \u02c5 y que cada uno de ellos ordene el listado en funci\u00f3n de cu\u00e1l se haya pinchado.</p> <ul> <li>Si se ha pulsado en Nombre el icono de \u02c4, el listado debe aparecer ordenado por nombre ascendente. Si por el contrario se ha pulsado \u02c5 tendr\u00e1 que ordenarse por nombre descendente.</li> <li>Ten en cuenta que cada icono debe llevar consigo un enlace al listado que contenga par\u00e1metros en la URL que satisfagan las opciones seleccionadas as\u00ed que haced uso de $_GET para poder capturarlos y escribid las consultas SQL que sean necesarias para hacer cada uno de los filtros.</li> </ul> <p>iconos</p> <p>Puedes usar Font Awesome para los iconos pero es algo opcional.</p>"},{"location":"ut05/ut05ac/#ejercicio-507","title":"Ejercicio 507","text":"<p>Aprovecha lo que hiciste de los ejercicios 501 al 504 pero esta vez utilizando <code>PDO::FETCH_ASSOC</code>.</p>"},{"location":"ut05/ut05ac/#ejercicio-508","title":"Ejercicio 508","text":"<p>Crea una tabla nueva dentro de la base de datos <code>lol</code> que ya tienes y crea un sistema de login con usuarios. Introduce en la base de datos al menos 3 usuarios diferentes con sus contrase\u00f1as distintas. Recuerda que:</p> <ul> <li>La tabla nueva ha de llamarse <code>usuario</code>.</li> <li>Los campos a crear en la nueva tabla deben ser:  \u00a0\u00a0\u00a0\u00a0 - <code>id</code> [*] \u00a0\u00a0\u00a0\u00a0 - <code>nombre</code> \u00a0\u00a0\u00a0\u00a0 - <code>usuario</code> \u00a0\u00a0\u00a0\u00a0 - <code>password</code> \u00a0\u00a0\u00a0\u00a0 - <code>email</code></li> <li>Las contrase\u00f1as deben ser cifradas antes de guardar el datos en la base de datos.</li> <li>Crea el formulario <code>508registro.php</code> donde el usuario introduzca los datos de registro y vinc\u00falalo con <code>508nuevoUsuario.php</code> para que recoja los datos mediante POST y los inserte en la base de datos si todo ha ido bien.</li> <li>Queda PROHIBID\u00cdSIMO acceder a <code>608nuevoUsuario.php</code> sin el formulario rellenado.</li> <li>La sentencia de INSERT debe estar controlada para que no pueda introducirse ning\u00fan dato en blanco. Ten en cuenta que est\u00e1s modificando la base de datos y no queremos campos mal rellenados.</li> <li>Si todo ha ido bien, muestra un mensaje por pantalla diciendo <code>El usuario XXX ha sido introducido en el sistema con la contrase\u00f1a YYY</code>.</li> </ul>"},{"location":"ut05/ut05ac/#ficheros","title":"Ficheros","text":""},{"location":"ut05/ut05ac/#ejercicio-509","title":"Ejercicio 509","text":"<p>Entra en loremipsum.com y genera un texto de 3 p\u00e1rrafos. Copia el texto generado y gu\u00e1rdalo en un archivo nuevo llamado <code>509loremIpsum.txt</code>. Genera un archivo php llamado <code>509loremIpsum.php</code> y muestra por pantalla el texto del archivo txt que acabas de crear, su tama\u00f1o en Kilobytes , la fecha de su \u00faltima modificaci\u00f3n y el ID de usuario que cre\u00f3 el archivo.</p>"},{"location":"ut05/ut05ac/#ejercicio-510","title":"Ejercicio 510","text":"<p>Vuelve a cargar el archivo <code>506campeones.php</code> y ren\u00f3mbralo a <code>510campeones.php</code> pero en vez de mostrar la tabla por pantalla, genera un archivo CSV <code>510campeones.csv</code> y otro <code>510campeonesCSV.php</code> donde saques por pantalla el contenido del archivo <code>510campeones.csv</code>.</p>"},{"location":"ut05/ut05ac/#proyecto-chollocenter","title":"Proyecto CholloCenter","text":"<p>Vamos a trabajar con una base de datos donde almacenaremos la informaci\u00f3n relacionada con ofertas que publiquen los usuarios y los listaremos en funci\u00f3n de varios filtros, nuevos, m\u00e1s votados, m\u00e1s vistos, m\u00e1s comentados entre otros, al m\u00e1s puro estilo Chollometro.</p> P\u00e1gina web Choll\u00f3metro"},{"location":"ut05/ut05ac/#ejercicio-515","title":"Ejercicio 515","text":"<p>Estructura el proyecto y piensa en las tablas y bases de datos que necesit\u00e9is para crear el proyecto. Crea los UML necesarios con nombres como <code>515UMLnombreTabla</code> metiendo todos los campos que se necesiten as\u00ed como las relaciones que creas necesarias. Establece un sistema de archivos para el proyecto, teniendo en cuenta que van a haber im\u00e1genes, css, funciones php, constantes e incluso javaScript (pero algo b\u00e1sico) para controlar los eventos del usuario a lo largo de la interfaz.</p>"},{"location":"ut05/ut05ac/#ejercicio-516","title":"Ejercicio 516","text":"<p>Crea un sistema de login/password con los roles <code>administrador</code> y <code>usuario</code>. De momento que se validen los usuarios correctamente utilizando encriptaci\u00f3n en la contrase\u00f1a.</p> <ul> <li><code>Administrador</code>: Puede ver todos los usuarios registrados as\u00ed como los administradores y los chollos creados en la base de datos.</li> <li><code>Usuario</code>: Puede ver sus propios chollos, editarlos y borrarlos, adem\u00e1s de crear nuevos.</li> </ul>"},{"location":"ut05/ut05ac/#ejercicio-517","title":"Ejercicio 517","text":"<p>Crea la vista para poner nuevos chollos y recuerda s\u00f3lo pueden entrar a esta vista usuarios registrados o administradores.</p>"},{"location":"ut05/ut05ac/#ejercicio-518","title":"Ejercicio 518","text":"<p>Crea la vista donde se muestren todos los chollos creados. Esta vista puede verla cualquier usuario, registrado o no en el sistema. Ten en cuenta que esta vista ser\u00e1 la vista general de la web as\u00ed que puedes llamarla <code>index.php</code> donde despu\u00e9s aplicaremos filtros por $_GET.</p>"},{"location":"ut06/ut0601/","title":"UT 6. Herramientas Web","text":"<p>Duraci\u00f3n estimada: 6 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. g) Se han reconocido y evaluado las herramientas y frameworks de programaci\u00f3n en entorno servidor. RA5. Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio. f) Se han escrito aplicaciones web con mantenimiento de estado y separaci\u00f3n de la l\u00f3gica de negocio. RA9. Desarrolla aplicaciones web h\u00edbridas seleccionando y utilizando tecnolog\u00edas, frameworks servidor y repositorios heterog\u00e9neos de informaci\u00f3n. c) Se ha creado una aplicaci\u00f3n web que recupero y *procese repositorios de informaci\u00f3n ya existentes."},{"location":"ut06/ut0602/","title":"Ut0602","text":"<p>Herramienta por excelencia en PHP para la gesti\u00f3n de librer\u00edas y dependencias, de manera que instala y las actualiza asegurando que todo el equipo de desarrollo tiene el mismo entorno y versiones. Adem\u00e1s, ofrece autoloading de nuestro c\u00f3digo, de manera que no tengamos que hacerlo nosotros \"a mano\".</p> <p>Est\u00e1 escrito en PHP, y pod\u00e9is consultar toda su documentaci\u00f3n en https://getcomposer.org/.</p> <p>Utiliza Packagist como repositorio de librer\u00edas.</p> <p>Funcionalmente, es similar a Maven (Java) / npm (JS).</p>"},{"location":"ut06/ut0602/#1-instalacion","title":"1. Instalaci\u00f3n","text":"<p>Si estamos usando XAMPP, hemos de instalar Composer en el propio sistema operativo. Se recomienda seguir las instrucciones oficiales seg\u00fan el sistema operativo a emplear.</p> <p>En cambio, si usamos Docker, necesitamos modificar la configuraci\u00f3n de nuestro contenedor. En nuestro caso, hemos decidido modificar el archivo Dockerfile y a\u00f1adir el siguiente comando:</p> <pre><code>COPY --from=composer:2.0 /usr/bin/composer /usr/local/bin/composer  \n</code></pre> <p>Para facilitar el trabajo, hemos creado una plantilla ya preparada.</p> <p>Es importante que dentro del contenedor comprobemos que tenemos la v2:</p> <pre><code>composer -V\n</code></pre>"},{"location":"ut06/ut0602/#2-primeros-pasos","title":"2. Primeros pasos","text":"<p>Cuando creemos un proyecto por primera vez, hemos de inicializar el repositorio. Para ello, ejecutaremos el comando <code>composer init</code> donde:</p> <ul> <li>Configuramos el nombre del paquete, descripci\u00f3n, autor (nombre ), tipo de paquete (project), etc...</li> <li>Definimos las dependencias del proyecto (<code>require</code>) y las de desarrollo (<code>require-dev</code>) de manera interactiva.</li> <li>En las de desarrollo se indica aquellas que no se instalar\u00e1n en el entorno de producci\u00f3n, por ejemplo, las librer\u00edas de pruebas.</li> </ul> <p>Tras su configuraci\u00f3n, se crear\u00e1 autom\u00e1ticamente el archivo <code>composer.json</code> con los datos introducidos y descarga las librer\u00edas en la carpeta <code>vendor</code>. La instalaci\u00f3n de las librer\u00edas siempre se realiza de manera local para cada proyecto.</p> <pre><code>{\n  \"name\": \"dwes/log\",\n  \"description\": \"Pruebas con Monolog\",\n  \"type\": \"project\",\n  \"require\": {\n      \"monolog/monolog\": \"^2.1\"\n  },\n  \"license\": \"MIT\",\n  \"authors\": [\n      {\n        \"name\": \"Nombre Apellido\", // ejemplo: Carmen Llopis\n        \"email\": \"inicialNombre.Apellido@edu.gva.es\" // ejemplo: c.llopis@edu.gva.es\n      }\n  ]\n}\n</code></pre> <p>A la hora de indicar cada librer\u00eda introduciremos:</p> <ul> <li>el nombre de la librer\u00eda, compuesta tanto por el creador o \"vendor\", como por el nombre del proyecto. Ejemplos: <code>monolog/monolog</code> o <code>laravel/installer</code>.</li> <li>la versi\u00f3n de cada librer\u00eda. Tenemos diversas opciones para indicarla:</li> <li>Directamente: 1.4.2</li> <li>Con comodines: 1.*</li> <li>&gt;= 2.0.3</li> </ul>"},{"location":"ut06/ut0602/#3-actualizar-librerias","title":"3. Actualizar librer\u00edas","text":"<p>Podemos definir las dependencias via el archivo composer.json o mediante comandos con el formato composer require vendor/package:version. Por ejemplo, si queremos a\u00f1adir phpUnit como librer\u00eda de desarrollo, haremos:</p> <pre><code>composer require phpunit/phpunit \u2013dev\n</code></pre> <p>Tras a\u00f1adir nuevas librer\u00edas, hemos de actualizar nuestro proyecto:</p> <pre><code>composer update\n</code></pre> <p>Si creamos el archivo <code>composer.json</code> nosotros directamente sin inicializar el repositorio, hemos de instalar las dependencias:</p> <pre><code>composer install\n</code></pre> <p>Al hacer este paso (tanto instalar como actualizar), como ya hemos comentado, se descargan las librer\u00edas en dentro de la carpeta <code>vendor</code>. Es muy importante a\u00f1adir esta carpeta al archivo <code>.gitignore</code> para no subirlas a GitHub.</p> <p>Adem\u00e1s se crea el archivo <code>composer.lock</code>, que almacena la versi\u00f3n exacta que se ha instalado de cada librer\u00eda (este archivo no se toca).</p>"},{"location":"ut06/ut0602/#4-autoloadphp","title":"4. autoload.php","text":"<p>Composer crea de forma autom\u00e1tica en <code>vendor/autoload.php</code> el c\u00f3digo para incluir de forma autom\u00e1tica todas las librer\u00edas que tengamos configuradas en <code>composer.json</code>.</p> <p>Para utilizarlo, en la cabecera de nuestro archivos pondremos:</p> <pre><code>&lt;?php\n    require 'vendor/autoload.php';\n</code></pre> <p>En nuestro caso, de momento s\u00f3lo lo podremos en los archivos donde probamos las clases</p> <p>Si queremos que Composer tambi\u00e9n se encargue de cargar de forma autom\u00e1tica nuestras clases de dominio, dentro del archivo <code>composer.json</code>, definiremos la propiedad <code>autoload</code>:</p> <pre><code>\"autoload\": {\n    \"psr-4\": {\"Dwes\\\\\": \"app/Dwes\"}\n},\n</code></pre> <p>Posteriormente, hemos de volver a generar el autoload de Composer mediante la opci\u00f3n <code>dump-autoload</code>(o <code>du</code>):</p> <pre><code>composer dump-autoload\n</code></pre>"},{"location":"ut06/ut0603/","title":"Ut0603","text":"<p>Vamos a probar Composer a\u00f1adiendo la librer\u00eda de Monolog a nuestro proyecto. Se trata de un librer\u00eda para la gesti\u00f3n de logs de nuestras aplicaciones, soportando diferentes niveles (info, warning, etc...), salidas (ficheros, sockets, BBDD, Web Services, email, etc) y formatos (texto plano, HTML, JSON, etc...).</p> <p>Para ello, incluiremos la librer\u00eda en nuestro proyecto con:</p> <pre><code>composer require monolog/monolog\n</code></pre> <p>Monolog 2 requiere al menos PHP 7.2, cumple con el estandar de logging PSR-3, y es la librer\u00eda empleada por Laravel y Symfony para la gesti\u00f3n de logs.</p> <p>C\u00f3mo usar un log</p> <ul> <li>Seguir las acciones/movimientos de los usuarios</li> <li>Registrar las transacciones</li> <li>Rastrear los errores de usuario</li> <li>Fallos/avisos a nivel de sistema</li> <li>Interpretar y coleccionar datos para posterior investigaci\u00f3n de patrones</li> </ul>"},{"location":"ut06/ut0603/#1-niveles","title":"1. Niveles","text":"<p>A continuaci\u00f3n mostramos los diferentes niveles de menos a m\u00e1s restrictivo:</p> <ul> <li><code>debug -100</code> : Informaci\u00f3n detallada con prop\u00f3sitos de debug. No usar en entornos de producci\u00f3n.</li> <li><code>info - 200</code> : Eventos interesantes como el inicio de sesi\u00f3n de usuarios.</li> <li><code>notice - 250</code> : Eventos normales pero significativos.</li> <li><code>warning - 300</code> : Ocurrencias excepcionales que no llegan a ser error.</li> <li><code>error - 400</code> : Errores de ejecuci\u00f3n que permiten continuar con la ejecuci\u00f3n de la aplicaci\u00f3n pero que deben ser monitorizados.</li> <li><code>critical - 500</code> : Situaciones importantes donde se generan excepciones no esperadas o no hay disponible un componente.</li> <li><code>alert - 550</code> : Se deben tomar medidas inmediatamente. Ca\u00edda completa de la web, base de datos no disponible, etc... Adem\u00e1s, se suelen enviar mensajes por email.</li> <li><code>emergency - 600</code> : Es el error m\u00e1s grave e indica que todo el sistema est\u00e1 inutilizable.</li> </ul>"},{"location":"ut06/ut0603/#2-hola-monolog","title":"2. Hola Monolog","text":"<p>Por ejemplo, en el archivo <code>pruebaLog.php</code> que colocar\u00edamos en el ra\u00edz, primero incluimos el autoload, importamos las clases a utilizar para finalmente usar los m\u00e9todos de Monolog:</p> <pre><code>&lt;?php\n  include __DIR__ .\"/vendor/autoload.php\";\n\n  use Monolog\\Logger;\n  use Monolog\\Handler\\StreamHandler;\n\n  $log = new Logger(\"MiLogger\");\n  $log-&gt;pushHandler(new StreamHandler(\"logs/milog.log\", Logger::DEBUG));\n\n  $log-&gt;debug(\"Esto es un mensaje de DEBUG\");\n  $log-&gt;info(\"Esto es un mensaje de INFO\");\n  $log-&gt;warning(\"Esto es un mensaje de WARNING\");\n  $log-&gt;error(\"Esto es un mensaje de ERROR\");\n  $log-&gt;critical(\"Esto es un mensaje de CRITICAL\");\n  $log-&gt;alert(\"Esto es un mensaje de ALERT\");\n</code></pre> <p>En todos los m\u00e9todos de registro de mensajes (<code>debug</code>, <code>info</code>, ...), adem\u00e1s del propio mensaje, le podemos pasar informaci\u00f3n como el contenido de alguna variable, usuario de la aplicaci\u00f3n, etc.. como segundo par\u00e1metro dentro de un array, el cual se conoce como array de contexto. Es conveniente hacerlo mediante un array asociativo para facilitar la lectura del log.</p> <pre><code>&lt;?php\n  $log-&gt;warning(\"Producto no encontrado\", [$producto]);\n  $log-&gt;warning(\"Producto no encontrado\", [\"datos\" =&gt; $producto]);\n</code></pre>"},{"location":"ut06/ut0603/#3-funcionamiento","title":"3. Funcionamiento","text":"<p>Cada instancia <code>Logger</code> tiene un nombre de canal y una pila de manejadores (handler). Cada mensaje que mandamos al log atraviesa la pila de manejadores, y cada uno decide si debe registrar la informaci\u00f3n, y si se da el caso, finalizar la propagaci\u00f3n. Por ejemplo, un <code>StreamHandler</code> en el fondo de la pila que lo escriba todo en disco, y en el tope a\u00f1ade un <code>MailHandler</code> que env\u00ede un mail s\u00f3lo cuando haya un error.</p>"},{"location":"ut06/ut0603/#4-manejadores","title":"4. Manejadores","text":"<p>Cada manejador tambien tiene un formateador (<code>Formatter</code>). Si no se indica ninguno, se le asigna uno por defecto. El \u00faltimo manejador insertado ser\u00e1 el primero en ejecutarse. Luego se van ejecutando conforme a la pila.</p> <p>Los manejadores m\u00e1s utilizados son:</p> <ul> <li><code>StreamHandler(ruta, nivel)</code></li> <li><code>RotatingFileHandler(ruta, maxFiles, nivel)</code></li> <li><code>NativeMailerHandler(para, asunto, desde, nivel)</code></li> <li><code>FirePHPHandler(nivel)</code></li> </ul> <p>Si queremos que los mensajes de la aplicaci\u00f3n salgan por el log del servidor, en nuestro caso el archivo <code>error.log</code> de Apache utilizaremos como ruta la salida de error:</p> <pre><code>&lt;?php\n    // error.log\n    $log-&gt;pushHandler(new StreamHandler(\"php://stderr\", Logger::DEBUG));\n</code></pre> <p>FirePHP</p> <p>Por ejemplo, mediante FirePHPHandler, podemos utilizar FirePHP, la cual es una herramienta para hacer debug en la consola de Firefox. Tras instalar la extensi\u00f3n en Firefox, habilitar las opciones y configurar el Handler, podemos ver los mensajes coloreados con sus datos: <pre><code>&lt;?php\n$log = new Logger(\"MiFirePHPLogger\");\n$log-&gt;pushHandler(new FirePHPHandler(Logger::INFO));\n\n$datos = [\"real\" =&gt; \"Bruce Wayne\", \"personaje\" =&gt; \"Batman\"];\n$log-&gt;debug(\"Esto es un mensaje de DEBUG\", $datos);\n$log-&gt;info(\"Esto es un mensaje de INFO\", $datos);\n$log-&gt;warning(\"Esto es un mensaje de WARNING\", $datos);\n</code></pre> </p>"},{"location":"ut06/ut0603/#5-canales","title":"5. Canales","text":"<p>Se les asigna al crear el Logger. En grandes aplicaciones, se crea un canal por cada subsistema: ventas, contabilidad, almac\u00e9n. No es una buena pr\u00e1ctica usar el nombre de la clase como canal, esto se hace con un procesador.</p> <p>Para su uso, es recomiendo asignar el log a una propiedad privada a Logger, y posteriormente, en el constructor de la clase, asignar el canal, manejadores y formato.</p> <pre><code>&lt;?php\n  $this-&gt;log = new Logger(\"MiApp\");\n  $this-&gt;log-&gt;pushHandler(new StreamHandler(\"logs/milog.log\", Logger::DEBUG));\n  $this-&gt;log-&gt;pushHandler(new FirePHPHandler(Logger::DEBUG));\n</code></pre> <p>Y dentro de los m\u00e9todos para escribir en el log:</p> <pre><code>&lt;?php\n  $this-&gt;log-&gt;warning(\"Producto no encontrado\", [$producto]);\n</code></pre>"},{"location":"ut06/ut0603/#6-procesadores","title":"6. Procesadores","text":"<p>Los procesadores permiten a\u00f1adir informaci\u00f3n a los mensajes. Para ello, se apilan despu\u00e9s de cada manejador mediante el m\u00e9todo <code>pushProcessor($procesador)</code>.</p> <p>Algunos procesadores conocidos son <code>IntrospectionProcessor</code> (muestran la linea, fichero, clase y metodo desde el que se invoca el log), <code>WebProcessor</code> (a\u00f1ade la URI, m\u00e9todo e IP) o <code>GitProcessor</code> (a\u00f1ade la rama y el commit).</p> <p>PHP</p> <pre><code>&lt;?php\n  $log = new Logger(\"MiLogger\");\n  $log-&gt;pushHandler(new RotatingFileHandler(\"logs/milog.log\", 0, Logger::DEBUG));\n  $log-&gt;pushProcessor(new IntrospectionProcessor());\n  $log-&gt;pushHandler(new StreamHandler(\"php://stderr\", Logger::WARNING));\n  // no usa Introspection pq lo hemos apilado despu\u00e9s, le asigno otro\n  $log-&gt;pushProcessor(new WebProcessor());\n</code></pre> <p>Consola en formato texto</p> <pre><code>[2020-11-26T13:35:31.076138+01:00] MiLogger.DEBUG: Esto es un mensaje de DEBUG [] {\"file\":\"C:\\\\xampp\\\\htdocs\\\\log\\\\procesador.php\",\"line\":12,\"class\":null,\"function\":null}\n[2020-11-26T13:35:31.078344+01:00] MiLogger.INFO: Esto es un mensaje de INFO [] {\"file\":\"C:\\\\xampp\\\\htdocs\\\\log\\\\procesador.php\",\"line\":13,\"class\":null,\"function\":null}\n</code></pre>"},{"location":"ut06/ut0603/#7-formateadores","title":"7. Formateadores","text":"<p>Se asocian a los manejadores con setFormatter. Los formateadores m\u00e1s utilizados son LineFormatter, HtmlFormatter o JsonFormatter.</p> <p>PHP</p> <pre><code>&lt;?php\n  $log = new Logger(\"MiLogger\");\n  $rfh = new RotatingFileHandler(\"logs/milog.log\", Logger::DEBUG);\n  $rfh-&gt;setFormatter(new JsonFormatter());\n  $log-&gt;pushHandler($rfh);\n</code></pre> <p>Consola en JSON</p> <pre><code>{\"message\":\"Esto es un mensaje de DEBUG\",\"context\":{},\"level\":100,\"level_name\":\"DEBUG\",\"channel\":\"MiLogger\",\"datetime\":\"2020-11-27T15:36:52.747211+01:00\",\"extra\":{}}\n{\"message\":\"Esto es un mensaje de INFO\",\"context\":{},\"level\":200,\"level_name\":\"INFO\",\"channel\":\"MiLogger\",\"datetime\":\"2020-11-27T15:36:52.747\n</code></pre> <p>M\u00e1s informaci\u00f3n</p> <p>M\u00e1s informaci\u00f3n sobre manejadores, formateadores y procesadores en https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md.</p>"},{"location":"ut06/ut0603/#8-uso-de-factorias","title":"8. Uso de factor\u00edas","text":"<p>En vez de instanciar un log en cada clase, es conveniente crear una factor\u00eda (por ejemplo, siguiendo la idea del patr\u00f3n de dise\u00f1o Factory Method).</p> <p>Para el siguiente ejemplo, vamos a suponer que creamos la factor\u00eda en el <code>namespace Dwes\\Ejemplos\\Util</code>.</p> <pre><code>&lt;?php\n  namespace Dwes\\Ejemplos\\Util\n\n  use Monolog\\Logger;\n  use Monolog\\Handler\\StreamHandler;\n\n  class LogFactory {\n\n    public static function getLogger(string $canal = \"miApp\") : Logger {\n      $log = new Logger($canal);\n      $log-&gt;pushHandler(new StreamHandler(\"logs/miApp.log\", Logger::DEBUG));\n\n      return $log;\n    }\n  }\n</code></pre> <p>Si en vez de devolver un <code>Monolog\\Logger</code> utilizamos el interfaz de PSR, si en el futuro cambiamos la implementaci\u00f3n del log, no tendremos que modificar nuestro codigo. As\u00ed pues, la factor\u00eda ahora devolver\u00e1 <code>Psr\\Log\\LoggerInterface</code>:</p> <pre><code>&lt;?php\n  namespace Dwes\\Ejemplos\\Util\n\n  use Monolog\\Handler\\StreamHandler;\n  use Monolog\\Logger;\n  use Psr\\Log\\LoggerInterface;\n\n  class LogFactory {\n\n    public static function getLogger(string $canal = \"miApp\") : LoggerInterface {\n      $log = new Logger($canal);\n      $log-&gt;pushHandler(new StreamHandler(\"log/miApp.log\", Logger::DEBUG));\n\n      return $log;\n    }\n  }\n</code></pre> <p>Finalmente, para utilizar la factor\u00eda, s\u00f3lo cambiamos el c\u00f3digo que ten\u00edamos en el constructor de las clases que usan el log, quedando algo asi:</p> <pre><code>&lt;?php\n  namespace Dwes\\Ejemplos\\Util\n\n  use Monolog\\Handler\\StreamHandler;\n  use Monolog\\Logger;\n  use Psr\\Log\\LoggerInterface;\n\n  class LogFactory {\n\n    public static function getLogger(string $canal = \"miApp\") : LoggerInterface {\n      $log = new Logger($canal);\n      $log-&gt;pushHandler(new StreamHandler(\"log/miApp.log\", Logger::DEBUG));\n\n      return $log;\n    }\n  }\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 601</code></li> <li><code>Ejercicio 602</code></li> <li><code>Ejercicio 603</code></li> </ul> Realizar, adem\u00e1s, la actividad proyecto Videoclub 4.0 <ul> <li><code>Ejercicio 604</code></li> <li><code>Ejercicio 605</code></li> <li><code>Ejercicio 606</code></li> <li><code>Ejercicio 607</code></li> <li><code>Ejercicio 608</code></li> </ul>"},{"location":"ut06/ut0604/","title":"Ut0604","text":"<p>phpDocumentor es la herramienta de facto para documentar el c\u00f3digo PHP. Es similar en prop\u00f3sito y funcionamiento a Javadoc.</p> <p>As\u00ed pues, es un herramienta que facilita la documentaci\u00f3n del c\u00f3digo PHP, creando un sitio web con el API de la aplicaci\u00f3n.</p> <p>Se basa en el uso de anotaciones sobre los docblocks. Para ponerlo en marcha, en nuestro caso nos decantaremos por utilizar la imagen que ya existe de Docker.</p>"},{"location":"ut06/ut0604/#1-instalacion-como-binario","title":"1. Instalaci\u00f3n como binario","text":"<p>Otra opci\u00f3n es seguir los pasos que recomienda la documentaci\u00f3n oficial para instalarlo como un ejecutable, que son descargar el archivo <code>phpDocumentor.phar</code> y darles permisos de ejecuci\u00f3n:</p> <pre><code>wget https://phpdoc.org/phpDocumentor.phar\nchmod +x phpDocumentor.phar\nmv phpDocumentor.phar /usr/local/bin/phpdoc\nphpdoc --version\n</code></pre> <p>Una vez instalado, desde el ra\u00edz del proyecto, suponiendo que tenemos nuestro c\u00f3digo dentro de <code>app</code> y que queremos la documentaci\u00f3n dentro de <code>docs/api</code> ejecutamos:</p> <pre><code>phpdoc -d ./app -t docs/api\n</code></pre>"},{"location":"ut06/ut0604/#2-uso-del-docker","title":"2. Uso del Docker","text":"<p>En el caso de usar Docker, usaremos el siguiente comando para ejecutarlo (crea el contenedor, ejecuta el comando que le pidamos, y autom\u00e1ticamente lo borra):</p> <pre><code>docker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3\n</code></pre> <p>A dicho comando, le adjuntaremos los diferentes par\u00e1metros que admite phpDocumentor, por ejemplo:</p> <pre><code># Muestra la versi\u00f3n\ndocker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3 --version\n# Mediante -d se indica el origen a parsear\n# Mediante -t se indica el destino donde generar la documentaci\u00f3n\ndocker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3 -d ./src/app -t ./docs/api\n</code></pre>"},{"location":"ut06/ut0604/#3-docblock","title":"3. DocBlock","text":"<p>Un docblock es el bloque de c\u00f3digo que se coloca encima de un recurso. Su formato es:</p> <pre><code>&lt;?php\n  /*\n   * *Sumario*, una sola l\u00ednea\n   *\n   * *Descripci\u00f3n* que puede utilizar varias l\u00edneas\n   * y que ofrece detalles del elemento o referencias\n   * para ampliar la informaci\u00f3n\n   *\n   * @param string $miArgumento con una *descripci\u00f3n* del argumento\n   * que puede usar varias l\u00edneas.\n   *\n   * @return void\n   */\n  function miFuncion(tipo $miArgumento)\n  {\n  }\n</code></pre>"},{"location":"ut06/ut0604/#4-documentando-el-codigo","title":"4. Documentando el c\u00f3digo","text":"<p>En todos los elementos, ademas del sumario y/o descripci\u00f3n, pondremos:</p> <ul> <li>En las clases: \u00a0\u00a0\u00a0\u00a0 _ <code>@author</code> nombre \u00a0\u00a0\u00a0\u00a0 _ <code>@package</code> ruta del namespace</li> <li>En las propiedades: \u00a0\u00a0\u00a0\u00a0 _ <code>@var</code> tipo descripci\u00f3n</li> <li>En los m\u00e9todos: \u00a0\u00a0\u00a0\u00a0 _ <code>@param</code> tipo $nombre descripci\u00f3n \u00a0\u00a0\u00a0\u00a0 _ <code>@throws</code> ClaseException descripci\u00f3n \u00a0\u00a0\u00a0\u00a0 _ <code>@return</code> tipo descripci\u00f3n</li> </ul> <p>Ve\u00e1moslo con un ejemplo. Supongamos que tenemos una clase que representa un cliente:</p> <pre><code>&lt;?php\n  /*\n   * Clase que representa un cliente\n   *\n   * El cliente se encarga de almacenar los soportes que tiene alquilado,\n   * de manera que podemos alquilar y devolver productos mediante las operaciones\n   * hom\u00f3nimas.\n   *\n   * @package Dwes\\Videoclub\\Model\n   * @author Aitor Medrano &lt;a.medrano@edu.gva.es&gt;\n   */\n  class Cliente {\n\n    public string $nombre;\n    private string $numero;\n\n    /*\n     * Colecci\u00f3n de soportes alquilados\n     * @var array&lt;Soporte&gt;\n     */\n    private $soportesAlquilados[];\n\n\n    /*\n     * Comprueba si el soporte recibido ya lo tiene alquilado el cliente\n     * @param Soporte $soporte Soporte a comprobar\n     * @return bool true si lo tiene alquilado\n     */\n    public function tieneAlquilado(Soporte $soporte) : bool {\n      // ...\n    }\n</code></pre> <p>Si generamos la documentaci\u00f3n y abrimos con un navegador el archivo <code>docs/api/index.html</code> podremos navegar hasta la clase <code>Cliente</code>:</p> Ejemplo de documentaci\u00f3n de la clase Cliente. Ejercicios a realizar <ul> <li><code>Ejercicio 609</code></li> <li><code>Ejercicio 610</code></li> </ul>"},{"location":"ut06/ut0605/","title":"Ut0605","text":"<p>Consiste en navegar a una p\u00e1gina web y extraer informaci\u00f3n autom\u00e1ticamente, a partir del c\u00f3digo HTML generado, y organizar la informaci\u00f3n p\u00fablica disponible en Internet.</p> <p>Esta pr\u00e1ctica requiere el uso de una librer\u00eda que facilite la descarga de la informaci\u00f3n deseada imitando la interacci\u00f3n de un navegador web. Este \"robot\" puede acceder a varias p\u00e1ginas simult\u00e1neamente.</p> <p>Es legal</p> <p>Si el sitio web indica que tiene el contenido protegido por derechos de autor o en las normas de acceso via usuario/contrase\u00f1a nos avisa de su prohibici\u00f3n, estar\u00edamos incurriendo en un delito. Es recomendable estudiar el archivo <code>robots.txt</code> que se encuentra en el ra\u00edz de cada sitio web. M\u00e1s informaci\u00f3n en el art\u00edculo El manual completo para el web scraping legal y \u00e9tico en 2021.</p>"},{"location":"ut06/ut0605/#1-goutte","title":"1. Goutte","text":"<p>Goutte es un sencillo cliente HTTP para PHP creado espec\u00edficamente para hacer web scraping. Lo desarroll\u00f3 el mismo autor del framework Symfony y ofrece un API sencilla para extraer datos de las respuestas HTML/XML de los sitios web.</p> <p>Datos: Revisar https://godofredo.ninja/web-scraping-con-php-utilizando-goutte/</p> <p>Los componentes principales que abstrae Goutte sobre Symfony son:</p> <ul> <li><code>BrowserKit</code> : simula el comportamiento de un navegador web.</li> <li><code>CssSelector</code> : traduce consultas CSS en consultas XPath.</li> <li><code>DomCrawler</code> : facilita el uso del DOM y XPath.</li> </ul> <p>Para poder utilizar Goutte en nuestro proyecto, ejecutaremos el siguiente comando en el terminal:</p> <pre><code>composer require fabpot/goutte\n</code></pre>"},{"location":"ut06/ut0605/#2-goutte-con-selectores-css","title":"2. Goutte con selectores CSS","text":"<p>A continuaci\u00f3n vamos a hacer un ejemplo muy sencillo utilizando los selectores CSS, extrayendo informaci\u00f3n de la web <code>https://books.toscrape.com/</code>, la cual es una p\u00e1gina para pruebas que no rechazar\u00e1 nuestras peticiones.</p> <p>Tras crear un cliente con Goutte, hemos de realizar un petici\u00f3n a una URL. Con la respuesta obtenida, podemos utilizar el m\u00e9todo <code>filter</code> para indicarle la ruta CSS que queremos recorrer e iterar sobre los resultados mediante una funci\u00f3n an\u00f3nima. Una vez estamos dentro de un determinado nodo, el m\u00e9todo <code>text()</code> nos devolver\u00e1 el contenido del propio nodo.</p> <p>En concreto, vamos a meter en un array asociativo el t\u00edtulo y el precio de todos los libros de la categor\u00eda Classics.</p> <pre><code>&lt;?php\n  require '../vendor/autoload.php';\n\n  $httpClient = new \\Goutte\\Client();\n  $response = $httpClient-&gt;request('GET', 'https://books.toscrape.com/catalogue/category/books/classics_6/index.html');\n  // colocamos los precios en un array\n  $precios = [];\n  $response-&gt;filter('.row li article div.product_price p.price_color')-&gt;each(\n     // le pasamos $precios por referencia para poder editarla dentro del closure\n     function ($node) use (&amp;$precios) {\n        $precios[] = $node-&gt;text();\n     }\n  );\n\n  // colocamos el nombre y el precio en un array asociativo\n  $contadorPrecios = 0;\n  $libros = [];\n  $response-&gt;filter('.row li article h3 a')-&gt;each(\n     function ($node) use ($precios, &amp;$contadorPrecios, &amp;$libros) {\n        $libros[$node-&gt;text()] = $precios[$contadorPrecios];\n        $contadorPrecios++;\n     }\n</code></pre>"},{"location":"ut06/ut0605/#3-crawler","title":"3. Crawler","text":"<p>Un caso muy com\u00fan es obtener la informaci\u00f3n de una p\u00e1gina que tiene los resultados paginados, de manera que vayamos recorriendo los enlaces y accediendo a cada uno de los resultados.</p> <p>En este caso vamos a coger todos los precios de los libros de fantas\u00eda, y vamos a sumarlos:</p> <pre><code>&lt;?php\n  require '../vendor/autoload.php';\n\n  use Goutte\\Client;\n  use Symfony\\Component\\HttpClient\\HttpClient;\n\n  $client = new Client(HttpClient::create(['timeout' =&gt; 60]));\n  $crawler = $client-&gt;request('GET', 'https://books.toscrape.com/catalogue/category/books/fantasy_19/index.html');\n\n  $salir = false;\n\n  $precios = [];\n  while (!$salir) {\n      $crawler-&gt;filter('.row li article div.product_price p.price_color')-&gt;each(\n        function ($node) use (&amp;$precios) {\n            $texto = $node-&gt;text();\n            $cantidad = substr($texto, 2); // Le quitamos las libras \u00bf2 posiciones?\n            $precios[] = floatval($cantidad);\n        }\n      );\n\n      $enlace = $crawler-&gt;selectLink('next');\n      if ($enlace-&gt;count() != 0) {\n          // el enlace next existe\n          $sigPag = $crawler-&gt;selectLink('next')-&gt;link();\n          $crawler = $client-&gt;click($sigPag); // hacemos click\n      } else {\n          // ya no hay enlace next\n          $salir = true;\n      }\n  }\n\n  $precioTotal = array_sum($precios);\n  echo $precioTotal;\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 611</code></li> <li><code>Ejercicio 612</code></li> <li><code>Ejercicio 613</code></li> </ul>"},{"location":"ut06/ut0606/","title":"Ut0606","text":"<p>El curso pasado, dentro del m\u00f3dulo de Entornos de Desarrollo, estudiamos la importancia de la realizaci\u00f3n de pruebas, as\u00ed como las pruebas unitarias mediante JUnit.</p> <p>A d\u00eda de hoy es de gran importancia seguir una buena metodolog\u00eda de pruebas, siendo el desarrollo dirigido por las pruebas (Test Driven Development / TDD) uno de los enfoques m\u00e1s empleados, el cual consiste en:</p> <ol> <li> <p>Escribir el test, y como no hay c\u00f3digo implementado, la prueba falle (rojo).</p> </li> <li> <p>Escribir el c\u00f3digo de aplicaci\u00f3n para que la prueba funcione (verde).</p> </li> <li> <p>Refactorizar el c\u00f3digo de la aplicaci\u00f3n con la ayuda de la prueba para comprobar que no rompemos nada (refactor).</p> </li> </ol> Test Driven Development / TDD. <p>En el caso de PHP, la herramienta que se utiliza es PHPUnit (https://phpunit.de/), que como su nombre indica, est\u00e1 basada en JUnit. La versi\u00f3n actual es la 9.0</p> <p>Se recomienda consultar su documentaci\u00f3n en https://phpunit.readthedocs.io/es/latest/index.html.</p>"},{"location":"ut06/ut0606/#1-puesta-en-marcha","title":"1. Puesta en marcha","text":"<p>Vamos a colocar todas las pruebas en una carpeta tests en el ra\u00edz de nuestro proyecto.</p> <p>En el archivo composer.json, a\u00f1adimos:</p> <pre><code>\"require-dev\": {\n    \"phpunit/phpunit\": \"^9\"\n},\n\"scripts\": {\n    \"test\": \"phpunit --testdox --colors tests\"\n}\n</code></pre> <p>Si quisi\u00e9ramos a\u00f1adir la librer\u00eda desde un comando del terminal, tambi\u00e9n podr\u00edamos ejecutar: </p> <pre><code>composer require --dev phpunit/phpunit ^9\n</code></pre> <p>Librer\u00edas de desarrollo</p> <p>Las librer\u00edas que se colocan en <code>require-dev</code> son las de desarrollo y testing, de manera que no se instalar\u00e1n en un entorno de producci\u00f3n.</p> <p>Como hemos creado un script, podemos lanzar las pruebas mediante:</p> <pre><code>composer test\n</code></pre> <p>Vasmos a realizar nuestra primera prueba:</p> <pre><code>&lt;?php\n  use PHPUnit\\Framework\\TestCase;\n\n  class PilaTest extends TestCase\n  {\n     public function testPushAndPop()\n     {\n        $pila = [];\n        $this-&gt;assertSame(0, count($pila));\n\n        array_push($pila, 'batman');\n        $this-&gt;assertSame('batman', $pila[count($pila)-1]);\n        $this-&gt;assertSame(1, count($pila));\n\n        $this-&gt;assertSame('batman', array_pop($pila));\n        $this-&gt;assertSame(0, count($pila));\n     }\n  }\n</code></pre> <p>Tenemos diferentes formas de ejecutar una prueba:</p> <pre><code>./vendor/bin/phpunit tests/PilaTest.php\n./vendor/bin/phpunit tests\n./vendor/bin/phpunit --testdox tests\n./vendor/bin/phpunit --testdox --colors tests\n</code></pre>"},{"location":"ut06/ut0606/#2-disenando-pruebas","title":"2. Dise\u00f1ando pruebas","text":"<p>Tal como hemos visto en el ejemplo, la clase de prueba debe heredar de <code>TestCase</code>, y el nombre de la clase debe acabar en <code>Test,</code> de ah\u00ed que hayamos llamado la clase de prueba como <code>PilaTest</code>.</p> <p>Una prueba implica un m\u00e9todo de prueba (p\u00fablico) por cada funcionalidad a probar. Cada un de los m\u00e9todos se les asocia un caso de prueba.</p> <p>Los m\u00e9todos deben nombrarse con el prefijo <code>test</code>, por ejemplo, <code>testPushAndPop</code>. Es muy importante que el nombre sea muy claro y descriptivo del prop\u00f3sito de la prueba. (camelCase).</p> <p>En los casos de prueba prepararemos varias aserciones para toda la casu\u00edstica: rangos de valores, tipos de datos, excepciones, etc...</p>"},{"location":"ut06/ut0606/#3-aserciones","title":"3. Aserciones","text":"<p>Las aserciones permiten comprobar el resultado de los m\u00e9todos que queremos probar. Las aserciones esperan que el predicado siempre sea verdadero.</p> <p>PHPUnit ofrece las siguiente aserciones:</p> <ul> <li><code>assertTrue</code> / <code>assertFalse</code>: Comprueba que la condici\u00f3n dada sea evaluada como true / false.</li> <li><code>assertEquals</code> / <code>assertSame</code>: Comprueba que dos variables sean iguales.</li> <li><code>assertNotEquals</code> / <code>assertNotSame</code>: Comprueba que dos variables NO sean iguales.</li> <li><code>Same</code> \u2192 comprueba los tipos. Si no coinciden los tipos y los valores, la aserci\u00f3n fallar\u00e1.</li> <li><code>Equals</code> \u2192 sin comprobaci\u00f3n estricta.</li> <li><code>assertArrayHasKey</code> / <code>assertArrayNotHasKey</code>: Comprueba que un array posea un key determinado / o NO lo posea</li> <li><code>assertArraySubset</code>: Comprueba que un array posea otro array como subset del mismo</li> <li><code>assertAttributeContains</code> / <code>assertAttributeNotContains</code>: Comprueba que un atributo de una clase contenga una variable determinada / o NO contenga una variable determinada</li> <li><code>assertAttributeEquals</code>: Comprueba que un atributo de una clase sea igual a una variable determinada.</li> </ul>"},{"location":"ut06/ut0606/#4-comparando-la-salida","title":"4. Comparando la salida","text":"<p>Si los m\u00e9todos a probar generan contenido mediante <code>echo</code> o una instrucci\u00f3n similar, disponemos de las siguiente expectativas:</p> <ul> <li><code>expectOutputString(salidaEsperada)</code></li> <li><code>expectOutputRegex(expresionRegularEsperada)</code></li> </ul> <p>Las expectativas difieren de las aserciones que informan del resultado que se espera antes de invocar al m\u00e9todo. Tras definir la expectativa, se invoca al m\u00e9todo que realiza el <code>echo</code> / <code>print</code>.</p> <pre><code>&lt;?php\n  namespace Dwes\\Videoclub\\Model;\n\n  use PHPUnit\\Framework\\TestCase;\n  use Dwes\\Videoclub\\Model\\CintaVideo;\n\n  class CintaVideoTest extends TestCase {\n      public function testConstructor()\n      {\n         $cinta = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107);\n         $this-&gt;assertSame( $cinta-&gt;getNumero(), 23);\n      }\n\n      public function testMuestraResumen()\n      {\n         $cinta = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107);\n         $resultado = \"&lt;br&gt;Pel\u00edcula en VHS:\";\n         $resultado .= \"&lt;br&gt;Los cazafantasmas&lt;br&gt;3.5 (IVA no incluido)\";\n         $resultado .= \"&lt;br&gt;Duraci\u00f3n: 107 minutos\";\n         // definimos la expectativa\n         $this-&gt;expectOutputString($resultado);\n         // invocamos al m\u00e9todo que har\u00e1 echo\n         $cinta-&gt;muestraResumen();\n      }\n}\n</code></pre>"},{"location":"ut06/ut0606/#5-proveedores-de-datos","title":"5. Proveedores de datos","text":"<p>Cuando tenemos pruebas que solo cambian respecto a los datos de entrada y de salida, es \u00fatil utilizar proveedores de datos.</p> <p>Se declaran en el docblock mediante <code>@dataProvider nombreMetodo</code>, donde se indica el nombre de un m\u00e9todo p\u00fablico que devuelve un array de arrays, donde cada elemento es un caso de prueba.</p> <p>La clase de prueba recibe como par\u00e1metros los datos a probar y el resultado de la prueba como \u00faltimo par\u00e1metro.</p> <p>El siguiente ejemplo comprueba con diferentes datos el funcionamiento de <code>muestraResumen</code>:</p> <pre><code>&lt;?php\n  /*\n   * @dataProvider cintasProvider\n   */\n  public function testMuestraResumenConProvider($titulo, $id, $precio, $duracion, $esperado)\n  {\n     $cinta = new CintaVideo($titulo, $id, $precio, $duracion);\n     $this-&gt;expectOutputString($esperado);\n     $cinta-&gt;muestraResumen();\n  }\n\n  public function cintasProvider() {\n     return [\n        \"cazafantasmas\" =&gt; [\"Los cazafantasmas\", 23, 3.5, 107, \"&lt;br&gt;VHS:&lt;br&gt;Los cazafantasmas&lt;br&gt;3.5 \u20ac(IVA no incluido)&lt;br&gt;Duraci\u00f3n: 107 min\"],\n        \"superman\" =&gt; [\"Superman\", 24, 3, 188, \"&lt;br&gt;VHS:&lt;br&gt;Superman&lt;br&gt;3 \u20ac (IVA no incluido)&lt;br&gt;Duraci\u00f3n: 188 min\"],\n     ];\n  }\n</code></pre>"},{"location":"ut06/ut0606/#6-probando-excepciones","title":"6. Probando excepciones","text":"<p>Las pruebas adem\u00e1s de comprobar que las clases funcionan como se espera, han de cubrir todos los casos posibles. As\u00ed pues, debemos poder hacer pruebas que esperen que se lance una excepci\u00f3n (y que el mensaje contenga cierta informaci\u00f3n):</p> <p>Para ello, se utilizan las siguiente expectativas:</p> <ul> <li><code>expectException(Excepcion::class)</code></li> <li><code>expectExceptionCode(codigoExcepcion)</code></li> <li><code>expectExceptionMessage(mensaje)</code></li> </ul> <p>Del mismo modo que antes, primero se pone la expectativa, y luego se provoca que se lance la excepci\u00f3n:</p> <pre><code>&lt;?php\n  public function testAlquilarCupoLleno() {\n     $soporte1 = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107); \n     $soporte2 = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1);\n     $soporte3 = new Dvd(\"Origen\", 24, 15, \"es,en,fr\", \"16:9\"); \n     $soporte4 = new Dvd(\"El Imperio Contraataca\", 4, 3, \"es,en\",\"16:9\"); \n\n     $cliente1 = new Cliente(\"Bruce Wayne\", 23); \n     $cliente1-&gt;alquilar($soporte1); \n     $cliente1-&gt;alquilar($soporte2); \n     $cliente1-&gt;alquilar($soporte3); \n\n     $this-&gt;expectException(CupoSuperadoException::class);\n     $cliente1-&gt;alquilar($soporte4); \n}\n</code></pre>"},{"location":"ut06/ut0606/#7-cobertura-de-codigo","title":"7. Cobertura de c\u00f3digo","text":"<p>La cobertura de pruebas indica la cantidad de c\u00f3digo que las pruebas cubren, siendo recomendable que cubran entre el 95 y el 100%.</p> <p>Una de las m\u00e9tricas asociadas a los informes de cobertura es el CRAP (An\u00e1lisis y Predicciones sobre el Riesgo en Cambios), el cual mide la cantidad de esfuerzo, dolor y tiempo requerido para mantener una porci\u00f3n de c\u00f3digo. Esta m\u00e9trica debe mantenerse con un valor inferior a 5.</p> <p>Requisito xdebug</p> <p>Aunque ya viene instalado dentro de PHPUnit, para que funcione la cobertura del c\u00f3digo, es necesario que el c\u00f3digo PHP se ejecute con XDEBUG, y e indicarle a Apache que as\u00ed es (colocando en el archivo de configuraci\u00f3n <code>php.ini</code> la directiva <code>xdebug.mode=coverage</code>).</p> <p>A\u00f1adimos en <code>composer.json</code> un nuevo script:</p> <pre><code>\"coverage\": \"phpunit --coverage-html coverage --coverage-filter app tests\"\n</code></pre> <p>Y posteriormente ejecutamos</p> <pre><code>composer coverage\n</code></pre> <p>Por ejemplo, si accedemos a la clase <code>CintaVideo</code> con la prueba que hab\u00edamos realizado anteriormente, podemos observar la cobertura que tiene al 100% y que su CRAP es 2.</p> Ejemplo prueba clase CintaVideo. <p>Temas pendientes</p> <ul> <li> <p>Dependencia entre casos de prueba con el atributo <code>@depends</code></p> </li> <li> <p>Completamente configurable mediante el archivo <code>phpxml.xml</code>: https://phpunit.readthedocs.io/es/latest/configuration.html</p> </li> <li> <p>Preparando las pruebas con <code>setUpBeforeClass()</code> y <code>tearDownAfterClass()</code></p> </li> <li> <p>Objetos y pruebas <code>Mock (dobles)</code> con <code>createMock()</code></p> </li> </ul> Ejercicios a realizar <ul> <li><code>Ejercicio 614</code></li> <li><code>Ejercicio 615</code></li> <li><code>Ejercicio 616</code></li> <li><code>Ejercicio 617</code></li> <li><code>Ejercicio 618</code></li> </ul> Realizar, adem\u00e1s, la actividad proyecto Videoclub 5.0 <ul> <li><code>Ejercicio 619</code></li> <li><code>Ejercicio 620</code></li> <li><code>Ejercicio 621</code></li> <li><code>Ejercicio 622</code></li> </ul> Realizar ejercicios de Ampliaci\u00f3n (opcional) <ul> <li><code>Ejercicio 623</code></li> <li><code>Ejercicio 624</code></li> <li><code>Ejercicio 625</code></li> </ul>"},{"location":"ut06/ut06ac/","title":"Ut06ac","text":""},{"location":"ut06/ut06ac/#monolog","title":"Monolog","text":""},{"location":"ut06/ut06ac/#ejercicio-601","title":"Ejercicio 601","text":"<p>Crea un nuevo proyecto con Composer llamado <code>Monologos</code>:</p> <ul> <li>Incluye como librer\u00eda la \u00faltima versi\u00f3n de Monolog.</li> <li>Crea la clase <code>Dwes\\Monologos\\HolaMonolog</code>.</li> <li>Define una propiedad privada nombrada <code>miLog</code> para guardar el log.</li> <li>Define en el constructor un <code>RotatingFileHandler</code> que escriba en la carpeta <code>logs</code> del proyecto, y que almacene los mensajes a partir de debug.</li> <li>Crea los m\u00e9todos <code>saludar</code> y <code>despedir</code> que hagan un log de tipo info con la acci\u00f3n correspondiente.</li> </ul>"},{"location":"ut06/ut06ac/#ejercicio-602","title":"Ejercicio 602","text":"<p>Siguiendo con el proyecto <code>Monologos</code>:</p> <ul> <li>Crea un archivo llamado <code>inicio.php</code> que permita probar <code>HolaMonolog</code>.</li> <li>Comprueba que los mensajes aparecen en el log.</li> <li>Cambia el nivel para que el manejador solo muestre los mensajes a partir de warning.</li> <li>Vuelve a ejectuar <code>inicio.php</code> y comprueba el archivo de log.</li> </ul>"},{"location":"ut06/ut06ac/#ejercicio-603","title":"Ejercicio 603","text":"<p>Modifica la clase <code>HolaMonolog</code>:</p> <ul> <li> <p>En el constructor, a\u00f1ade a la pila un manejador que escriba a la salida de error conjunto al procesador de introspecci\u00f3n, mostrando mensajes desde el nivel debug.</p> </li> <li> <p>A\u00f1ade una propiedad denominada <code>hora</code>, la cual se inicializa \u00fanicamente como par\u00e1metro del constructor. Si la <code>hora</code> es inferior a 0 o mayor de 24, debe escribir un log de warning con un mensaje apropiado.</p> </li> <li> <p>Modifica los m\u00e9todos <code>saludar</code> y <code>despedir</code> para hacerlo acorde a la propiedad <code>hora</code> (buenos d\u00edas, buenas tardes, hasta ma\u00f1ana, etc...).</p> </li> </ul>"},{"location":"ut06/ut06ac/#proyecto-videoclub-40","title":"Proyecto Videoclub 4.0","text":""},{"location":"ut06/ut06ac/#ejercicio-604","title":"Ejercicio 604","text":"<p>Como ya tenemos Composer instalado:</p> <ul> <li>Inicial\u00edzalo dentro de tu proyecto Videoclub.</li> <li>Incluye Monolog y PhpUnit, cada una en su lugar adecuado.</li> <li>A\u00f1ade el autoload al archivo <code>composer.json</code>, y haz los cambios necesarios en las clases para utilizar el autoload de Composer.</li> <li>Sube los cambios a GitHub y crea la etiqueta <code>v0.511</code>.</li> </ul>"},{"location":"ut06/ut06ac/#ejercicio-605","title":"Ejercicio 605","text":"<p>Modifica la clase <code>Cliente</code> para introducir un <code>Logger</code> de Monolog.</p> <ul> <li>A\u00f1ade el log como una propiedad de la clase e inicial\u00edzalo en el constructor, con el nombre del canal <code>VideoclubLogger</code>.</li> <li>Se debe almacenar en <code>logs/videoclub.log</code> mostrando todos los mensajes desde debug.</li> <li>Antes de lanzar cualquier excepci\u00f3n, debe escribir un log de tipo warning.</li> <li>Sustituir los <code>echo</code> que haya en el c\u00f3digo, que ahora pasar\u00e1n por el log con el nivel info, a excepci\u00f3n del m\u00e9todo <code>muestraResumen</code> que seguir\u00e1 haciendo <code>echo</code>.</li> </ul>"},{"location":"ut06/ut06ac/#ejercicio-606","title":"Ejercicio 606","text":"<p>Vuelve a hacer lo mismo que en el ejercicio anterior, pero ahora con la clase <code>Videoclub</code>. Adem\u00e1s:</p> <ul> <li>Siempre que se llame a un m\u00e9todo del log, se le pasar\u00e1 como segundo par\u00e1metro la informaci\u00f3n que dispongamos.</li> <li>Ejecuta el archivo de prueba y comprueba que el log se rellena correctamente.</li> </ul>"},{"location":"ut06/ut06ac/#ejercicio-607","title":"Ejercicio 607","text":"<p>Vamos a refactorizar el c\u00f3digo com\u00fan de inicializaci\u00f3n de Monolog que tenemos repetidos en los constructores a una factor\u00eda de Monolog, la cual colocaremos en <code>\\Dwes\\Videoclub\\Util\\LogFactory</code>. Comprueba que sigue funcionando correctamente.</p>"},{"location":"ut06/ut06ac/#ejercicio-608","title":"Ejercicio 608","text":"<p>Modifica la factor\u00eda para que devuelva <code>LogInterface</code> y comprueba que sigue funcionando. Sube los cambios a GitHub con la etiqueta <code>v0.515</code>.</p>"},{"location":"ut06/ut06ac/#phpdocumentor","title":"phpDocumentor","text":""},{"location":"ut06/ut06ac/#ejercicio-609","title":"Ejercicio 609","text":"<p>Comprueba que en el contenedor de Docker funciona phpDocumentor. Ejecuta phpdoc sobre tu proyecto Monolog y comprueba el api que se crea. Comenta tanto la clase como los m\u00e9todos, y posteriormente, vuelve a ejecutar phpdoc.</p>"},{"location":"ut06/ut06ac/#ejercicio-610","title":"Ejercicio 610","text":"<p>Documenta el proyecto Videoclub, y genera la documentaci\u00f3n. Empieza por las clases de <code>Soporte</code> y sus hijos. Comprueba el resultado. Luego sigue con <code>Cliente</code> y finalmente <code>Videoclub</code>.</p>"},{"location":"ut06/ut06ac/#web-scraping","title":"Web Scraping","text":""},{"location":"ut06/ut06ac/#ejercicio-611","title":"Ejercicio 611","text":"<p>A partir de los datos de http://www.seleccionbaloncesto.es, calcula la altura y edad media del equipo de baloncesto masculino. Observa que tienes los datos dentro de una tabla debajo de las noticias.</p>"},{"location":"ut06/ut06ac/#ejercicio-612","title":"Ejercicio 612","text":"<p>Volviendo al Videoclub, en <code>Soporte</code> a\u00f1ade una propiedad llamada <code>metacritic</code> para almacenar la URL de cada soporte. A continuaci\u00f3n, modifica los m\u00e9todos <code>incluirXXX</code> de <code>Videoclub</code> para que admitan como primer par\u00e1metro dicha URL. Tras ello, modifica el fichero <code>inicio3.php</code> para pasarle la URL de cada soporte (para ello deber\u00e1s consultarlos en Metacritic haciendo b\u00fasquedas manuales). Por ejemplo, en el caso de la pel\u00edcula Cazafantasmas, su URL es https://www.metacritic.com/movie/ghostbusters.</p>"},{"location":"ut06/ut06ac/#ejercicio-613","title":"Ejercicio 613","text":"<p>Finalmente, a\u00f1ade un m\u00e9todo abstracto en <code>Soporte</code> llamado <code>getPuntuacion</code>, que haciendo uso de Web Scraping se conecte a Metacritic y obtenga su puntuaci\u00f3n. Modifica <code>inicio3.php</code> para obtener todos los alquileres de un cliente mediante <code>getAlquileres() : array</code>, y para cada uno de ellos, adem\u00e1s del t\u00edtulo, muestra su puntuaci\u00f3n.</p>"},{"location":"ut06/ut06ac/#phpunit","title":"phpUnit","text":""},{"location":"ut06/ut06ac/#ejercicio-614","title":"Ejercicio 614","text":"<p>A partir de la clase <code>HolaMonolog</code>, modifica los m\u00e9todos para que adem\u00e1s de escribir en en log, devuelvan el saludo como una cadena.</p> <p>Crea la clase <code>HolaMonologTest</code> y a\u00f1ade diferentes casos de prueba para comprobar que los saludos y despedidas son acordes a la hora con la que se crea la clase.</p>"},{"location":"ut06/ut06ac/#ejercicio-615","title":"Ejercicio 615","text":"<p>Vamos a simular Test Driven Development. Queremos que nuestra aplicaci\u00f3n almacene los \u00faltimos tres saludos que ha realizado. Para ello:</p> <ul> <li>Crea las prueba necesarias (invoca al m\u00e9todo <code>saludar</code> varias veces y llama al m\u00e9todo que te devuelva los saludos almacenados)</li> <li>Implementa el c\u00f3digo para pasar las pruebas</li> <li>Refactoriza el c\u00f3digo</li> </ul>"},{"location":"ut06/ut06ac/#ejercicio-616","title":"Ejercicio 616","text":"<p>Crea una nueva prueba que utilice proveedores de datos para comprobar esta \u00faltima funcionalidad, pas\u00e1ndole:</p> <ul> <li>Un saludo.</li> <li>Tres saludos.</li> <li>Cuatro saludos.</li> </ul>"},{"location":"ut06/ut06ac/#ejercicio-617","title":"Ejercicio 617","text":"<p>\u00bfRecuerdas que si la hora es negativa o superior a 24 escrib\u00edamos en el log un warning? Ahora debe lanzar una excepci\u00f3n de tipo <code>InvalidArgumentException</code> (como la excepci\u00f3n forma para de PHP, hay que poner su FQN: <code>\\InvalidArgumentException</code>). Vuelve a aplicar TDD y completa tus casos de prueba.</p>"},{"location":"ut06/ut06ac/#ejercicio-618","title":"Ejercicio 618","text":"<p>Comenta la \u00faltima prueba realizada (la comprobaci\u00f3n de las excepciones) y realiza un informe de cobertura de pruebas. Analiza los resultados obtenidos. Elimina los \u00faltimos comentarios sobre la \u00faltima prueba y vuelve a generar y analizar el informe de cobertura.</p>"},{"location":"ut06/ut06ac/#proyecto-videoclub-50","title":"Proyecto Videoclub 5.0","text":"<p>El objetivo de los siguientes ejercicios es conseguir de manera incremental una cobertura de pruebas superior al 95%.</p>"},{"location":"ut06/ut06ac/#ejercicio-619","title":"Ejercicio 619","text":"<p>Crea pruebas dentro de la carpeta <code>tests</code> para las clases <code>Soporte</code>, <code>CintaVideo</code>, <code>Dvd</code> y <code>Juego</code>. Recuerda respetar el espacio de nombres. Los m\u00e9todos <code>muestraResumen</code>, tras hacer echo de los mensajes, deben devolver una cadena con el propio mensaje.</p>"},{"location":"ut06/ut06ac/#ejercicio-620","title":"Ejercicio 620","text":"<p>Crea pruebas para la clase <code>Cliente</code>, aprovechando todo el c\u00f3digo que ten\u00edamos para comprobar la funcionalidad. Utiliza proveedores de datos para a\u00f1adir conjuntos de datos mayores que los empleados. Comprueba que funciona con diferentes cupos, que al intentar alquilar un soporte marcado como ya alquilado debe lanzar una excepci\u00f3n, que no coincidan los ids de los soportes, etc...</p>"},{"location":"ut06/ut06ac/#ejercicio-621","title":"Ejercicio 621","text":"<p>Crea las pruebas para la clase <code>Videoclub</code>. Ten en cuenta los \u00faltimos m\u00e9todos a\u00f1adidos que permit\u00edan alquilar y devolver soportes, tanto de manera individual como mediante un array.</p>"},{"location":"ut06/ut06ac/#ejercicio-622","title":"Ejercicio 622","text":"<p>Crea el informe de cobertura. Una vez creado, analiza los datos de cobertura (&gt;= 90%) y comprueba el valor de CRAP, de manera que siempre sea &lt;= 5. En caso de no cumplirse, crea nuevos casos de prueba y/o refactoriza el c\u00f3digo de tu aplicaci\u00f3n.</p> <p>Sube los cambios a GitHub con la etiqueta <code>v0.554</code>.</p>"},{"location":"ut06/ut06ac/#ampliacion","title":"Ampliaci\u00f3n","text":""},{"location":"ut06/ut06ac/#ejercicio-623","title":"Ejercicio 623","text":"<p>Queremos que en <code>Videoclub</code>, cuando un cliente no existe (tanto al alquilar como al devolver) se lance una nueva excepci\u00f3n: <code>ClienteNoExisteException</code>. Adem\u00e1s, dado el n\u00famero creciente de excepciones, queremos mover las excepciones al namespace <code>Dwes\\Videoclub\\Exception</code>.</p> <p>Siguiendo TDD, primero crea las pruebas, y luego modifica el c\u00f3digo de aplicaci\u00f3n.</p> <p>Vuelve a generar el informe de cobertura y comprueba la calidad de nuestras pruebas.</p>"},{"location":"ut06/ut06ac/#ejercicio-624","title":"Ejercicio 624","text":"<p>\u00bfNadie se ha dado cuenta que en los Dvd no estamos almacenando su duraci\u00f3n? Haz todos los cambios necesarios, primero en las pruebas y luego en el c\u00f3digo.</p>"},{"location":"ut06/ut06ac/#ejercicio-625","title":"Ejercicio 625","text":"<p>Tras a\u00f1os luchando contra la tecnolog\u00eda, decidimos introducir los Blu-ray en nuestra empresa. Hemos decido que <code>Bluray</code> herede de <code>Soporte</code>. Adem\u00e1s del <code>t\u00edtulo</code> y la <code>duracion</code>, nos interesa almacenar si <code>es4k</code>. Haz todos los cambios necesarios, primero en las pruebas y luego en el c\u00f3digo.</p> <p>Sube los cambios a GitHub con la etiqueta <code>v0.563</code>.</p>"},{"location":"ut07/ut0701/","title":"UT 7. Framework","text":"<p>Duraci\u00f3 estimada: 10 sessions.</p> Resultat d'aprentatge Criteris d'avaluaci\u00f3 RA5. Desenvolupa aplicacions web identificant i aplicant mecanismes per a separar el codi de presentaci\u00f3 de la l\u00f2gica de negoci. b) S'han analitzat i utilitzat mecanismes i frameworks que permeten realitzar esta separaci\u00f3 i les seues caracter\u00edstiques principals. c) S'han utilitzat objectes i controls en el servidor per a generar l'aspecte visual de l'aplicaci\u00f3 web en el client. e) S'han identificat i aplicat els par\u00e0metres relatius a la configuraci\u00f3 de l'aplicaci\u00f3 web."},{"location":"ut07/ut0702/","title":"Ut0702","text":"<p>Un framework es una herramienta que proporciona una serie de m\u00f3dulos que ayudan a organizar y desarrollar un producto software. En el caso concreto de los frameworks PHP, la mayor\u00eda de ellos proporcionan una serie de comandos o herramientas para crear proyectos con una estructura determinada (normalmente, siguiendo el patr\u00f3n MVC), de forma que ya dan una base de trabajo hecha, y facilidades para poder crear el modelo de datos, la conexi\u00f3n a la base de datos, las rutas de las diferentes secciones de la aplicaci\u00f3n, etc.</p>"},{"location":"ut07/ut0702/#1-ejemplos-de-frameworks-php","title":"1. Ejemplos de frameworks PHP","text":"<p>Actualmente existe una gran variedad de frameworks PHP que elegir para desarrollar nuestras aplicaciones. Algunos de los m\u00e1s populares son:</p> <ul> <li>Laravel, un framework relativamente reciente (fue creado en 2011), y que ha ganado bastante popularidad en los \u00faltimos a\u00f1os. Su filosof\u00eda es el poder desarrollar proyectos de forma elegante y simple. Cuenta con una amplia comunidad de soporte detr\u00e1s, y se le augura un futuro bastante consolidado.</li> <li>Symfony, creado en 2005, cuenta con m\u00e1s camino hecho que Laravel, y una estructura m\u00e1s consolidada. En sus primeras versiones se presentaba como un framework m\u00e1s monol\u00edtico (se instalaban demasiados m\u00f3dulos que luego no necesit\u00e1bamos), pero recientemente ha adaptado su estructura para hacerla m\u00e1s modular. De hecho, podr\u00edamos considerar Symfony como un metaframework, es decir, un framework que, a su vez, sirve para desarrollar otros frameworks. Prueba de ello es que, por ejemplo, Laravel utiliza Symfony como base para ampliar esas funcionalidades.</li> <li>CodeIgniter, un framework m\u00e1s ligero que los anteriores, pero tambi\u00e9n con un amplio grupo de seguidores y desarrolladores. Fue creado en 2006 y, aunque ha sufrido una etapa de abandono, ha vuelto a coger fuerza en los \u00faltimos a\u00f1os, quiz\u00e1 debido a su simplicidad de uso.</li> <li>Yii, un framework de alto rendimiento para el desarrollo de aplicaciones web modernas. Es conocido por su eficiencia y velocidad.</li> <li>CakePHP, creado en 2005, es otro framework similar a CodeIgniter en cuanto a simplicidad y facilidad de uso, aunque con menor popularidad.</li> <li>Zend, creado en 2006, es otro framework bastante popular, aunque quiz\u00e1 con menor visibilidad que los anteriores hoy en d\u00eda, a la altura de CakePHP.</li> <li>Phalcon, otro framework de reciente creaci\u00f3n (2012), con una potente capacidad de procesamiento de p\u00e1ginas PHP, y la posibilidad de trabajar como microframework (m\u00e1s ligero, para ofrecer funcionalidades muy espec\u00edficas) o como framework completo. De hecho, muchos frameworks m\u00e1s antiguos tambi\u00e9n han incorporado recientemente la posibilidad de ejecutarlos como microframeworks.</li> <li>Otros ...</li> </ul> <p>Casi todos los frameworks PHP tienen una serie de caracter\u00edsticas comunes, como son el uso del patr\u00f3n MVC para desarrollar sus proyectos, la inyecci\u00f3n de dependencias para gestionar recursos tales como conexiones a bases de datos, o elementos compartidos por toda la aplicaci\u00f3n, la posibilidad de desarrollar tanto webs completas como servicios REST accesibles desde diversos clientes, etc.</p>"},{"location":"ut07/ut0702/#2-cual-elegir","title":"2. \u00bfCu\u00e1l elegir?","text":"<p>A la hora de decantarnos por uno u otro framework, no nos deber\u00edamos dejar enga\u00f1ar por la popularidad del mismo, en t\u00e9rminos de cuota de mercado. En ese terreno, Symfony y Laravel probablemente sean los m\u00e1s beneficiados, pero la curva de aprendizaje en ellos puede que sea m\u00e1s pronunciada que en otros a priori m\u00e1s sencillos, como CodeIgniter o CakePHP.</p> <p>Cada framework puede estar mejor orientado que otro para determinados tipos de proyectos o necesidades. Si queremos aprender algo r\u00e1pido para lanzar la aplicaci\u00f3n cuanto antes mejor, quiz\u00e1 Symfony no sea la mejor opci\u00f3n. Si, por el contrario, preferimos empaparnos de un framework con una comunidad importante detr\u00e1s que nos pueda dar soporte y nos garantice un tiempo de vida largo, entonces Symfony o Laravel pueden ser mejores candidatos.</p> <p>Llegados a este punto\u2026 \u00bfqu\u00e9 caracter\u00edsticas debemos mirar a la hora de decantarnos por uno u otro framework? Quiz\u00e1 algunas de las m\u00e1s importantes (y no necesariamente excluyentes entre s\u00ed) son:</p> <p>Popularidad</p> <p>La popularidad la podemos medir en base a diferentes webs estad\u00edsticas. Por ejemplo, si comparamos las b\u00fasquedas en Google Trends de los principales frameworks PHP, podemos determinar cu\u00e1les son los m\u00e1s buscados a nivel mundial:</p> <p>Demanda laboral</p> <p>Otro factor determinante para elegir un framework de desarrollo es la demanda laboral que tiene, las puertas que se nos pueden abrir al aprenderlo. Por ejemplo, si hacemos una b\u00fasqueda en el portal espa\u00f1ol de b\u00fasqueda de empleo InfoJobs de algunos frameworks PHP, a fecha de Junio de 2022, obtenemos estos datos aproximados:</p> framework ofertas encontradas Laravel 107 Symfony 76 CodeIgniter 15 Zend 4 CakePHP 3 <p>Facilidad de aprendizaje</p> <p>Es otro factor importante a tener en cuenta, especialmente cuando el tiempo de que disponemos para realizar el proyecto es escaso. En este sentido, frameworks como Symfony o Laravel suelen ser m\u00e1s \u201cpesados de digerir\u201d, precisamente por su envergadura y la cantidad de opciones que ofrecen, mientras que otros m\u00e1s livianos como CodeIgniter o Zend son m\u00e1s f\u00e1cilmente asimilables.</p> <p>Soporte y documentaci\u00f3n</p> <p>Es importante analizar la documentaci\u00f3n y la comunidad de desarrollo y soporte que hay detr\u00e1s de cada framework, para saber si vamos a poder resolver dudas sobre su uso con facilidad. Por ejemplo, Laravel y Symfony, que son dos de los frameworks m\u00e1s difundidos, cuentan con una gran comunidad detr\u00e1s (especialmente Laravel), y una documentaci\u00f3n muy completa y actualizada.</p> <ul> <li>Documentaci\u00f3n de Laravel</li> <li>Documentaci\u00f3n de Symfony</li> </ul> <p>Extensiones o plug-ins</p> <p>Tambi\u00e9n puede resultar un dato relevante el conocer la capacidad de ampliaci\u00f3n de un framework, qu\u00e9 otras funcionalidades adicionales se le pueden incluir en caso necesario. Muchos de los frameworks PHP pueden hacer uso de la herramienta Composer que veremos en otras secciones para instalar dependencias o m\u00f3dulos externos, y enriquecer as\u00ed la funcionalidad de la aplicaci\u00f3n.</p> <p>En el caso de algunos frameworks, ya vienen con ciertas funcionalidades o extensiones incorporadas que suponen un valor a\u00f1adido. Por ejemplo, Laravel incorpora un motor de plantillas llamado Blade para desarrollar f\u00e1cilmente vistas HTML, as\u00ed como un ORM llamado Eloquent para trabajar con bases de datos relacionales como si fueran objetos. Symfony tambi\u00e9n hace lo propio con el motor de plantillas Twig y el ORM Doctrine, respectivamente.</p> <p>En realidad, una vez se conoce uno de estos frameworks, es m\u00e1s sencillo asimilar el resto, llegado el momento. As\u00ed que cualquiera de ellos, con unos motivos que se ajusten a nuestras necesidades, puede ser un buen punto de partida.</p>"},{"location":"ut07/ut0702/#3-el-patron-mvc","title":"3. El patr\u00f3n MVC","text":"<p>Como hemos comentado anteriormente, la gran mayor\u00eda de frameworks PHP se apoyan en el patr\u00f3n MVC. MVC son las siglas de Modelo-Vista-Controlador (o en ingl\u00e9s, Model-View-Controller), y es el patr\u00f3n por excelencia ahora mismo en el mundo de las aplicaciones web, e incluso muchas aplicaciones de escritorio.</p> <p>Como su nombre indica, este patr\u00f3n se basa en dividir el dise\u00f1o de una aplicaci\u00f3n web en tres componentes fundamentales:</p> <ul> <li>El modelo, que podr\u00edamos resumir como el conjunto de todos los datos o informaci\u00f3n que maneja la aplicaci\u00f3n. T\u00edpicamente ser\u00e1n variables u objetos extra\u00eddos de una base de datos o cualquier otro sistema de almacenamiento, por lo que el c\u00f3digo del modelo normalmente estar\u00e1 formado por clases o elementos donde almacenar los datos que extraigamos o vayamos a almacenar en esa base de datos. Generalmente, el modelo no tendr\u00e1 conocimiento del resto de componentes del sistema.</li> <li>La vista, que es el intermediario entre la aplicaci\u00f3n y el usuario, es decir, lo que el usuario ve en pantalla de la aplicaci\u00f3n. Por lo tanto, la vista la compondr\u00e1n las diferentes p\u00e1ginas, formularios, etc, que la aplicaci\u00f3n mostrar\u00e1 al usuario para interactuar con \u00e9l.</li> <li>El controlador (o controladores), que son los fragmentos de c\u00f3digo encargados de coordinar el funcionamiento general de la aplicaci\u00f3n. Ante peticiones de los usuarios, las recogen, las identifican, y utilizan el modelo para actualizar o recuperar datos, y a su vez, deciden qu\u00e9 vista mostrarle al usuario a continuaci\u00f3n de la acci\u00f3n que acaba de realizar.</li> </ul> <p>Es un patr\u00f3n de dise\u00f1o muy conciso y bien estructurado, lo que le ha valido la fama que tiene hoy en d\u00eda. Entre sus muchas ventajas, permite aislar los tres elementos involucrados (vista, modelo y controlador), de forma que el trabajo es mucho m\u00e1s modular y divisible, pudiendo encargarse de las vistas, por ejemplo, un dise\u00f1ador web que no tenga mucha idea de programaci\u00f3n en el servidor, y del controlador un programador PHP que no tenga muchas nociones de HTML.</p> Esquema Modelo-Vista-Controlador (MVC)."},{"location":"ut07/ut0703/","title":"Ut0703","text":"<p>A la hora de trabajar con Laravel, necesitamos tener previamente instalados en nuestro sistema una serie de recursos software, como son:</p> <ol> <li>Un IDE (entorno de desarrollo) con el que editar el c\u00f3digo de nuestros proyectos. Emplearemos el editor de c\u00f3digo <code>Visual Studio Code</code> en estos apuntes, aunque existen otras alternativas similares, como PHPStorm, Sublime Text, Atom, etc.</li> <li>Un servidor web que soporte PHP. En nuestro caso, utilizaremos <code>Apache</code>.</li> <li>Un servidor de bases de datos en el que almacenar la informaci\u00f3n de nuestras aplicaciones. Emplearemos un servidor <code>MariaDB</code>/<code>MySQL</code>.</li> <li>PHP actualizado a una versi\u00f3n compatible con la versi\u00f3n de Laravel que vayamos a utilizar. Por ejemplo, para Laravel versi\u00f3n 9 se necesita una versi\u00f3n de <code>PHP 8.0</code> o posterior.</li> <li>El propio framework <code>Laravel</code>. Se necesitar\u00e1 tambi\u00e9n instalar la herramienta <code>Composer</code> para, despu\u00e9s, instalar Laravel. Aunque tambi\u00e9n se pueden crear proyectos Laravel desde la propia herramienta <code>Composer</code>, como veremos m\u00e1s adelante.</li> <li>Adem\u00e1s, necesitaremos el gestor de paquetes <code>npm</code> para instalar dependencias del lado del cliente en proyectos Laravel. Este gestor se instala con el framework <code>Node.js</code>.</li> <li>Otras herramientas adicionales que nos puedan venir bien, como por ejemplo alguna herramienta para probar el acceso a los servicios REST que desarrollemos.</li> </ol> <p>A continuaci\u00f3n se muestran los pasos necesarios para instalar todo el software que utilizaremos. Se dar\u00e1n las pautas de instalaci\u00f3n en un sistema Linux basado en Debian, como por ejemplo Ubuntu, Lubuntu, Linux Mint, etc. Tambi\u00e9n se facilitar\u00e1 un enlace a una m\u00e1quina virtual donde poder instalar todo el software, as\u00ed como otra m\u00e1quina virtual con el software ya preinstalado y listo para utilizarse, usando las versiones que se indican a lo largo del documento.</p> <p>Para usuarios de otros sistemas, como Windows o Mac OSX, la mayor\u00eda de opciones que veremos aqu\u00ed son igualmente v\u00e1lidas (cambiando la ruta y/o el modo de instalaci\u00f3n de algunas herramientas). En cualquier caso, se puede hacer uso de otras herramientas alternativas, como por ejemplo:</p> <ul> <li>Laragon para Windows, un sistema que integra los componentes de los puntos 2 a 6 vistos anteriormente (servidor web, de base de datos, PHP, Node, etc).</li> <li>Laravel Homestead, un ecosistema basado en m\u00e1quinas virtuales que tambi\u00e9n integra distintos componentes necesarios para desarrollar aplicaciones Laravel, aunque m\u00e1s complejo de instalar y configurar que Laragon o los pasos que seguiremos aqu\u00ed en la m\u00e1quina virtual.</li> </ul> <p>Para el software de este m\u00f3dulo</p> <p>Despu\u00e9s de explicar el software necesario, y por simplificar la instalaci\u00f3n, y que, adem\u00e1s, no es el prop\u00f3sito de este m\u00f3dulo DWES aprender a instalar todo el software en todos los sistemas posibles, el profesor seguir\u00e1 la instalaci\u00f3n de proyectos mediante Laragon. En cualquier caso, y por las mismas razones explicadas en el punto anterior, si no se quiere instalar ning\u00fan software, se proporciona la m\u00e1quina virtual indicada, para simplificar las opciones.</p>"},{"location":"ut07/ut0703/#1-visual-studio-code","title":"1) Visual Studio Code","text":"<p> Como editor de c\u00f3digo para desarrollar nuestras aplicaciones emplearemos Visual Studio Code, uno de los m\u00e1s vers\u00e1tiles que existen hoy en d\u00eda para desarrollo web. Desde la web oficial de Visual Studio Code podemos descargarlo para la plataforma deseada.</p> <p>Versi\u00f3n requerida</p> <p>Ninguna en particular, sirve con la \u00faltima versi\u00f3n disponible.</p> <p>Instalando VS Code seg\u00fan el sistema operativo</p> <p>En el caso de nuestra m\u00e1quina virtual o una distribuci\u00f3n similar, descargaremos un archivo .deb. Una vez descargado, accedemos por terminal a la carpeta donde est\u00e9 y ejecutamos este comando para instalarlo:</p> <p><pre><code>sudo dpkg -i nombre_del_archivo.deb\n</code></pre> Se crear\u00e1 autom\u00e1ticamente un acceso directo en el men\u00fa de inicio, dentro de la secci\u00f3n de Programaci\u00f3n en el caso de Lubuntu.</p> <p>Para Windows descargamos el instalador y seguimos los pasos. No hay mucho que configurar; en todo caso, podemos dejar marcada la casilla para a\u00f1adir el men\u00fa contextual \u201cAbrir con Code\u201d para poder abrir archivos y carpetas con VS Code desde el explorador de archivos directamente, con un clic derecho. Instalaci\u00f3n Visual Studio Code en Windows.</p> <p>Para Mac OSX, descargamos la aplicaci\u00f3n y la podemos ejecutar directamente. Tambi\u00e9n podemos moverla a la carpeta de Aplicaciones para tenerla localizada. Instalaci\u00f3n Visual Studio Code en Mac.</p> <p>Extensiones para VS Code</p> <p>Independientemente del sistema operativo a utilizar, ser\u00e1 recomendable instalar las siguientes extensiones (adem\u00e1s de las ya instaladas en el punto 7 de la unidad tem\u00e1tica 1) para Visual Studio Code.</p> <p>Referentes a PHP:</p> <ul> <li>Composer: para administrar dependencias en proyectos PHP. Esta extensi\u00f3n facilita la ejecuci\u00f3n de comandos de Composer directamente desde VSCode, lo que simplifica la gesti\u00f3n de paquetes y la instalaci\u00f3n de dependencias.</li> </ul> <p>Referentes a Laravel:</p> <ul> <li>Laravel Blade Snippets: extensi\u00f3n de VSC que proporciona fragmentos de c\u00f3digo para el lenguaje de plantillas Blade de Laravel. Con esta extensi\u00f3n, puedes escribir c\u00f3digo Blade m\u00e1s r\u00e1pido y eficientemente. Proporciona fragmentos de c\u00f3digo para estructuras de control, directivas Blade y mucho m\u00e1s.</li> <li>Laravel Snippets: extensi\u00f3n de VSC que proporciona fragmentos de c\u00f3digo para Laravel. Con esta extensi\u00f3n, puedes escribir c\u00f3digo Laravel m\u00e1s r\u00e1pido y eficientemente. Proporciona fragmentos de c\u00f3digo para estructuras de control, migraciones de bases de datos, Eloquent ORM y mucho m\u00e1s.</li> <li>Laravel goto view: extensi\u00f3n de VSC que agrega un comando \"ir a la vista\" a tu editor de c\u00f3digo. Con esta extensi\u00f3n, puedes ir directamente a la vista que se corresponde con el controlador que est\u00e1s editando. Esto ahorra mucho tiempo al navegar por el c\u00f3digo de tu aplicaci\u00f3n.</li> <li>Laravel Artisan: extensi\u00f3n de VSC que te permite ejecutar comandos Artisan directamente desde tu editor de c\u00f3digo. Con esta extensi\u00f3n, puedes generar c\u00f3digo autom\u00e1ticamente, migrar la base de datos y mucho m\u00e1s. Tambi\u00e9n puedes ver la salida de los comandos Artisan directamente en tu editor de c\u00f3digo.</li> <li>Laravel Extra Intellisense</li> </ul> <p>Referentes a API:</p> <ul> <li> <p>Thunder Client: para simular peticiones a servidores web, y recoger y analizar la respuesta. La emplearemos para probar los servicios REST que desarrollaremos en algunas sesiones. Se instala como una extensi\u00f3n de Visual Studio Code. Se busca desde el panel de extensiones y se instala:</p> <p>Extensi\u00f3n Thunderclient en Visual Studio Code.</p> <p>Aparecer\u00e1 un icono en el panel izquierdo desde el que gestionar las conexiones y peticiones (aprenderemos a utilizarlo m\u00e1s adelante):</p> <p>Como alternativa, tambi\u00e9n podemos utilizar la herramienta Postman, o bien v\u00eda web o instalando la aplicaci\u00f3n de escritorio desde su web oficial.</p> </li> </ul>"},{"location":"ut07/ut0703/#2-3-4-apache-php-y-mariadbmysql-con-xampp","title":"2-3-4) Apache, PHP y MariaDB/MySQL con XAMPP","text":"<p> Para poder tener un sistema con Apache, PHP y un gestor de bases de datos (como MariaDB/MySQL), y poderlo gestionar c\u00f3modamente, trabajaremos con un sistema AMPP, paquetes que integran en una sola instalaci\u00f3n todas estas cosas. El ejemplo m\u00e1s conocido de estos sistemas es XAMPP (aunque existen otros como WAMPP, para Windows). Una de las ventajas que ofrecen es que, adem\u00e1s de instalar Apache, PHP y MySQL y dejarlo todo integrado, nos proporciona un cliente web llamado phpMyAdmin para poder administrar las bases de datos desde Apache (ayudar\u00e1 para crear o importar las bases de datos de los distintos ejercicios).</p> <p>Versi\u00f3n requerida</p> <p>Depende sobre todo de la versi\u00f3n de Laravel con la que vayamos a trabajar. En el caso por ejemplo de Laravel 9, es necesario tener al menos una versi\u00f3n de PHP 8.0, y para ello debemos contar con una versi\u00f3n de XAMPP 8.x.</p>"},{"location":"ut07/ut0703/#instalando-xampp","title":"Instalando XAMPP","text":"<p>Para instalar XAMPP, basta con descargarlo de su web oficial y seguir los pasos del asistente. Ser\u00e1 suficiente con tener instalado Apache, MySQL, PHP y phpMyAdmin, as\u00ed que podemos descartar otras opciones que nos ofrezca (si nos da a elegir).</p> <p>Instalaci\u00f3n</p> <p>En el caso de Linux, debemos dar permisos de ejecuci\u00f3n y ejecutar el archivo .run que descarguemos desde alg\u00fan terminal, con permisos de administrador (<code>sudo</code>). Suponiendo que el archivo se llame xampp-linux-x64-7.4.5-installer.run, por ejemplo, los pasos son los siguientes (desde la carpeta donde lo hemos descargado): <pre><code>sudo chmod +x xampp-linux-x64-7.4.5-installer.run\nsudo ./xampp-linux-x64-7.4.5-installer.run\n</code></pre></p> <p>En el caso de Windows o Mac OSX simplemente hay que lanzar el instalador y seguir los pasos, eligiendo las opciones que nos interese instalar (al menos, Apache, MySQL y PHP), si nos dan a elegir. As\u00ed es como podemos dejarlo en el caso de Windows, por ejemplo:</p> <p>Instalaci\u00f3n XAMPP.</p>"},{"location":"ut07/ut0703/#el-manager-de-xampp","title":"El manager de XAMPP","text":"<p>XAMPP proporciona una herramienta manager o panel de control que nos permite gestionar en todo momento los servicios activos. El manager nos permitir\u00e1 lanzar o detener cada servidor.</p> <p>Para las pruebas que haremos deberemos tener iniciados tanto Apache como MySQL. </p> <p>Herramienta Manager de XAMPP</p> <p>En el caso de Linux se encuentra en /opt/lampp/manager-linux-x64.run. Podemos acceder a la carpeta desde el terminal para ejecutarlo (con permisos de superusuario). Crear acceso directo O bien crear alg\u00fan acceso directo en otra ubicaci\u00f3n que nos resulte m\u00e1s c\u00f3moda. Por ejemplo, podemos crear un acceso directo en el escritorio con el editor nano o con el propio editor Visual Studio Code que hemos instalado previamente. Suponiendo la carpeta /home/alumno/Escritorio/ o /home/alumno/Desktop/, como la que tenemos en la m\u00e1quina virtual, podemos primero crear el archivo vac\u00edo: <pre><code>touch /home/alumno/Desktop/XAMPP.desktop\n</code></pre> Editamos el contenido del archivo y a\u00f1adimos las l\u00edneas de configuraci\u00f3n para el acceso directo: <pre><code>[Desktop Entry]\nEncoding=UTF-8\nName=Manager XAMPP\nComment=Manager XAMPP\nExec=sudo /opt/lampp/manager-linux-x64.run\nIcon=/opt/lampp/htdocs/favicon.ico\nCategories=Aplicaciones;Programaci\u00f3n;Web\nVersion=8.1.6\nType=Application\nTerminal=1\n</code></pre> La versi\u00f3n del programa (atributo <code>Version</code>) depender\u00e1 de la versi\u00f3n que hayamos instalado de XAMPP en el momento concreto. El atributo <code>Terminal</code> lo ponemos a 1 para poder especificar el password de superusuario al ejecutar, de lo contrario no funcionar\u00e1. Tendr\u00e1 una apariencia como \u00e9sta aproximadamente: Gestor/Manager de XAMPP en Linux.</p> <p>En el caso de Windows, dicho manager est\u00e1 en la carpeta de instalaci\u00f3n (t\u00edpicamente C:\\xampp), en un archivo llamado xampp-control.exe, que podemos ejecutar. La apariencia es bastante funcional: Gestor/Manager de XAMPP en Windows.</p> <p>En el caso de Mac OSX, se habr\u00e1 creado un acceso en la secci\u00f3n de Aplicaciones para poder poner en marcha este manager. Acceso a XAMPP en Mac. Tendr\u00e1 una apariencia como \u00e9sta aproximadamente: Gestor/Manager de XAMPP en Mac OSX.</p> <p>Por defecto, Apache estar\u00e1 escuchando en el puerto 80 (o 443 para conexiones SSL), y MySQL en el 3306. Podemos modificar estos puertos en los respectivos archivos de configuraci\u00f3n (\u201chttpd.conf\u201d y \u201cmy.cnf\u201d), dentro de las carpetas de la instalaci\u00f3n de XAMPP (la ubicaci\u00f3n concreta de estos archivos var\u00eda entre versiones y entre sistemas operativos).</p>"},{"location":"ut07/ut0703/#5-laravel","title":"5) Laravel","text":"<p>Para trabajar con Laravel, ser\u00e1 necesario instalar el gestor de paquetes Composer mediante el que podremos tanto crear proyectos Laravel como gestionar las dependencias de otros m\u00f3dulos en un proyecto.</p> <p>Versi\u00f3n requerida</p> <p>En la \u00faltima actualizaci\u00f3n de estos apuntes, se dispone de la versi\u00f3n 2.3.x de la herramienta Composer y de la versi\u00f3n 9.x de Laravel.</p>"},{"location":"ut07/ut0703/#instalando-composer","title":"Instalando Composer","text":"<p>Como hemos comentado, la instalaci\u00f3n de Laravel se realiza a trav\u00e9s del gestor de paquetes Composer. Esta es una herramienta muy habitual en ecosistemas PHP, y su labor es similar a la que desempe\u00f1a el gestor NPM para aplicaciones JavaScript: gestionar las dependencias de un determinado proyecto, descargando, actualizando o desinstalando los paquetes necesarios. En este caso, lo utilizaremos para descargar e instalar el propio framework Laravel.</p> <p>Composer puede instalarse localmente para cada proyecto web, o de forma global para todo el sistema. Esta \u00faltima opci\u00f3n es la recomendable en el caso de querer gestionar varios proyectos en nuestro equipo, para no tener que instalarlo en todos ellos.</p> <p>Instalaci\u00f3n</p> <p>Para instalar Composer en Linux y Mac OSX, debemos descargar el archivo <code>composer.phar</code> de la web oficial y copiarlo renombrado a <code>composer</code> desde donde lo hayamos descargado a alguna carpeta que forme parte del PATH del sistema, y activarlo como ejecutable. Por ejemplo:</p> <pre><code>mv composer.phar composer\nsudo mv composer /usr/local/bin/composer\nsudo chmod +x /usr/local/bin/composer\n</code></pre> <p>Como \u00faltimo paso, y ya que Composer utiliza el ejecutable de PHP, necesitamos que dicho ejecutable est\u00e9 tambi\u00e9n en el PATH del sistema. - Para Linux deberemos hacer lo siguiente:</p> <p><pre><code>echo \"export PATH=$PATH:/opt/lampp/bin\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> - Para Mac OSX, es posible que se tenga alguna versi\u00f3n previa de PHP instalada con alguna otra herramienta. Para superponer la nueva versi\u00f3n de XAMPP a esta otra, podemos hacer este cambio en el PATH: <pre><code>echo \"export PATH=/Applications/XAMPP/xamppfiles/bin:$PATH\" &gt;&gt; ~/.bash_profile\nsource ~/.bash_profile\n</code></pre></p> <p>Adem\u00e1s, en el caso de Mac OSX quiz\u00e1 tengamos que editar el archivo de configuraci\u00f3n de PHP (<code>/Applications/XAMPP/xamppfiles/etc/php.ini</code>) y a\u00f1adir esta l\u00ednea al final, para permitir que el comando PHP gestione la memoria:</p> <pre><code>pcre.jit=0\n</code></pre> <p>Para instalar Composer en Windows debemos hacerlo a trav\u00e9s de un instalador que tambi\u00e9n podemos descargar desde la web oficial, en la secci\u00f3n Windows Installer. Seguimos los pasos del asistente, y deberemos indicar la ruta donde se encuentra el comando php, necesario para poder utilizar la herramienta. A\u00f1adimos este comando al PATH del sistema tambi\u00e9n (Add This PHP to your path?): Instalaci\u00f3n de Composer en Windows: indicar la ruta de php.exe y marcar a\u00f1adir la ruta.</p> <p>Comprobaci\u00f3n de la instalaci\u00f3n</p> <p>Una vez instalado, podemos ejecutar el comando <code>composer</code> sin m\u00e1s en un terminal, y comprobar que muestra una salida con las opciones que ofrece:</p> Orden composer para comprobar la instalaci\u00f3n."},{"location":"ut07/ut0703/#instalando-laravel","title":"Instalando Laravel","text":"<p> A trav\u00e9s de la herramienta <code>composer</code> se pueden crear directamente proyectos Laravel, como veremos en el curso. Sin embargo, la sintaxis del comando de creaci\u00f3n es algo larga, si la comparamos con el instalador de Laravel, por lo que vamos a instalarlo tambi\u00e9n. Para hacerlo, usamos la propia herramienta <code>composer</code>, con este comando:</p> <pre><code>composer global require laravel/installer\n</code></pre> <p>Instalaci\u00f3n</p> <p><pre><code>echo \"export PATH=$PATH:$HOME/.config/composer/vendor/bin\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> En algunos sistemas la carpeta que hay que incluir en el <code>PATH</code> es <code>$HOME/composer/vendor/bin</code> en lugar de la anterior. Para Linux y Mac OSX, deberemos a\u00f1adirlo al PATH del sistema (en realidad, a\u00f1adimos la carpeta con las utilidades que composer instala de forma global al sistema).</p> <p>En el caso de Windows, este comando ya deja el instalador <code>laravel</code> listo para poderse ejecutar desde terminal. </p> <p><pre><code>echo \"export PATH=$PATH:$HOME/.composer/vendor/bin\" &gt;&gt; ~/.bash_profile\nsource ~/.bash_profile\n</code></pre> Para Linux y Mac OSX, deberemos a\u00f1adirlo al <code>PATH</code> del sistema (en realidad, a\u00f1adimos la carpeta con las utilidades que composer instala de forma global al sistema).</p> <p>Con esto, se habr\u00e1 instalado un comando llamado <code>laravel</code>, que podemos utilizar a partir de ahora para crear los proyectos. Podemos probar a ejecutarlo en un terminal para que nos muestre las opciones disponibles, lo que indicar\u00e1 que est\u00e1 correctamente instalado y localizado.</p>"},{"location":"ut07/ut0703/#actualizando-laravel","title":"Actualizando Laravel","text":"<p>En general, el comando <code>laravel</code> que se instala se encargar\u00e1 de crear proyectos empleando la \u00faltima versi\u00f3n de Laravel que haya disponible. As\u00ed, si por ejemplo lo instalamos cuando a\u00fan exist\u00eda la versi\u00f3n 7 de Laravel pero se publica la versi\u00f3n 8, autom\u00e1ticamente el comando <code>laravel</code> nos permitir\u00e1 crear proyectos de la versi\u00f3n 8 desde ese punto. Sin embargo, es posible que con el tiempo se requiera actualizar el instalador para que los proyectos con nuevas versiones se sigan creando sin problemas.</p> <p>Para poder actualizar a la versi\u00f3n m\u00e1s reciente de Laravel, tenemos dos opciones, aunque es cierto que ninguna de ellas est\u00e1 recogida en la documentaci\u00f3n oficial de Laravel, y lo que aqu\u00ed se menciona se basa en recomendaciones de webs externas a Laravel.</p> <p>La primera forma de actualizar es utilizar el comando de actualizaci\u00f3n:</p> <pre><code>composer global update laravel/installer\n</code></pre> <p>Sin embargo, esta opci\u00f3n puede no ser suficiente si el cambio es demasiado brusco (por ejemplo, pasar de Laravel 5 a Laravel 7), ya que algunas dependencias que tambi\u00e9n haya instaladas har\u00edan inviable el cambio. En este caso, podemos optar por quitar la versi\u00f3n instalada por completo, e instalar la reciente:</p> <pre><code>composer global remove laravel/installer\ncomposer global require laravel/installer\n</code></pre>"},{"location":"ut07/ut0703/#6-nodejs","title":"6) Node.js","text":"<p>A pesar de que podr\u00eda parecer que Node.js es un ecosistema diferente a Laravel, lo cierto es que con la instalaci\u00f3n de Node se incorpora una herramienta muy \u00fatil en cualquier aplicaci\u00f3n web que utilice librer\u00edas JavaScript, como puedan ser Bootstrap o jQuery. Es la herramienta NPM (Node Package Manager), que permite instalar de forma sencilla estas librer\u00edas en cualquier proyecto.</p> <p>Versi\u00f3n requerida</p> <p>Es recomendable tener instalada la \u00faltima versi\u00f3n LTS (Long Term Support). En la \u00faltima versi\u00f3n de estos apuntes, dicha versi\u00f3n es la v20.17.0.</p> <p>Para instalar Node en cualquiera de los sistemas que estamos contemplando (Linux, Windows o Mac OSX) podemos optar por:</p> <ul> <li>opci\u00f3n a) Instalarlo a trav\u00e9s del instalador correspondiente.</li> <li>opci\u00f3n b) Utilizar la herramienta NVM (Node Version Manager). Esta herramienta nos va a permitir tener m\u00e1s de una versi\u00f3n de Node instalada, y poder elegir en todo momento cu\u00e1l de ellas es la que queremos tener activa. En el caso de Windows, la herramienta NVM que podemos utilizar no es la \u201coficial\u201d, pero s\u00ed existe una especie de clon alternativo funcional.</li> </ul> <p>Instalaci\u00f3n</p> <p>En el caso de distribuciones Linux, como es el caso de la m\u00e1quina virtual proporcionada, podemos optar por ejecutar un instalador o por usar NVM. En la versi\u00f3n completa de la m\u00e1quina virtual proporcionada se ha optado por esta \u00faltima opci\u00f3n (NVM), pero damos aqu\u00ed los pasos a seguir para ambas opciones. opci\u00f3n a) de instalador Si optamos por instalar Node.js a trav\u00e9s de un instalador, los pasos a seguir son:</p> <ol> <li>En primer lugar, si no tenemos instalada la herramienta <code>curl</code>, la instalamos con: <pre><code>sudo apt-get install curl\n</code></pre></li> <li>Despu\u00e9s, utilizamos <code>curl</code> para recuperar la versi\u00f3n de Node que queramos (versi\u00f3n LTS actual, 14.x): <pre><code>curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -\n</code></pre></li> <li>Finalmente, instalamos Node.js <pre><code>sudo apt-get install -y nodejs\n</code></pre></li> </ol> <p>Si quisi\u00e9ramos actualizar la versi\u00f3n de Node.js en un futuro, bastar\u00eda con repetir los dos \u00faltimos comandos, poniendo en el paso 2 la versi\u00f3n a obtener en este caso. opci\u00f3n b) NVM Podemos consultar informaci\u00f3n de esta herramienta en su web oficial en GitHub. Para instalarla, debemos descargarla con el comando <code>curl</code> o <code>wget</code>, seg\u00fan se explica en la propia web de GitHub. Si optamos por <code>wget</code>, el comando es como sigue (en una sola l\u00ednea): <pre><code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n</code></pre> En el caso de no disponer del comando <code>wget</code> instalado, podemos o bien instalarlo, o bien emplear este otro comando equivalente, con la orden <code>curl</code> (tambi\u00e9n en una sola l\u00ednea): <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n</code></pre></p> <p>N\u00famero versi\u00f3n</p> <p>El n\u00famero de versi\u00f3n <code>v0.39.1</code> puede variar. Es preferible consultar la web de GitHub para obtener el comando actualizado.</p> <p> </p> <p>Despu\u00e9s de ejecutar el comando anterior, ser\u00e1 necesario cerrar el terminal y volverlo a abrir para poder utilizar el comando <code>nvm</code>. Si sigue sin reconocer el comando, quiz\u00e1 debamos actualizar con <code>source ~/.bashrc</code></p> <p>opci\u00f3n a) de instalador El instalador de Node.js para Windows es igualmente muy sencillo. Lo descargamos de la web oficial de Node y lo lanzamos. Si queremos actualizar versi\u00f3n en un futuro, basta con volver a descargar esa \u00faltima versi\u00f3n y lanzar el instalador correspondiente para actualizarla. opci\u00f3n b) NVM Como coment\u00e1bamos, la herramienta NVM oficial s\u00f3lo est\u00e1 disponible para sistemas Unix, por lo que funciona en Linux y Mac OSX, pero no en Windows. Como alternativa, existe alguna implementaci\u00f3n paralela de nvm que podemos hacer servir, como esta. Podemos descargar un instalador (nvm-setup.zip) y ejecutarlo para instalar este gestor. Despu\u00e9s, desde l\u00ednea de comandos tendremos disponibles una serie de comandos para gestionar las versiones de Node, como veremos a continuaci\u00f3n.</p> <p>Para distribuciones Mac OSX, tenemos igualmente la opci\u00f3n de usar un instalador o la herramienta NVM. opci\u00f3n a) instalador El instalador de Node.js para Mac OSX es muy sencillo. Lo descargamos de la web oficial de Node y lo lanzamos. Si queremos actualizar versi\u00f3n en un futuro, basta con volver a descargar esa \u00faltima versi\u00f3n y lanzar el instalador correspondiente para actualizarla. opci\u00f3n b) NVM Para utilizar NVM en Mac OSX seguimos los mismos pasos que para Linux, comentados anteriormente, pero en este caso para actualizar el terminal ejecutaremos <code>source ~/.bash_profile</code>.</p> <p>Comandos para Node con instalaci\u00f3n NVM (opci\u00f3n b)</p> <p>Si hemos optado por instalar Node a trav\u00e9s de <code>nvm</code> (opci\u00f3n b), tendremos disponibles una serie de comandos en el terminal para instalar y gestionar las versiones de Node. Aqu\u00ed resumimos los m\u00e1s importantes.</p> <p>En el caso de estos sistemas, habremos instalado la versi\u00f3n oficial de NVM, y los comandos que podemos utilizar son estos: - <code>nvm install node</code>: instala la \u00faltima versi\u00f3n disponible de Node - <code>nvm install --lts</code>: instala la \u00faltima versi\u00f3n LTS disponible - <code>nvm install 12.16.0</code>: instala la versi\u00f3n especificada de Node - <code>nvm uninstall 12.16.0</code>: desinstala la versi\u00f3n especificada de Node - <code>nvm ls-remote</code>: muestra todas las versiones disponibles para instalar - <code>nvm list</code>: muestra todas las versiones instaladas localmente - <code>nvm current</code>: muestra la versi\u00f3n actualmente activa - <code>nvm use 12.16.0</code>: marca la versi\u00f3n indicada como actualmente activa - <code>nvm use --lts</code>: marca como activa la \u00faltima versi\u00f3n LTS instalada En nuestro caso, vamos a instalar la \u00faltima versi\u00f3n LTS disponible, ya que \u00e9stas son las versiones que tienen soporte a largo plazo. Por lo tanto, ejecutaremos los comandos: <pre><code>nvm install --lts\nnvm use --lts\n</code></pre> Comando <code>nvm</code> El comando <code>nvm use</code> normalmente no es necesario, ya que la instalaci\u00f3n autom\u00e1ticamente deja como activa la versi\u00f3n que elegimos. Pero si el terminal no termina de reconocer el comando <code>node</code> puede ser necesario ejecutarla.</p> <p>En el caso de Windows con la versi\u00f3n alternativa de NVM, los comandos son ligeramente diferentes: - <code>nvm install 12.16.0</code>: instala la versi\u00f3n especificada de Node - <code>nvm uninstall 12.16.0</code>: desinstala la versi\u00f3n especificada de Node - <code>nvm list</code>: muestra todas las versiones instaladas localmente - <code>nvm list available</code>: muestra todas las versiones disponibles para instalar con esta adaptaci\u00f3n de NVM. - <code>nvm use 12.16.0</code>: marca como activa la versi\u00f3n de Node especificada (previamente instalada). Para instalar la versi\u00f3n LTS disponible, tendremos que ver su n\u00famero en la web oficial de Node, y luego ejecutar el comando correspondiente. Por ejemplo: <pre><code>nvm install 16.16.0\nnvm use 16.16.0\n</code></pre></p>"},{"location":"ut07/ut0703/#prueba-de-node","title":"Prueba de Node","text":"<p>Podemos ejecutar ahora <code>node -v</code> en el terminal y comprobar que nos muestra el n\u00famero de versi\u00f3n adecuado. Tambi\u00e9n podemos ejecutar el comando <code>npm - v</code> para comprobar la versi\u00f3n que se ha instalado del gestor NPM (que no tiene por qu\u00e9 coincidir con la de Node).</p>"},{"location":"ut07/ut0703/#7-recursos-adicionales","title":"7) Recursos adicionales","text":"<p>Para facilitar la labor de instalar y/o trabajar con el software propuesto, se proporcionan dos m\u00e1quinas virtuales basadas en sistemas Lubuntu (versi\u00f3n 20). En ambos casos, se cuenta con un usuario alumno con password alumno.</p> <ul> <li>M\u00e1quina virtual base</li> <li>M\u00e1quina virtual con software instalado</li> </ul> <p>Es necesario utilizar el programa VirtualBox para ejecutar estas m\u00e1quinas virtuales. Tambi\u00e9n se puede cambiar la configuraci\u00f3n por defecto de dichas m\u00e1quinas virtuales, para darles m\u00e1s memoria RAM o n\u00facleos de procesador, si se cree conveniente.</p> Instalaci\u00f3n Laravel con Docker <p>... en construcci\u00f3n ...</p> Ejercicios a realizar <ul> <li><code>Ejercicio 1</code></li> <li><code>Ejercicio 2</code></li> </ul>"},{"location":"ut07/ut0704/","title":"Ut0704","text":"<p>Ahora que ya tenemos todo el sistema preparado para desarrollar proyectos Laravel, veamos los primeros pasos que debemos dar para crear estos proyectos.</p> <p>Documentaci\u00f3n oficial</p> <p>En este enlace podremos encontrar la documentaci\u00f3n oficial de Laravel (en este caso, la versi\u00f3n 11.x). No dudes en consultarlo cuando tengas dudas!</p>"},{"location":"ut07/ut0704/#1-crear-proyectos-laravel","title":"1. Crear proyectos Laravel","text":"<p>Para crear proyectos Laravel, tenemos dos alternativas:</p> <p> opci\u00f3n a) Emplear el comando <code>laravel</code> que hemos instalado en sesiones anteriores mediante composer.</p> <p> opci\u00f3n b) Utilizar el propio comando <code>composer</code> para crear el proyecto. Esta opci\u00f3n ser\u00e1 la recomendada si queremos crear proyectos con versiones de Laravel que no sean la \u00faltima, o si por alg\u00fan motivo no funciona la opci\u00f3n anterior.</p>"},{"location":"ut07/ut0704/#opcion-a-usando-el-comando-laravel","title":"opci\u00f3n a) Usando el comando <code>laravel</code>","text":"<p>Si empleamos el comando <code>laravel</code> para crear proyectos (asumiendo que ya lo tendremos instalado de la sesi\u00f3n de 7.3 Software necesario punto 5 Laravel), nos deberemos ubicar en la carpeta donde queramos crear el proyecto y escribir este comando:</p> <pre><code>laravel new nombre_proyecto\n</code></pre> <p>Error: No se encuentra la ruta de Laravel</p> <p>Si al lanzar la orden produce el siguiente error: No se encuentra la ruta de Laravel se deber\u00e1 poner la ruta: <pre><code>C:\\Users\\tu_usuario\\AppData\\Roaming\\Composer\\vendor\\bin\n</code></pre> en la variable <code>PATH</code> de variables de entorno.</p> Proyecto biblioteca (1): creaci\u00f3n del proyecto <p>Por ejemplo, para las pruebas que iremos construyendo poco a poco en las siguientes sesiones, vamos a crear una web de libros, por lo que, en la carpeta donde queramos tener este proyecto, comenzamos escribiendo este comando:</p> <pre><code>laravel new biblioteca\n</code></pre> <p>Esto crear\u00e1 un proyecto <code>biblioteca</code> en una subcarpeta con el mismo nombre.</p> Posibles instalaciones de Laravel <p>Cuando lanzamos la orden: <pre><code>laravel new tu_proyecto\n</code></pre> Laravel nos ofrece tres tipos de instalaci\u00f3n: Opciones de instalaci\u00f3n de Laravel.</p>"},{"location":"ut07/ut0704/#a-laravel-none","title":"a. Laravel none","text":"<p>Instalaci\u00f3n sin paquetes adicionales. </p>"},{"location":"ut07/ut0704/#b-laravel-breeze","title":"b. Laravel Breeze","text":"<p>Laravel Breeze es un paquete oficial de autenticaci\u00f3n para Laravel que proporciona una implementaci\u00f3n sencilla y ligera del sistema de autenticaci\u00f3n b\u00e1sico. Est\u00e1 dise\u00f1ado para ser f\u00e1cil de configurar y personalizar, y es una excelente opci\u00f3n para desarrolladores que buscan una soluci\u00f3n r\u00e1pida y sin complicaciones para gestionar la autenticaci\u00f3n en sus aplicaciones.</p>"},{"location":"ut07/ut0704/#b1-caracteristicas-principales-de-laravel-breeze","title":"b.1. Caracter\u00edsticas principales de Laravel Breeze:","text":"<p>1. Autenticaci\u00f3n b\u00e1sica: Breeze incluye todas las funcionalidades b\u00e1sicas de autenticaci\u00f3n que normalmente necesitar\u00edas en una aplicaci\u00f3n, como:  \u00a0\u00a0\u00a0\u00a0- Registro de usuarios \u00a0\u00a0\u00a0\u00a0- Inicio de sesi\u00f3n \u00a0\u00a0\u00a0\u00a0- Restablecimiento de contrase\u00f1a \u00a0\u00a0\u00a0\u00a0- Confirmaci\u00f3n de correo electr\u00f3nico (opcional) \u00a0\u00a0\u00a0\u00a0- Verificaci\u00f3n de contrase\u00f1a 2. Frontend ligero: Laravel Breeze proporciona interfaces de usuario simples y listas para usar con componentes de Blade (el motor de plantillas de Laravel) o Tailwind CSS para el dise\u00f1o. Breeze tambi\u00e9n tiene soporte opcional para Inertia.js o React/Vue, que son frameworks front-end modernos. 3. Simplicidad y personalizaci\u00f3n: A diferencia de otras soluciones m\u00e1s completas como Laravel Jetstream, Breeze est\u00e1 dise\u00f1ado para ser minimalista, lo que lo hace m\u00e1s f\u00e1cil de entender y modificar para proyectos peque\u00f1os o medianos. Si solo necesitas la funcionalidad b\u00e1sica y prefieres hacer tus propias personalizaciones, Breeze es ideal. 4. Integraci\u00f3n con Tailwind CSS: Breeze viene integrado con Tailwind CSS, un framework de dise\u00f1o muy popular y liviano. Tailwind hace que sea f\u00e1cil personalizar el dise\u00f1o de la aplicaci\u00f3n a tu gusto. 5. Opciones para front-end: \u00a0\u00a0\u00a0\u00a0- Blade + Tailwind CSS (por defecto): Usa Blade como motor de plantillas y Tailwind para el dise\u00f1o. \u00a0\u00a0\u00a0\u00a0- Inertia.js (opcional): Permite crear una SPA (Single Page Application) sin tener que recargar la p\u00e1gina completa. \u00a0\u00a0\u00a0\u00a0- React/Vue (opcional): Para los desarrolladores que prefieren usar estos frameworks de JavaScript.</p>"},{"location":"ut07/ut0704/#b2-cuando-usar-laravel-breeze","title":"b.2. \u00bfCu\u00e1ndo usar Laravel Breeze?","text":"<p>Laravel Breeze es una excelente opci\u00f3n cuando: \u00a0\u00a0\u00a0\u00a0- Est\u00e1s construyendo una aplicaci\u00f3n peque\u00f1a o mediana. \u00a0\u00a0\u00a0\u00a0- Necesitas una soluci\u00f3n simple de autenticaci\u00f3n sin complejidades adicionales. \u00a0\u00a0\u00a0\u00a0- Quieres un proyecto r\u00e1pido y f\u00e1cil de personalizar, sin un exceso de funcionalidades predeterminadas. \u00a0\u00a0\u00a0\u00a0- Est\u00e1s empezando con Laravel y deseas aprender las bases del sistema de autenticaci\u00f3n.</p>"},{"location":"ut07/ut0704/#c-laravel-jetstream","title":"c. Laravel Jetstream","text":"<p>Laravel Jetstream es un paquete oficial de Laravel que proporciona una estructura avanzada para la autenticaci\u00f3n y la administraci\u00f3n de caracter\u00edsticas relacionadas con usuarios en aplicaciones modernas. Jetstream no solo ofrece la autenticaci\u00f3n b\u00e1sica, sino que tambi\u00e9n incluye funcionalidades m\u00e1s avanzadas como la gesti\u00f3n de equipos, autenticaci\u00f3n de dos factores, integraci\u00f3n con API y m\u00e1s. Est\u00e1 dise\u00f1ado para aplicaciones que requieren una experiencia de usuario robusta y caracter\u00edsticas avanzadas de autenticaci\u00f3n.</p>"},{"location":"ut07/ut0704/#c1-caracteristicas-principales-de-laravel-jetstream","title":"c.1. Caracter\u00edsticas principales de Laravel Jetstream:","text":"<p>1. Autenticaci\u00f3n de usuarios: Al igual que Laravel Breeze, Jetstream incluye todas las funcionalidades b\u00e1sicas de autenticaci\u00f3n, como: \u00a0\u00a0\u00a0\u00a0- Registro de usuarios \u00a0\u00a0\u00a0\u00a0- Inicio de sesi\u00f3n \u00a0\u00a0\u00a0\u00a0- Restablecimiento de contrase\u00f1as \u00a0\u00a0\u00a0\u00a0- Confirmaci\u00f3n de correo electr\u00f3nico \u00a0\u00a0\u00a0\u00a0- Verificaci\u00f3n de contrase\u00f1as 2. Gesti\u00f3n de equipos: Una de las caracter\u00edsticas clave de Jetstream es la capacidad de manejar equipos o multitenancy (m\u00faltiples usuarios trabajando juntos en un equipo). Esta caracter\u00edstica es \u00fatil para aplicaciones colaborativas donde los usuarios necesitan gestionar sus propios espacios de trabajo o equipos. Incluye: \u00a0\u00a0\u00a0\u00a0- Creaci\u00f3n de equipos \u00a0\u00a0\u00a0\u00a0- Invitar a usuarios a equipos \u00a0\u00a0\u00a0\u00a0- Gesti\u00f3n de roles y permisos en equipos 3. Autenticaci\u00f3n de dos factores (2FA): Jetstream incluye soporte para autenticaci\u00f3n de dos factores (2FA), lo que mejora la seguridad del sistema de autenticaci\u00f3n al permitir que los usuarios protejan sus cuentas mediante aplicaciones de autenticaci\u00f3n como Google Authenticator o Authy. 4. Sesiones de usuario: Permite a los usuarios ver y gestionar sus sesiones activas en diferentes dispositivos. Esto es \u00fatil si deseas implementar funciones de administraci\u00f3n de seguridad avanzada, como cerrar sesi\u00f3n en dispositivos remotos. 5. API con Laravel Sanctum: Jetstream integra Laravel Sanctum, que permite a los usuarios autenticarse y gestionar tokens de API para la autenticaci\u00f3n en aplicaciones de una sola p\u00e1gina (SPA) o m\u00f3viles. Esto es \u00fatil si est\u00e1s construyendo una API que necesita tokens para gestionar sesiones y autenticaciones. 6. Opciones de interfaz con Livewire o Inertia.js: \u00a0\u00a0\u00a0\u00a0- Livewire: Jetstream puede usarse con Livewire, lo que permite crear componentes din\u00e1micos e interactivos utilizando Blade sin escribir una sola l\u00ednea de JavaScript. \u00a0\u00a0\u00a0\u00a0- Inertia.js: Tambi\u00e9n puedes optar por usar Inertia.js para crear una SPA (Single Page Application) sin la necesidad de crear una API separada. Inertia te permite trabajar con frameworks JavaScript como Vue o React mientras sigues usando las rutas y controladores de Laravel. 7. Opciones de autenticaci\u00f3n avanzadas: Jetstream soporta otras caracter\u00edsticas avanzadas de autenticaci\u00f3n, como la autenticaci\u00f3n social (usando Laravel Socialite, por ejemplo) y la verificaci\u00f3n de correos electr\u00f3nicos autom\u00e1ticas.</p>"},{"location":"ut07/ut0704/#c2-cuando-usar-laravel-jetstream","title":"c.2. \u00bfCu\u00e1ndo usar Laravel Jetstream?","text":"<p>Jetstream es ideal cuando est\u00e1s construyendo una aplicaci\u00f3n moderna que requiere m\u00e1s que solo autenticaci\u00f3n b\u00e1sica, y quieres caracter\u00edsticas como la gesti\u00f3n de equipos, autenticaci\u00f3n de dos factores, o integraci\u00f3n con API. Usar Jetstream tiene sentido si: \u00a0\u00a0\u00a0\u00a0- Est\u00e1s construyendo una aplicaci\u00f3n que necesita caracter\u00edsticas avanzadas de autenticaci\u00f3n y seguridad. \u00a0\u00a0\u00a0\u00a0- Quieres una interfaz de usuario din\u00e1mica e interactiva con frameworks como Livewire o Inertia.js. \u00a0\u00a0\u00a0\u00a0- Est\u00e1s construyendo una aplicaci\u00f3n donde m\u00faltiples usuarios trabajar\u00e1n juntos en equipos. \u00a0\u00a0\u00a0\u00a0- Tu aplicaci\u00f3n necesita tokens de API para autenticaci\u00f3n en aplicaciones m\u00f3viles o SPAs.</p>"},{"location":"ut07/ut0704/#opcion-b-usando-el-comando-composer","title":"opci\u00f3n b) Usando el comando <code>composer</code>","text":"<p>Alternativamente, tambi\u00e9n se puede emplear la herramienta <code>composer</code> para crear el proyecto, usando la siguiente sintaxis (tambi\u00e9n desde la carpeta donde queramos ubicar el proyecto):</p> <pre><code>composer create-project --prefer-dist laravel/laravel nombre_proyecto\n</code></pre> Proyecto biblioteca (1, opci\u00f3n b): creaci\u00f3n proyecto usando comando composer <p>En nuestro caso, para el ejemplo de la biblioteca que vamos a ir desarrollando, escribiremos este comando: <pre><code>composer create-project --prefer-dist laravel/laravel biblioteca\n</code></pre> Del mismo modo que en el caso anterior, se crear\u00e1 una carpeta <code>biblioteca</code> con el contenido inicial del proyecto dentro, empleando la \u00faltima versi\u00f3n de Laravel disponible.</p>"},{"location":"ut07/ut0704/#crear-proyectos-laravel-usando-versiones-anteriores","title":"Crear proyectos Laravel usando versiones anteriores","text":"<p>Al crear un proyecto con el comando <code>laravel new</code>, se crear\u00e1 con la \u00faltima versi\u00f3n disponible de Laravel. En el caso de que necesitemos crear un proyecto Laravel que no utilice la \u00faltima versi\u00f3n, sino alguna anterior, necesitamos utilizar la herramienta <code>composer</code> para especificar el n\u00famero de versi\u00f3n de Laravel que queremos utilizar. Por ejemplo, este comando crea un proyecto llamado \u201cprueba\u201d utilizando Laravel 7:</p> <pre><code>composer create-project --prefer-dist laravel/laravel prueba 7.x\n</code></pre>"},{"location":"ut07/ut0704/#13-el-comando-artisan","title":"1.3. El comando artisan","text":"<p>Cuando se crea un proyecto Laravel, se instala una herramienta llamada <code>artisan</code> en la ra\u00edz del proyecto. Es una interfaz de l\u00ednea de comandos (CLI, Command Line Interface), que proporciona una serie de opciones adicionales que nos vendr\u00e1n bien en nuestra gesti\u00f3n de proyectos Laravel para, por ejemplo, crear controladores, migrar datos a una base de datos, etc.</p> <p>Para comprobar que est\u00e1 instalada y las opciones que ofrece, podemos escribir el siguiente comando en un terminal desde la carpeta del proyecto que hayamos creado:</p> <pre><code>php artisan list\n</code></pre> <p>Este otro comando muestra la versi\u00f3n de Laravel del proyecto en el que estamos:</p> <pre><code>php artisan --version\n</code></pre> <p>Para escribir estos comandos, podemos abrir la carpeta del proyecto con Visual Studio Code, y abrir el terminal integrado en este IDE (men\u00fa Ver &gt; Terminal). Esto nos ubicar\u00e1 autom\u00e1ticamente en la carpeta del proyecto, y podemos directamente ejecutar estos comandos desde ah\u00ed.</p>"},{"location":"ut07/ut0704/#14-laravel-y-visual-studio-code","title":"1.4. Laravel y Visual Studio Code","text":"<p>Como hemos comentado, podemos gestionar muy c\u00f3modamente los proyectos Laravel desde el IDE Visual Studio Code. Basta con abrir la carpeta principal del proyecto desde el propio IDE, y eso puede hacerse desde el men\u00fa Archivo &gt; Abrir Carpeta, o bien arrastrando la carpeta a la zona principal del IDE, e incluso, dependiendo de c\u00f3mo hayamos hecho la instalaci\u00f3n, tambi\u00e9n podemos hacer clic derecho sobre la carpeta del proyecto en el explorador de archivos, y elegir Abrir con Code en el men\u00fa contextual.</p> <p>Una vez abierto, tendremos la estructura del proyecto en la parte izquierda (pesta\u00f1a de explorador de archivos), y podremos ir editando los archivos en la parte derecha.</p> Fichero .env de un proyecto laravel. <p>Para facilitar a\u00fan m\u00e1s la gesti\u00f3n de proyectos Laravel, podemos instalar alguna extensi\u00f3n adicional a Visual Studio Code. Una de las m\u00e1s populares es Laravel Extension Pack, que a su vez contiene una serie de extensiones para resaltar sintaxis, editar vistas, etc:</p> Extensi\u00f3n Laravel Extension Pack para Visual Studio Code."},{"location":"ut07/ut0704/#2-estructura-de-un-proyecto-laravel","title":"2. Estructura de un proyecto Laravel","text":"<p>Los proyectos Laravel se pueden gestionar abriendo la carpeta directamente desde nuestro IDE (Visual Studio Code). Cuando creamos un proyecto Laravel, se crea una estructura de carpetas y archivos predefinida. Explicamos ahora brevemente en qu\u00e9 consisten las principales carpetas y archivos que se generan, de acuerdo a la versi\u00f3n actualizada de estos apuntes.</p> <ul> <li><code>app</code>: contiene el c\u00f3digo fuente de la aplicaci\u00f3n. Gran parte de las clases que definamos estar\u00e1n en esta carpeta. Inicialmente, se incluyen algunas subcarpetas dentro: \u00a0\u00a0\u00a0\u00a0- <code>Console</code>: para definir nuestros propios comandos \u00a0\u00a0\u00a0\u00a0- <code>Exceptions</code>: para definir nuestras propias excepciones \u00a0\u00a0\u00a0\u00a0- <code>Http</code>: contiene los controladores y el middleware \u00a0\u00a0\u00a0\u00a0- <code>Models</code>: almacena los modelos de datos de la aplicaci\u00f3n (clases que se utilizar\u00e1n para gestionar los objetos que intervienen en el sistema). \u00a0\u00a0\u00a0\u00a0- <code>Providers</code>: contiene los proveedores de servicios de la aplicaci\u00f3n, m\u00e1s los que podamos definir nosotros. \u00a0\u00a0\u00a0\u00a0- Adem\u00e1s, podemos definir aqu\u00ed otras carpetas que podamos necesitar. Por ejemplo, en versiones anteriores de Laravel se creaba aqu\u00ed a mano la carpeta Models para gestionar los modelos de datos.</li> <li><code>bootstrap</code>: contiene el archivo <code>app.php</code>, que es el que pone en marcha la aplicaci\u00f3n. Adem\u00e1s, contiene la carpeta <code>cache</code>, donde se almacenan los archivos ya cargados por Laravel para acelerar su acceso en futuras peticiones.</li> <li><code>config</code>: contiene los archivos de configuraci\u00f3n de la aplicaci\u00f3n, donde se tienen variables de entorno, o si nuestra aplicaci\u00f3n est\u00e1 en desarrollo o producci\u00f3n, o los par\u00e1metros de conexi\u00f3n a la base de datos, entre otras cosas.</li> <li><code>database</code>: almacena los elementos de gesti\u00f3n de la base de datos, tales como generadores de objetos, migraciones, etc.</li> <li><code>public</code>: contenido visible de la web. Contiene el archivo <code>index.php</code>, punto de entrada de todas las peticiones a la web, y adem\u00e1s podemos definir o generar carpetas donde ubicar el contenido est\u00e1tico del cliente (im\u00e1genes, hojas de estilo CSS, archivos JavaScript\u2026).</li> <li><code>resources</code>: contiene, por un lado, las vistas de nuestra aplicaci\u00f3n. Por otro lado, tambi\u00e9n contiene archivos no compilados de CSS (archivos sass) y JavaScript (archivos sin minimizar u optimizar). Adem\u00e1s, tambi\u00e9n almacena los archivos de traducci\u00f3n, en el caso de que queramos hacer sitios multi idioma.</li> <li><code>routes</code>: almacena las rutas de la aplicaci\u00f3n, tanto para acceder a contenido web normal (<code>web.php</code>), como para servicios web (<code>api.php</code>), como para comandos y otras opciones.</li> <li><code>storage</code>: contiene las vistas compiladas, y otros archivos generados por Laravel, como los logs o las sesiones.</li> <li><code>test</code>: para almacenar los tests o pruebas sobre los componentes de nuestra aplicaci\u00f3n</li> <li><code>vendor</code>: donde se almacenan las dependencias o librer\u00edas adicionales que se requieren en nuestro proyecto Laravel. Esta carpeta deber\u00eda ser ignorada por Git, y regenerada cada vez que se clone el repositorio remoto, para evitar almacenar demasiada informaci\u00f3n innecesaria.</li> </ul> <p> </p> <p>Aunque algunos de los conceptos vistos aqu\u00ed pueden no estar claros a\u00fan (como el concepto de middleware, o los proveedores de servicios), los iremos viendo poco a poco durante el curso.</p>"},{"location":"ut07/ut0704/#21-configuracion-general-del-proyecto","title":"2.1. Configuraci\u00f3n general del proyecto","text":"<p>De entre la estructura de carpetas de un proyecto Laravel vista anteriormente, echaremos ahora un r\u00e1pido vistazo a d\u00f3nde se encuentra la configuraci\u00f3n general del proyecto.</p> <p>Por un lado, disponemos de un archivo <code>.env</code> en la ra\u00edz del proyecto, que b\u00e1sicamente contiene una serie de variables de entorno generales. Por ejemplo, se tiene la variable <code>APP_NAME</code> con el nombre que queremos que tenga la aplicaci\u00f3n, o un conjunto de variables que utilizaremos m\u00e1s adelante para conectar con la base de datos, entre otras cosas:</p> <pre><code>APP_NAME=Laravel\n...\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel\nDB_USERNAME=root\nDB_PASSWORD=\n...\n</code></pre> <p>En general, los cambios de configuraci\u00f3n es preferible hacerlos en este archivo <code>.env</code>, de forma que en los archivos de la carpeta <code>config</code> accederemos a estas variables de entorno definidas en <code>env</code>. </p> Proyecto biblioteca (2): propiedades del archivo <code>.env</code> <pre><code>APP_NAME=Biblioteca\n...\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=biblioteca\nDB_USERNAME=dwes\nDB_PASSWORD=dwes\n...\n</code></pre> <p>\u200b    Aseg\u00farate de que el usuario <code>dwes</code> est\u00e9 creado en el gestor de base de datos (MySql) con permisos para esta base de datos (biblioteca).</p> <p>Ignorar el fichero <code>env</code> en Git</p> <p>Adem\u00e1s, el archivo <code>.env</code> est\u00e1 configurado (o debe configurarse, de lo contrario) para ser ignorado por Git, de modo que no se suba a repositorios, y se evite un acceso a datos confidenciales que pongan en riesgo el acceso al sistema.</p> <p>Por otra parte, la carpeta <code>config</code> contiene unos archivos generales de configuraci\u00f3n. Iremos viendo algunos de ellos en sesiones posteriores, pero, para empezar, podemos echar un vistazo al archivo <code>config/app.php</code>, que contiene par\u00e1metros de configuraci\u00f3n general de la aplicaci\u00f3n. Por ejemplo, podemos modificar el nombre de la aplicaci\u00f3n, en la propiedad <code>name</code>, aunque, como vemos, el nombre lo coge de la propiedad <code>APP_NAME</code> del archivo <code>.env</code>.</p> <pre><code>'name' =&gt; env('APP_NAME', 'Laravel'),\n</code></pre> <p>Es m\u00e1s habitual modificar los valores del archivo <code>.env</code> que los que hay en este archivo de configuraci\u00f3n. Pero, en algunos casos, s\u00ed convendr\u00e1 acudir a alguno de los archivos de esta carpeta y modificar la informaci\u00f3n que contiene.</p>"},{"location":"ut07/ut0704/#3-arquitectura-de-un-proyecto-laravel","title":"3. Arquitectura de un proyecto Laravel","text":"<p>Una vez vista la estructura de carpetas y archivos que se genera cuando creamos un proyecto Laravel, es importante tambi\u00e9n tener unas nociones b\u00e1sicas de c\u00f3mo se interconectan los elementos internamente, y qu\u00e9 hace que un proyecto Laravel se pueda poner en marcha.</p>"},{"location":"ut07/ut0704/#31-los-proveedores-de-servicios-service-providers","title":"3.1. Los proveedores de servicios (service providers)","text":"<p>Los proveedores de servicios son los principales responsables del arranque o puesta en marcha de todo proyecto Laravel, lo que se conoce como bootstrapping. Se encargan de registrar los componentes del proyecto, dependencias externas, clases y m\u00e9todos definidos por nosotros, para hacerlos accesibles al resto de la aplicaci\u00f3n.</p> <p>Si abrimos el archivo <code>config/app.php</code> de nuestro proyecto Laravel, veremos entre otras cosas una secci\u00f3n denominada <code>providers</code>, donde se define un array con todos los proveedores de servicios que se ponen en marcha al arrancar la aplicaci\u00f3n. Por ejemplo, hay proveedores de servicios para acceso a la base de datos (DatabaseServiceProvider), autenticaci\u00f3n de usuarios (AuthServiceProvider), etc.</p>"},{"location":"ut07/ut0704/#32-las-clases-del-nucleo-de-laravel","title":"3.2. Las clases del n\u00facleo de Laravel","text":"<p>Para poder desarrollar los componentes de las aplicaciones Laravel, es necesario contar con una infraestructura previa de clases que nos faciliten esta tarea. As\u00ed, a lo largo de las siguientes sesiones haremos uso de algunas clases proporcionadas por Laravel que vienen preinstaladas con el framework, tales como <code>Model</code>, <code>Route</code>, etc, y que nos permiten o bien heredar de ellas para crear otras subclases (como es el caso de los modelos de datos) o bien utilizar algunos m\u00e9todos de utilidad que estas clases proporcionan (como es el caso de la clase <code>Route</code>, por ejemplo).</p> <p>Conviene tener presente que todas estas clases pertenecientes al n\u00facleo de Laravel parten de un espacio de nombres com\u00fan llamado <code>Illuminate</code>, por lo que, en los archivos fuente donde las utilicemos, ser\u00e1 frecuente encontrar instrucciones <code>use</code> que comiencen por dicho espacio de nombres. Por ejemplo:</p> <pre><code>use Illuminate\\Database\\Eloquent\\Model;\n</code></pre>"},{"location":"ut07/ut0704/#33-otros-elementos","title":"3.3. Otros elementos","text":"<p>Adem\u00e1s de los dos pilares anteriores sobre los que se sustenta fundamentalmente el desarrollo de proyectos en Laravel, podemos hablar de otros elementos que nos pueden resultar de utilidad en el desarrollo, como son los facades y los contracts.</p> <p>Las facades proporcionan una interfaz est\u00e1tica a los elementos de la aplicaci\u00f3n, de forma que facilitan el acceso a ciertos m\u00e9todos o utilidades. Por ejemplo, la facade <code>Cache</code> permite acceder de forma sencilla con su m\u00e9todo <code>get</code> a ciertas propiedades cacheadas previamente.</p> <pre><code>return Cache::get('key');\n</code></pre> <p>Los contracts son un conjunto de interfaces que proporcionan el n\u00facleo de servicios ofrecidos por Laravel. Por ejemplo, m\u00e9todos para enviar e-mails, o encolar tareas en una cola de prioridad, etc.</p>"},{"location":"ut07/ut0704/#4-prueba-de-proyectos-laravel","title":"4. Prueba de proyectos Laravel","text":"<p>Existen varias formas de probar o poner en marcha un proyecto Laravel, dependiendo de si estamos desarroll\u00e1ndolo y prob\u00e1ndolo (en cuyo caso buscamos ponerlo en marcha f\u00e1cilmente), o si ya lo hemos puesto en producci\u00f3n. Resumidamente, veremos tres formas de poner en marcha el proyecto:</p> <ul> <li>De forma local al proyecto, a trav\u00e9s de la herramienta <code>artisan</code></li> <li>De forma local a XAMPP, ubicando el proyecto en una carpeta predefinida</li> <li>De forma general en el sistema, definiendo un host virtual conectado con Apache</li> </ul> <p>La tercera forma ser\u00e1 la que necesitemos utilizar si queremos poner la web en producci\u00f3n en un servidor real, ya que en estos casos cada aplicaci\u00f3n tiene su propia configuraci\u00f3n y ubicaci\u00f3n diferente al resto. Las otras dos primeras opciones pueden resultarnos \u00fatiles para pruebas sencillas durante el desarrollo.</p>"},{"location":"ut07/ut0704/#41-permisos-en-carpetas-del-proyecto","title":"4.1. Permisos en carpetas del proyecto","text":"<p>Para poder probar nuestro proyecto Laravel, adem\u00e1s de configurar y poner en marcha el servidor correspondiente es necesario habilitar permisos de acceso y escritura a ciertas carpetas del proyecto, especialmente en sistemas Linux o Mac, si movemos el proyecto a una carpeta con permisos reducidos.</p> <ul> <li>Carpeta <code>storage</code> junto con sus subcarpetas y contenidos. En esta carpeta se compilar\u00e1n las vistas, se generar\u00e1n los archivos de log, etc, por lo que conviene que esta carpeta tenga permisos de escritura.</li> <li>Subcarpeta <code>bootstrap/cache</code>, donde se almacenar\u00e1 la cach\u00e9 de los archivos ya cargados.</li> </ul> <p>Para habilitar los permisos en estas carpetas bajo Linux o Mac OSX, podemos ejecutar estos comandos desde la ra\u00edz del proyecto (la opci\u00f3n <code>-R</code> aplica los permisos de forma recursiva):</p> <pre><code>sudo chmod -R 777 bootstrap/cache\nsudo chmod -R 777 storage\nsudo chmod -R 777 storage/logs\n</code></pre> <p> </p> <p>El tercer comando no ser\u00eda necesario en principio, ya que la subcarpeta <code>logs</code> est\u00e1 dentro de la carpeta <code>storage</code>, y se aplican los cambios de forma recursiva. Sin embargo, es posible que en algunas situaciones esta subcarpeta se cree a posteriori y no tenga los permisos adecuados. Comprobaremos al cargar la aplicaci\u00f3n desde el navegador si existe alg\u00fan error al inicio. En este caso, el propio error indicar\u00e1 que no puede generar el log, y deberemos escribir ese comando.</p>"},{"location":"ut07/ut0704/#42-puesta-en-marcha-con-el-comando-artisan","title":"4.2. Puesta en marcha con el comando artisan","text":"<p>La forma m\u00e1s sencilla de probar nuestro proyecto es a trav\u00e9s del comando <code>artisan</code>. Nos ubicamos en la carpeta ra\u00edz del proyecto (recuerda que esto se puede hacer autom\u00e1ticamente abriendo la carpeta con Visual Studio Code y abriendo su terminal), y ejecutamos este comando:</p> <pre><code>php artisan serve\n</code></pre> <p>Error en puesta en marcha</p> <p>Si tras ejercutar la orden <code>php artisan serve</code> desde el terminal (preferiblemente en VS Code --&gt; Ctrl + `) muestra el siguiente error: Error de utilizaci\u00f3n de puerto por otro servicio o proyecto. es debido a que el puerto <code>8000</code> ya est\u00e1 en uso, por lo que deberemos lanzar el proyecto desde otro puerto con la orden: <pre><code>php artisan serve --port=8001\n</code></pre></p> <p>Esto habilitar\u00e1 un peque\u00f1o servidor local, y se nos indicar\u00e1 en un mensaje en el terminal la URL que podemos emplear para probar el proyecto, que suele ser algo as\u00ed:</p> Proyecto en marcha desde php artisan serve. <p>Conectando a la URL que se nos facilita, veremos la pantalla de inicio de nuestro proyecto, que ser\u00e1 algo as\u00ed (aunque el dise\u00f1o de la p\u00e1gina de inicio puede variar dependiendo de la versi\u00f3n de Laravel que usemos):</p> P\u00e1gina de inicio de proyecto laravel. <p>M\u00e1s adelante aprenderemos a modificar esta p\u00e1gina de inicio, obviamente, y a ir a\u00f1adiendo otras.</p> <p> </p> <p>Si nuestra aplicaci\u00f3n necesita acceder a una base de datos, adem\u00e1s de arrancarla con el comando <code>artisan</code> visto antes, tambi\u00e9n tendremos que tener en marcha el servidor de bases de datos correspondiente, a trav\u00e9s del manager de XAMPP.</p>"},{"location":"ut07/ut0704/#43-puesta-en-marcha-en-carpeta-predefinida-de-xampp","title":"4.3. Puesta en marcha en carpeta predefinida de XAMPP","text":"<p>Como segunda alternativa relativamente r\u00e1pida, podemos ubicar la carpeta del proyecto dentro de la carpeta predefinida de XAMPP para alojar webs:</p> <ul> <li>En el caso de Windows es la carpeta htdocs dentro de la carpeta de instalaci\u00f3n de XAMPP. T\u00edpicamente la ruta es <code>C:\\xampp\\htdocs</code></li> <li>En el caso de Linux, en particular en la distribuci\u00f3n de nuestra m\u00e1quina virtual, es la carpeta <code>/opt/lampp/htdocs</code></li> <li>En el caso de Mac OSX, la ruta es <code>/Applications/XAMPP/xamppfiles/htdocs</code></li> </ul> <p>A continuaci\u00f3n debemos poner en marcha el servidor Apache (empleando el manager de XAMPP), y luego acceder a la URL http://localhost/biblioteca/public. Obtendremos la misma p\u00e1gina de inicio que en el caso anterior.</p> <p> </p> <p>Al mover la carpeta del proyecto a la ubicaci\u00f3n de XAMPP en Linux, ten en cuenta que esa carpeta es de acceso restringido. Deberemos dar permisos a las carpetas indicadas para que la aplicaci\u00f3n se pueda poner en marcha adecuadamente.</p> Proyecto biblioteca (3): puesta en marcha <p>En Linux, escribimos este comando desde la carpeta que contiene nuestro proyecto: <pre><code>sudo mv biblioteca /opt/lampp/htdocs\n</code></pre></p>"},{"location":"ut07/ut0704/#44-puesta-en-marcha-como-host-virtual","title":"4.4. Puesta en marcha como host virtual","text":"<p>En el caso de una puesta en producci\u00f3n real, o si queremos dejar una aplicaci\u00f3n correctamente configurada con Apache, hay que realizar una serie de pasos previos, tales como asociarlo a un virtual host (de Apache, en nuestro caso). A continuaci\u00f3n indicamos los pasos a seguir, y conviene tener presente que:</p> <ul> <li>El paso 1 deberemos hacerlo s\u00f3lo una vez, cuando demos de alta nuestro primer virtual host con Apache.</li> <li>El resto de pasos deberemos hacerlos una vez por proyecto para configurar dicho proyecto en Apache y establecer los permisos adecuados.</li> </ul> <p>paso 1. Habilitar los virtual hosts en Apache</p> <p>Los virtual hosts son un mecanismo que ofrecen los servidores web, como Apache, para poder asociar carpetas arbitrarias del sistema, externas a la estructura de Apache, al propio servidor, de forma que, accediendo a una URL o nombre de dominio determinado, le indicamos a Apache que cargue los contenidos de esa carpeta.</p> <p>En primer lugar debemos habilitar los virtual hosts en Apache, editando el archivo de configuraci\u00f3n de Apache:</p> <ul> <li>En Linux, archivo <code>/opt/lampp/etc/httpd.conf</code>.</li> <li>En Windows, archivo <code>C:\\xampp\\apache\\conf\\httpd.conf</code> de la carpeta de instalaci\u00f3n de XAMPP(suponiendo que lo hemos instalado en C:\\xampp).</li> <li>En Mac OSX, archivo <code>/Applications/XAMPP/xamppfiles/etc/httpd.conf</code>.</li> </ul> <p>En todos los casos, debemos asegurarnos de que est\u00e1 descomentada la l\u00ednea que hace referencia al lugar donde se definen dichos virtual hosts. </p> <p>Debe quedar as\u00ed:</p> <p>En Linux y Mac OSX: <pre><code># Virtual hosts\nInclude etc/extra/httpd-vhosts.conf\n</code></pre></p> <p>En Windows, por ejemplo: <pre><code># Virtual hosts\nInclude conf/extra/httpd-vhosts.conf\n</code></pre></p> <p>paso 2. A\u00f1adir el nuevo nombre de dominio</p> <p>Despu\u00e9s, debemos editar el archivo hosts del sistema y asignar un nombre de dominio (local) a nuestro proyecto. Dicho archivo de hosts es:</p> <ul> <li><code>/etc/hosts</code> en Linux.</li> <li><code>C:\\Windows\\System32\\drivers\\etc\\hosts</code> en Windows.</li> <li><code>/private/etc/hosts</code> en Mac OSX.</li> </ul> Proyecto biblioteca (4): a\u00f1adir nombre de dominio <p>Por ejemplo, para el proyecto biblioteca que hemos creado antes, podr\u00edamos definir algo como esto (al final, o entre los otros registros de nombres existentes en dicho archivo): <pre><code>127.0.0.5   biblioteca\n</code></pre></p> <p>\u200b   Lo que hemos hecho ha sido asignar la IP local 127.0.0.5 (puede ser la IP local que nosotros queramos) al nombre \u201cbiblioteca\u201d. De este modo, cuando carguemos localmente el proyecto podremos acceder a \u00e9l mediante la URL http://biblioteca o bien con http://127.0.0.5.</p> <p>paso 3. Definir la configuraci\u00f3n del nuevo virtual host</p> <p>A continuaci\u00f3n, debemos editar el archivo al que hac\u00eda referencia la l\u00ednea que hemos descomentado antes en el paso 1: el archivo <code>httpd-vhosts.conf</code>, y a\u00f1adir una nueva configuraci\u00f3n para nuestro nuevo virtual host.</p> Proyecto biblioteca (5): host virtal <pre><code>&lt;VirtualHost 127.0.0.5:80&gt;\n  DocumentRoot \"/home/alumno/ProyectosLaravel/biblioteca/public\"\n  DirectoryIndex index.php\n\n  &lt;Directory \"/home/alumno/ProyectosLaravel/biblioteca/public\"&gt;\n    Options All\n    AllowOverride All\n    Require all granted\n  &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</code></pre> <p> </p> <p>La ruta indicada en el atributo DocumentRoot depender\u00e1, evidentemente, de la ruta donde tengamos alojado nuestro proyecto biblioteca. El ejemplo anterior se ha ilustrado suponiendo que el proyecto biblioteca se ubica en una carpeta ProyectosLaravel en la carpeta de usuario de nuestra m\u00e1quina virtual.</p>"},{"location":"ut07/ut0704/#5-importando-exportando-un-proyecto-laravel","title":"5. Importando / Exportando un proyecto Laravel","text":"<p>Vamos a indicar ahora unas instrucciones necesarias en el caso de que queramos importar un proyecto Laravel a un nuevo ordenador, o llevarlo a otro diferente, descarg\u00e1ndolo de, por ejemplo, un repositorio GitHub, o comprimido en un archivo ZIP o similar. Dado que ciertas carpetas y archivos no se suben a dicho repositorio (o no deber\u00edan subirse), es conveniente saber c\u00f3mo regenerar estos elementos en la nueva ubicaci\u00f3n del proyecto.</p>"},{"location":"ut07/ut0704/#51-exportar-un-proyecto","title":"5.1. Exportar un proyecto","text":"<p>Si queremos exportar o compartir un proyecto Laravel de forma externa, podemos:</p> <ul> <li>Compartirlo en un repositorio remoto tipo GitHub o similar. En este caso, el propio archivo <code>.gitignore</code> que se crea en el proyecto indica qu\u00e9 elementos no van a subirse al repositorio. De entre estos elementos, conviene destacar el archivo de configuraci\u00f3n <code>.env</code>, y las carpetas <code>vendor</code> y <code>node_modules</code>.</li> <li>Comprimirlo en un archivo que poder distribuir o instalar en otras partes. En este caso, debemos tomar las mismas precauciones que cuando lo compartimos v\u00eda GitHub, y eliminar los elementos que no sean necesarios.</li> </ul> <p> </p> <p>Cuando comprimas un proyecto Laravel, procura comprimir la carpeta entera desde fuera, para as\u00ed incluir tambi\u00e9n los archivos ocultos, como <code>.env.example</code>. De lo contrario, no ser\u00e1 posible poner en marcha el proyecto en el lugar donde se utilice. As\u00ed que, simplemente, elimina las carpetas pesadas (<code>vendor</code> y <code>node_modules</code>), archivos que no quieras compartir directamente (<code>.env</code>, si es el caso) sal a la carpeta padre y compr\u00edmela.</p>"},{"location":"ut07/ut0704/#52-importar-un-proyecto-existente","title":"5.2. Importar un proyecto existente","text":"<p>A la hora de importar en un nuevo ordenador un proyecto existente (bien descarg\u00e1ndolo de GitHub, o descomprimi\u00e9ndolo de un archivo ZIP), debemos dar estos pasos (una vez descargado o descomprimido el proyecto).</p> <p>1. El archivo de configuraci\u00f3n de variables de entorno <code>.env</code></p> <p>Como hemos comentado antes, el archivo <code>.env</code> es uno de los que no se incluye por defecto en un repositorio GitHub, ya que contiene informaci\u00f3n sensible, como la contrase\u00f1a de acceso a la base de datos. Sin embargo, lo que s\u00ed se incluye es una copia inicial del mismo, en el archivo <code>.env.backup</code> o <code>.env.example</code>, dependiendo de la versi\u00f3n de Laravel que utilicemos. Basta con hacer una copia de dicho archivo en la carpeta ra\u00edz del proyecto\u2026</p> <pre><code>cp .env.example .env\n</code></pre> <p>\u2026 y luego editar dicho archivo para establecer la configuraci\u00f3n oportuna en el lugar donde hayamos importado el proyecto: par\u00e1metros de conexi\u00f3n a la base de datos, y otras variables de entorno que iremos viendo en este curso.</p> <p>2. La clave del proyecto</p> <p>Laravel necesita de una clave en la variable de entorno APP_KEY del archivo <code>.env</code> anterior, que por defecto est\u00e1 vac\u00eda. Dicha clave es un c\u00f3digo aleatorio de 32 caracteres, que Laravel emplea para encriptar cookies. Podemos generar una clave con el comando <code>php artisan</code> (desde la ra\u00edz del proyecto):</p> <pre><code>php artisan key:generate\n</code></pre> <p>y ya la tendremos lista en nuestro archivo <code>.env</code>.</p> <p>3. Dependencias PHP</p> <p>Otro de los elementos del proyecto que no se comparte en repositorios es la carpeta <code>vendor</code>, donde vienen descargadas las dependencias PHP de nuestro proyecto. Por defecto, al generar un nuevo proyecto Laravel, se presuponen algunas de ellas, incluidas en el archivo <code>composer.json</code> de la ra\u00edz del proyecto. Para volverlas a instalar en donde hayamos clonado el proyecto, ejecutamos este comando desde la ra\u00edz del proyecto (suponiendo que ya tengamos instalado el comando <code>composer</code> de pasos anteriores):</p> <pre><code>composer install\n</code></pre> <p>4. Dependencias JavaScript</p> <p>Del mismo modo, existen algunas dependencias para la parte de cliente (como por ejemplo Bootstrap, o jQuery), definidas en el archivo <code>package.json</code> de la ra\u00edz del proyecto, y que se encuentran preinstaladas en la carpeta <code>node_modules</code>. Esta carpeta, sin embargo, tampoco se comparte en el repositorio, as\u00ed que para volverla a generar en el proyecto clonado, y suponiendo que tambi\u00e9n tendremos instalada la herramienta <code>npm</code> de pasos anteriores, ejecutamos el comando siguiente desde la ra\u00edz del proyecto:</p> <pre><code>npm install\n</code></pre>"},{"location":"ut07/ut0705/","title":"Ut0705","text":"<p>Las rutas (routes) son un mecanismo que permite a Laravel establecer qu\u00e9 respuesta enviar a una petici\u00f3n que intenta acceder a una determinada URL. Estas rutas se especifican en diferentes archivos dentro de la carpeta <code>routes</code> de nuestro proyecto Laravel.</p> <p>Podr\u00edamos decir que existen dos tipos principales de rutas:</p> <ul> <li>Las rutas web (almacenadas en el archivo <code>routes/web.php</code> de la aplicaci\u00f3n), que nos permitir\u00e1n cargar distintas vistas en funci\u00f3n de la URL que indique el cliente.</li> <li>Las rutas API (almacenadas en el archivo <code>routes/api.php</code>), a trav\u00e9s de las cuales definiremos distintos servicios REST, como veremos tambi\u00e9n m\u00e1s adelante.</li> </ul> <p>Nos vamos a centrar durante esta sesi\u00f3n en el primer grupo, por lo que editaremos el contenido del archivo <code>routes/web.php</code>. Estas rutas son las m\u00e1s habituales, y se utilizan para recuperar contenidos t\u00edpicamente en formato HTML. Inicialmente ya existe una ruta predefinida hacia la ra\u00edz del proyecto, que carga la p\u00e1gina de bienvenida al mismo:</p> <pre><code>&lt;?php\n    use Illuminate\\Support\\Facades\\Route;\n\n    // Ruta por defecto para cargar la vista welcome (sin extensi\u00f3n .blade.php)\n    // cuando el usuario introduce simplemente el dominio\n    Route::get('/', function() {\n        return view('welcome');\n    });\n</code></pre> <p>Para definir una ruta en Laravel, se hace una llamada a un m\u00e9todo est\u00e1tico de la clase <code>Route</code> (en el ejemplo anterior, al m\u00e9todo <code>Route::get</code>). Como primer par\u00e1metro, especificaremos la URL de la ruta (la ruta ra\u00edz, en el ejemplo anterior), y como segundo par\u00e1metro, la funci\u00f3n que se va a ejecutar (callback o closure) cuando alg\u00fan cliente haga una petici\u00f3n a esa ruta.</p> <p>closure VS controlador</p> <p>Se puede definir en el segundo par\u00e1metro del m\u00e9todo <code>Route::get</code> un closure o un controlador (veremos este segundo caso m\u00e1s adelante). Por ejemplo: <pre><code>Route::get('/libros', [LibroController::class, 'index']) -&gt; name('libros');\n</code></pre></p>"},{"location":"ut07/ut0705/#1-rutas-simples","title":"1. Rutas simples","text":"<p>Las rutas simples tienen un nombre de ruta fijo, y una funci\u00f3n que responde a dicho nombre emitiendo una respuesta. Un ejemplo es la ruta ra\u00edz que viene por defecto en nuestro proyecto. Podr\u00edamos definir otra ruta a continuaci\u00f3n de esa, mediante la cual, si accedemos a la URL http://biblioteca/fecha nos muestre la fecha y hora actuales:</p> <pre><code>Route::get('fecha', function() {\n    return date(\"D, d/m/y  |  h:i:s\"\");\n});\n</code></pre> <p>Si ponemos en marcha el servidor y accedemos a esa URL (o a http://127.0.0.1:8000/fecha si hemos lanzado la aplicaci\u00f3n con <code>php artisan serve</code>), podremos ver esa fecha y hora actual.</p> Ejercicios <ul> <li><code>Ejercicio 1</code>.</li> </ul>"},{"location":"ut07/ut0705/#2-rutas-con-parametros","title":"2. Rutas con par\u00e1metros","text":"<p>Es tambi\u00e9n posible pasar par\u00e1metros en la URL de la ruta. Para ello, incluimos el nombre del par\u00e1metro entre llaves, y lo pasamos tambi\u00e9n a la funci\u00f3n del segundo par\u00e1metro. Por ejemplo, si definimos una ruta para saludar al nombre que nos llega como par\u00e1metro, el c\u00f3digo quedar\u00eda as\u00ed:</p> <pre><code>Route::get('saludo/{nombre}', function($nombre) {\n    return \"Hola $nombre, bienvenido a Laravel\";\n});\n</code></pre> <p>En este caso, si el par\u00e1metro es obligatorio y no lo indicamos en la URL, nos redirigir\u00e1 a una p\u00e1gina de <code>error 404</code>. Para indicar que un par\u00e1metro no es obligatorio, se termina su nombre con un interrogante <code>?</code>, y tambi\u00e9n conviene darle un valor por defecto en la funci\u00f3n PHP de respuesta. As\u00ed modificar\u00edamos la ruta anterior para que el nombre del usuario sea opcional y, en caso de no ponerlo, se le asigne el nombre \u201cInvitado\u201d:</p> <pre><code>Route::get('saludo/{nombre?}', function($nombre = \"Invitado\") {\n    return \"Hola $nombre, bienvenido a Laravel\";\n});\n</code></pre>"},{"location":"ut07/ut0705/#21-validacion-de-parametros","title":"2.1. Validaci\u00f3n de par\u00e1metros","text":"<p>Algunos par\u00e1metros ser\u00e1 preciso que sigan un determinado patr\u00f3n. Por ejemplo, un identificador num\u00e9rico s\u00f3lo contendr\u00e1 d\u00edgitos. Para asegurarnos de eso, podemos emplear el m\u00e9todo where al definir la ruta. A este m\u00e9todo le pasamos dos par\u00e1metros: el nombre del par\u00e1metro a validar, y la expresi\u00f3n regular que tiene que cumplir. En el caso del nombre anterior, si queremos que s\u00f3lo contenga letras (may\u00fasculas o min\u00fasculas), podemos hacer algo as\u00ed:</p> <pre><code>Route::get('saludo/{nombre?}', function($nombre = \"Invitado\") {\n    return \"Hola, \" . $nombre;\n}) -&gt; where('nombre', \"[A-Za-z]+\");\n</code></pre> <p>En caso de que la ruta no cumpla el patr\u00f3n, se obtendr\u00e1 una p\u00e1gina de error. M\u00e1s adelante se explicar\u00e1 c\u00f3mo podemos personalizar estas p\u00e1ginas de error.</p> Ejercicios <ul> <li><code>Ejercicio 2</code>.</li> </ul>"},{"location":"ut07/ut0705/#3-rutas-con-nombre-o-named-routes","title":"3. Rutas con nombre o named routes","text":"<p>En ocasiones puede ser conveniente asociar un nombre a una ruta. Especialmente, cuando esa ruta va a formar parte de un enlace en alguna p\u00e1gina de nuestro sitio, ya que en un futuro la ruta podr\u00eda cambiar, y de este modo evitamos tener que actualizar los enlaces con el nuevo nombre.</p> <p>Para ello, al definir la ruta, le asociamos con la funci\u00f3n name el nombre que queramos. Por ejemplo:</p> <pre><code>Route::get('contacto', function() {\n    return \"P\u00e1gina de contacto\";\n}) -&gt; name('ruta_contacto');\n</code></pre> <p>Ahora, si queremos definir un enlace a esta ruta en cualquier parte, basta con emplear la funci\u00f3n route de Laravel, indicando el nombre que le hemos asignado a esta ruta. Por lo tanto, en lugar de poner esto:</p> <p> <pre><code>echo '&lt;a href=\"/contacto\"&gt;Contacto&lt;/a&gt;';\n</code></pre></p> <p>Podemos hacer algo como esto otro, tal y como veremos m\u00e1s adelante cuando definamos nuestras vistas:</p> <p> <pre><code>&lt;a href=\"{{ route('ruta_contacto') }}\"&gt;Contacto&lt;/a&gt;\n</code></pre></p> <p>De este modo, ante futuros cambios en las rutas, s\u00f3lo deberemos cambiar la URL en el correspondiente <code>Route::get</code> de <code>routes/web.php</code>.</p>"},{"location":"ut07/ut0705/#4-combinacion-de-elementos-en-rutas","title":"4. Combinaci\u00f3n de elementos en rutas","text":"<p>Podemos combinar varias cl\u00e1usulas where en una ruta para validar distintos par\u00e1metros que pueda tener, y tambi\u00e9n enlazar estas llamadas con una a la funci\u00f3n <code>name</code> para nombrar la ruta. Por ejemplo, la siguiente ruta espera recibir un nombre con caracteres, y un id num\u00e9rico, ambos con valores por defecto:</p> <pre><code>Route::get('saludo/{nombre?}/{id?}', function($nombre=\"Invitado\", $id=0) {\n    return \"Hola $nombre, tu c\u00f3digo es el $id\";\n}) -&gt; where('nombre', \"[A-Za-z]+\")\n   -&gt; where('id', \"[0-9]+\")\n   -&gt; name('saludo');\n</code></pre> <p>Si accedemos a cada una de las siguientes URLs, obtendremos cada una de las respuestas indicadas:</p> URL respuesta /saludo Hola Invitado, tu c\u00f3digo es el 0 /saludo/Alumno Hola Alumno, tu c\u00f3digo es el 0 /saludo/Alumno/3 Hola Alumno, tu c\u00f3digo es el 3 /saludo/3 Error 404 (URL incorrecta) <p>Notar que el \u00faltimo caso es incorrecto. No podemos especificar un id sin haber especificado un nombre delante, porque incumple el patr\u00f3n de la URL. Se puede dejar un par\u00e1metro omitido, siempre y cuando los posteriores tambi\u00e9n lo est\u00e9n.</p>"},{"location":"ut07/ut0705/#5-otros-metodos-de-route","title":"5. Otros m\u00e9todos de Route","text":"<p>Adem\u00e1s de utilizar el m\u00e9todo <code>get</code>, desde la clase <code>Route</code> tambi\u00e9n podemos acceder a otros m\u00e9todos est\u00e1ticos \u00fatiles, como <code>Route::post</code> (\u00fatil para recoger datos de formularios, por ejemplo), o tambi\u00e9n <code>Route::put</code>, <code>Route::delete</code>\u2026 Los veremos con m\u00e1s detalle en secciones posteriores.</p> Ejercicios <ul> <li><code>Ejercicio 3</code>.</li> <li><code>Ejercicio 4</code>.</li> </ul>"},{"location":"ut07/ut0706/","title":"Ut0706","text":"<p>Hasta ahora las rutas que hemos definido devuelven un texto simple, salvo la que ya estaba creada por defecto en el proyecto, que apuntaba a la p\u00e1gina de inicio. Si quisi\u00e9ramos devolver contenido HTML, una opci\u00f3n (costosa) ser\u00eda devolver dicho contenido generado desde el propio m\u00e9todo de la ruta, a trav\u00e9s de la instrucci\u00f3n <code>return</code>, pero en lugar de hacer esto desde dentro de la propia funci\u00f3n de respuesta, lo m\u00e1s habitual (y recomendable) es generar una vista con el contenido HTML que se quiere enviar al cliente.</p> <p>La forma general de mostrar vistas en Laravel es hacer que las rutas devuelvan (<code>return</code>) una determinada vista. Para ello, se puede emplear la funci\u00f3n <code>view</code> de Laravel, indicando el nombre de la vista a generar o mostrar.</p> <p>Por defecto, en la carpeta <code>resources/views</code> tenemos disponible una vista de ejemplo llamada <code>welcome.blade.php</code>. Es la que se utiliza como p\u00e1gina de inicio en la ruta ra\u00edz en <code>routes/web.php</code>:</p> <pre><code>Route::get('/', function() {\n    return view('welcome');\n});\n</code></pre> <p>A trav\u00e9s de las plantillas de Laravel vamos a escribir menos c\u00f3digo PHP y vamos a tener nuestros archivos mejor organizados.</p> <p>Blade es el sistema de plantillas que trae Laravel, por eso los archivos de plantillas que guardamos en el directorio de <code>views</code> llevan la extensi\u00f3n <code>blade.php</code>.</p> <p>De esta manera sabemos inmediatamente que se trata de una plantilla de Laravel y que forma parte de una vista que se mostrar\u00e1 en el navegador.</p> <p> </p> <p>No es necesario indicar el path o ruta hacia el archivo de la vista, ni tampoco la extensi\u00f3n, puesto que Laravel asume que por defecto las vistas se encuentran en la carpeta <code>resources/views</code>, con la extensi\u00f3n <code>.blade.php</code> (que hace referencia al motor de plantillas Blade que veremos a continuaci\u00f3n), o simplemente con extensi\u00f3n <code>.php</code> (en el caso de vistas simples que no utilicen Blade).</p> Ejemplo <p>Podemos, por ejemplo, crear una vista sencilla dentro de esta carpeta de vistas (llam\u00e9mosla <code>inicio.blade.php</code>), con un contenido HTML b\u00e1sico:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Inicio&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;P\u00e1gina de inicio&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Y podemos utilizar esta vista como p\u00e1gina de inicio:</p> <pre><code>Route::get('/', function() {\n    return view('inicio');\n});\n</code></pre>"},{"location":"ut07/ut0706/#1-pasar-valores-a-las-vistas","title":"1. Pasar valores a las vistas","text":"<p>Es muy habitual pasar cierta informaci\u00f3n a ciertas vistas, como por ejemplo, listados de datos a mostrar, o datos de un elemento en concreto. Por ejemplo, si queremos dar un mensaje de bienvenida a un nombre (supuestamente variable), debemos almacenar el nombre en una variable en la ruta, y pas\u00e1rselo a la vista al cargarla. Esto puede hacerse, por ejemplo, con el m\u00e9todo <code>with</code> tras generar la vista, indicando el nombre con que lo vamos a asociar a la vista, y el valor (variable) asociado a dicho nombre. </p> Ejemplo <p>En nuestro caso quedar\u00eda as\u00ed:</p> <pre><code>Route::get('/', function() {\n    $nombre = \"Alba\";\n    return view('inicio')-&gt;with('nombre', $nombre);\n});\n</code></pre> <p>Posteriormente, en la vista, deberemos mostrar el valor de esta variable en alg\u00fan lugar del c\u00f3digo HTML. Podemos emplear PHP tradicional para recoger esta variable:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Inicio&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;P\u00e1gina de inicio&lt;/h1&gt;\n        &lt;p&gt;Bienvenido/a &lt;?php echo $nombre; ?&gt;&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Pero es m\u00e1s habitual y limpio emplear una sintaxis espec\u00edfica de Blade, como veremos a continuaci\u00f3n.</p> <p>Como alternativas al uso de <code>with</code> comentado antes, tambi\u00e9n podemos utilizar un array asociativo (asignando as\u00ed varios nombres a varios valores):</p> <pre><code>return view('inicio')-&gt;with(['nombre' =&gt; $nombre, ...]);\n</code></pre> <p>Asimismo, podemos utilizar este mismo array como segundo par\u00e1metro de la funci\u00f3n <code>view</code>, y prescindir as\u00ed de <code>with</code>:</p> <pre><code>return view('inicio', ['nombre' =&gt; $nombre, ...]);\n</code></pre> <p>Y tambi\u00e9n podemos utilizar una funci\u00f3n llamada compact como segundo par\u00e1metro de <code>view</code>. A esta funci\u00f3n le pasamos \u00fanicamente el nombre de la variable que usaremos en la vista y, siempre que la variable asociada se llame igual, establece la asociaci\u00f3n por nosotros:</p> <pre><code>return view('inicio', compact('nombre'));\n</code></pre> <p>La funci\u00f3n <code>compact</code> admite tantos par\u00e1metros como datos queramos enviar a la vista por separado, cada uno con su nombre asociado.</p> <p>Si simplemente vamos a devolver una vista con poca informaci\u00f3n asociada, o poca l\u00f3gica interna, tambi\u00e9n podemos abreviar el c\u00f3digo anterior llamando directamente a <code>view</code>, en lugar de a <code>get</code> primero, en el archivo <code>routes/web.php</code>, y le pasamos as\u00ed la informaci\u00f3n asociada a la vista:</p> <pre><code>Route::view('/', 'inicio', ['nombre' =&gt; 'Alba']);\n</code></pre>"},{"location":"ut07/ut0706/#2-primeros-pasos-con-el-motor-de-plantillas-blade","title":"2. Primeros pasos con el motor de plantillas Blade","text":"<p>Hemos comentado en el apartado anterior que el uso de Blade permite simplificar la sintaxis y la forma de procesar algunas cosas en nuestras vistas. Siempre que creemos el archivo de la vista con la extensi\u00f3n <code>.blade.php</code>, nos permitir\u00e1 autom\u00e1ticamente aprovechar la sintaxis y funcionalidades de Blade en nuestras vistas.</p> Ejemplo <p>Por ejemplo, si queremos mostrar el contenido de la variable <code>nombre</code> que hemos pasado antes a la p\u00e1gina de inicio, en lugar de hacer un rudimentario <code>echo</code> en PHP, podemos emplear una sintaxis de dobles llaves, facilitada por Blade, para mostrar el contenido de esa variable.  Con esto la l\u00ednea que mostraba el nombre pasa de ser as\u00ed\u2026</p> <pre><code>Bienvenido/a &lt;?php echo $nombre ?&gt;\n</code></pre> <p>\u2026 a ser as\u00ed:</p> <pre><code>Bienvenido/a {{ $nombre }}\n</code></pre> <p> </p> <p>Cach\u00e9 de vistas Cada vez que se renderiza una vista en Laravel, se almacena el contenido PHP generado en <code>storage/framework/views</code>, y s\u00f3lo se vuelve a regenerar ante un cambio en la vista, con lo que volver a llamar a una vista ya renderizada no afecta al rendimiento de la aplicaci\u00f3n. Diferencia entre PHP plano y Blade Si echamos un vistazo a la vista generada con PHP plano y con Blade, veremos que hay una sutil diferencia entre ambas, y es que con Blade, en lugar de hacer un simple <code>echo</code> para mostrar el valor de la variable, se utiliza una funci\u00f3n intermedia llamada <code>e</code>, que evita ataques XSS (Cross Site Scripting), es decir, que se inyecten scripts de JavaScript con la variable a mostrar. En otras palabras, el c\u00f3digo no se interpreta, y se muestra tal cual. </p> <p>Desactivaci\u00f3n de la sanitizaci\u00f3n En algunos casos (especialmente cuando generamos contenido HTML desde dentro de la expresi\u00f3n Blade) nos puede interesar que no proteja contra estas inyecciones de c\u00f3digo. En ese caso, se sustituye la segunda llave por una doble exclamaci\u00f3n:</p> <pre><code>Bienvenido/a {!! $nombre !!}\n</code></pre> <p>Adem\u00e1s de esta sintaxis b\u00e1sica para mostrar datos de variables en un lugar determinado de la vista, existen ciertas directivas en Blade que nos permiten realizar comprobaciones o repeticiones.</p>"},{"location":"ut07/ut0706/#21-estructuras-de-control-de-flujo-en-blade","title":"2.1. Estructuras de control de flujo en Blade","text":"<p>Para iterar sobre un conjunto de datos (array), podemos emplear la directiva @foreach, con una sintaxis similar al foreach de PHP, pero sin necesidad de llaves. Basta con finalizar el bucle con la directiva <code>@endforeach</code>, de este modo:</p> <pre><code>&lt;ul&gt;\n    @foreach($elementos as $elemento)\n        &lt;li&gt;{{ $elemento }}&lt;/li&gt;\n    @endforeach\n&lt;/ul&gt;\n</code></pre> <p>En el caso de querer realizar alguna comprobaci\u00f3n (por ejemplo, si el array anterior est\u00e1 vac\u00edo, para mostrar un mensaje pertinente), usamos la directiva @if, cerrada por su correspondiente pareja <code>@endif</code>. Opcionalmente, se puede intercalar una directiva @else para el camino alternativo, o tambi\u00e9n @elseif para indicar otra condici\u00f3n. </p> Ejemplo <p>El ejemplo anterior podr\u00eda quedar as\u00ed: <pre><code>&lt;ul&gt;\n    @if($elementos)\n        @foreach($elementos as $elemento)\n            &lt;li&gt;{{ $elemento }}&lt;/li&gt;\n        @endforeach\n    @else\n        &lt;li&gt;No hay elementos que mostrar&lt;/li&gt;\n    @endif\n&lt;/ul&gt;\n</code></pre></p> <p>Tambi\u00e9n podemos comprobar si una variable est\u00e1 definida. En este caso, reemplazamos la directiva <code>@if</code> por @isset, con su correspondiente cierre <code>@endisset</code>.</p> <pre><code>&lt;ul&gt;\n    @isset($elementos)\n        @foreach($elementos as $elemento)\n            &lt;li&gt;{{ $elemento }}&lt;/li&gt;\n        @endforeach\n    @else\n        &lt;li&gt;No hay elementos que mostrar&lt;/li&gt;\n    @endisset\n&lt;/ul&gt;\n</code></pre> <p>Sin embargo, con cualquiera de estas opciones tenemos un problema: en el primer caso, si la variable <code>$elementos</code> no est\u00e1 definida, mostrar\u00e1 un error de PHP. En el segundo caso, si la variable s\u00ed est\u00e1 definida pero no contiene elementos, no se mostrar\u00e1 nada por pantalla. Una tercera estructura alternativa que agrupa estos dos casos (controlar a la vez que la variable est\u00e9 definida y tenga elementos) es emplear la directiva @forelse en lugar de <code>@foreach</code>. Esta directiva permite una cl\u00e1usula adicional @empty para indicar qu\u00e9 hacer si la colecci\u00f3n no tiene elementos o est\u00e1 sin definir. </p> Ejemplo <p>El ejemplo anterior quedar\u00eda ahora as\u00ed de abreviado:</p> <pre><code>&lt;ul&gt;\n    @forelse($elementos as $elemento)\n        &lt;li&gt;{{ $elemento }}&lt;/li&gt;\n    @empty\n        &lt;li&gt;No hay elementos que mostrar&lt;/li&gt;\n    @endforelse\n&lt;/ul&gt;\n</code></pre> <p>En este tipo de iteradores (<code>@foreach</code> o <code>@forelse</code>), tenemos disponible un objeto llamado $loop, con una serie de propiedades sobre el bucle que estamos iterando, como por ejemplo:</p> <ul> <li><code>index</code>: posici\u00f3n dentro del array por la que vamos.</li> <li><code>count</code>: total de elementos.</li> <li><code>first</code> y <code>last</code>: booleanos que determinan si es el primer o \u00faltimo elemento, respectivamente.</li> <li>otras</li> </ul> <p>Podemos ver todas las propiedades disponibles en este objeto llamando a <code>var_dump</code>:</p> <pre><code>&lt;ul&gt;\n    @forelse($elementos as $elemento)\n        &lt;li&gt;{{ $elemento }} {{ var_dump($loop) }} &lt;/li&gt;\n    @empty\n        &lt;li&gt;No hay elementos que mostrar&lt;/li&gt;\n    @endforelse\n&lt;/ul&gt;\n</code></pre> <p>Si, por ejemplo, queremos determinar si es el \u00faltimo elemento de la lista, y mostrar un mensaje o estilo especial, podemos hacer algo como esto:</p> <pre><code>&lt;ul&gt;\n    @forelse($elementos as $elemento)\n        &lt;li&gt;{{ $elemento }} \n            {{ $loop-&gt;last ? \"Ultimo elemento\" : \"\" }} \n        &lt;/li&gt;\n    @empty\n        &lt;li&gt;No hay elementos que mostrar&lt;/li&gt;\n    @endforelse\n&lt;/ul&gt;\n</code></pre> <p>Existen otros tipos de estructuras iterativas y selectivas en Blade, como @while, @for o @switch, entre otras. Pod\u00e9is consultar sobre su uso en la documentaci\u00f3n oficial de Blade.</p> Proyecto biblioteca (6): <p>Vamos a aplicar esto en nuestro ejemplo del proyecto biblioteca. Definiremos una ruta para sacar un listado de libros y, de momento, vamos a crear a mano dicho listado en el propio m\u00e9todo de enrutamiento, y se lo pasaremos a una vista llamada <code>listado.blade.php</code>. Por un lado, la nueva ruta para el listado puede quedar as\u00ed: <pre><code>Route::get('/listado', function() {\n    $libros = [\n        [   \"titulo\" =&gt; \"El juego de Ender\",\n            \"autor\" =&gt; \"Orson Scott Card\"  \n        ],\n        [   \"titulo\" =&gt; \"La tabla de Flandes\",\n            \"autor\" =&gt; \"Arturo P\u00e9rez Reverte\"  \n        ],\n        [   \"titulo\" =&gt; \"La historia interminable\",\n            \"autor\" =&gt; \"Michael Ende\"  \n        ],\n        [   \"titulo\" =&gt; \"El Se\u00f1or de los Anillos\",\n            \"autor\" =&gt; \"J.R.R. Tolkien\"  \n        ]\n    ];\n</code></pre></p> <pre><code>return view('listado', compact('libros'));\n</code></pre> <p>})-&gt;name('listado_libros'); <code>Por su parte, la vista `listado.blade.php` puede quedar as\u00ed:</code>html  Listado de libros Listado de libros <ul>         @forelse ($libros as $libro)             <li>{{ $libro[\"titulo\"] }} ({{ $libro[\"autor\"] }})</li>         @empty             <li>No se encontraron libros</li>         @endforelse         </ul>  ```</p> <p>Vista en la que se muestra una lista de elementos (libros).</p>"},{"location":"ut07/ut0706/#22-sobre-los-enlaces-a-otras-rutas","title":"2.2. Sobre los enlaces a otras rutas","text":"<p>Hemos comentado brevemente en puntos anteriores que, gracias a Blade y a los nombres en las rutas, podemos enlazar una vista con otra de dos formas: de forma tradicional\u2026</p> <pre><code>echo '&lt;a href=\"/contacto\"&gt;Contacto&lt;/a&gt;';\n</code></pre> <p>\u2026 o bien empleando la funci\u00f3n route seguida del nombre que le hemos dado a la ruta:</p> <pre><code>&lt;a href=\"{{ route('ruta_contacto') }}\"&gt;Contacto&lt;/a&gt;\n</code></pre> <p>Por ejemplo, podemos poner un enlace a la vista del listado de libros que hemos creado antes (y que hemos nombrado como <code>listado_libros</code> de este modo en nuestra vista de <code>inicio.blade.php</code>:</p> <pre><code>&lt;p&gt;Bienvenido/a {{ $nombre }}&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"{{ route('listado_libros') }}\"&gt;Listado de libros&lt;/a&gt;&lt;/p&gt;\n</code></pre>"},{"location":"ut07/ut0706/#23-definir-plantillas-comunes","title":"2.3. Definir plantillas comunes","text":"<p>A la hora de dar homogeneidad a una web, es habitual que la cabecera, el men\u00fa de navegaci\u00f3n o el pie de p\u00e1gina formen parte de una plantilla que se repite en todas las p\u00e1ginas del sitio, de modo que evitamos tener que actualizar todas las p\u00e1ginas ante cualquier posible cambio en estos elementos.</p> <p>Para crear una plantilla en Blade, creamos un archivo normal y corriente (por ejemplo, <code>plantilla.blade.php</code>), en la carpeta de vistas, con el contenido general de la plantilla. En aquellas zonas del documento donde vamos a permitir contenido variable dependiendo de la vista en s\u00ed, a\u00f1adimos una secci\u00f3n llamada @yield, con un nombre asociado. Nuestra plantilla podr\u00eda ser esta (notar que se permiten varios <code>@yield</code> con diferentes nombres):</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;\n      @yield('titulo')\n    &lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;nav&gt;\n      &lt;!-- ... Men\u00fa de navegaci\u00f3n --&gt;\n    &lt;/nav&gt;\n    @yield('contenido')\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Despu\u00e9s, en cada vista en que queramos utilizar esta plantilla, a\u00f1adimos la directiva @extends de Blade, indicando el nombre de plantilla que vamos a utilizar. </p> <p>Con la directiva @section, seguida del nombre de la secci\u00f3n, definimos el contenido para cada uno de los <code>@yield</code> que se hayan indicado en la plantilla. Finalizaremos cada secci\u00f3n con la directiva <code>@endsection</code>. As\u00ed, para nuestra p\u00e1gina inicial (<code>inicio.blade.php</code>), el contenido puede ser ahora \u00e9ste:</p> <pre><code>@extends('plantilla')\n\n@section('titulo', 'Inicio')\n\n@section('contenido')\n    &lt;h1&gt;P\u00e1gina de inicio&lt;/h1&gt;\n    &lt;p&gt;Bienvenido/a {{ $nombre }}&lt;/p&gt;\n@endsection\n</code></pre> <p> </p> <p>A la directiva <code>@section</code> se le puede pasar un segundo par\u00e1metro con el contenido de esa secci\u00f3n, y en este caso no es necesario cerrarla con <code>@endsection</code>. Esta opci\u00f3n es \u00fatil para contenidos donde no interesen caracteres en blanco o saltos de l\u00ednea innecesarios al principio o al final, como ocurre en el ejemplo anterior con el t\u00edtulo (title) de la p\u00e1gina. Del mismo modo, nuestra vista para el listado de libros quedar\u00eda de esta forma: <pre><code>@extends('plantilla')\n\n@section('titulo', 'Listado de libros')\n\n@section('contenido')\n    &lt;h1&gt;Listado de libros&lt;/h1&gt;\n    &lt;ul&gt;\n        @forelse ($libros as $libro)\n            &lt;li&gt;{{ $libro[\"titulo\"] }} ({{ $libro[\"autor\"] }})&lt;/li&gt;\n            @empty\n            &lt;li&gt;No se encontraron libros&lt;/li&gt;\n        @endforelse\n    &lt;/ul&gt;\n@endsection\n</code></pre></p>"},{"location":"ut07/ut0706/#24-incluir-vistas-dentro-de-otras","title":"2.4. Incluir vistas dentro de otras","text":"<p>Tambi\u00e9n suele ser habitual definir contenidos parciales (se suelen definir en una subcarpeta <code>partials</code> dentro de <code>resources/views</code>), e incluirlos en las vistas. Para esto, utilizaremos la directiva @include de Blade.</p> <p>Por ejemplo, vamos a definir un men\u00fa de navegaci\u00f3n. Supongamos que dicho men\u00fa est\u00e1 en el archivo <code>resources/views/partials/nav.blade.php</code>:</p> <pre><code>&lt;nav&gt;\n    &lt;a href=\"{{ route('inicio') }}\"&gt;Inicio&lt;/a&gt;\n    &amp;nbsp;|&amp;nbsp;\n    &lt;a href=\"{{ route('listado_libros') }}\"&gt;Listado de libros&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre> <p>Notar que, en este ejemplo, se supone que a cada una de las dos rutas implicadas les hemos asignado los nombres \u201cinicio\u201d y \u201clibros_listado\u201d, respectivamente, empleando el m\u00e9todo <code>name</code> al definir la ruta. De lo contrario, las propiedades <code>href</code> de los dos enlaces deber\u00edan apuntar a <code>/</code> y <code>/listado</code>, respectivamente.</p> <p>Para incluir el men\u00fa en la plantilla anterior, podemos hacer esto (y eliminar\u00edamos el elemento <code>&lt;nav&gt;</code> de la plantilla):</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;\n        @yield('titulo')\n        &lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        @include('partials.nav')\n        @yield('contenido')\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Como puede verse, podemos utilizar tanto el punto como la barra para indicar el separador de carpeta en la vista.</p>"},{"location":"ut07/ut0706/#25-estructurar-vistas-en-carpetas","title":"2.5. Estructurar vistas en carpetas","text":"<p>Cuando la aplicaci\u00f3n es algo compleja, pueden ser necesarias varias vistas, y tenerlas todas en una misma carpeta puede ser algo dif\u00edcil de gestionar. Es habitual, como iremos viendo en sesiones posteriores, estructurar las vistas de la carpeta <code>resources/views</code> en subcarpetas, de modo que, por ejemplo, cada carpeta se refiera a las vistas de una entidad o modelo de la aplicaci\u00f3n, o a un controlador espec\u00edfico. </p> Proyecto biblioteca (7): <p>De momento, en nuestro ejemplo de la biblioteca, vamos a ubicar la vista <code>listado.blade.php</code> en una subcarpeta <code>libros</code>, de modo que en la ruta que renderiza esta vista, ahora deberemos indicar tambi\u00e9n el nombre de la subcarpeta: <pre><code>Route::get('listado', function() {\n    // ...\n    return view('libros.listado', compact('libros'));\n})-&gt;name('listado_libros');\n</code></pre></p> <p>Observa</p> <p>La ruta o path que se indica ser\u00e1 carpeta.vista (separaci\u00f3n mediante un puto . y sin la extensi\u00f3n <code>blade.php</code> la vista).</p> <p>Ahora mismo, en nuestra carpeta <code>resources/views</code> del proyecto de la biblioteca tendremos \u00fanicamente la plantilla base y la p\u00e1gina de inicio (y la vista <code>welcome.blade.php</code>, que de hecho ya podemos borrar si queremos). El resto de vistas las iremos estructurando en subcarpetas.</p>"},{"location":"ut07/ut0706/#26-vistas-para-paginas-de-error","title":"2.6. Vistas para p\u00e1ginas de error","text":"<p>A lo largo de estas sesiones, algunas acciones que hagamos provocar\u00e1n p\u00e1ginas de error con determinados c\u00f3digos, como por ejemplo 404 para p\u00e1ginas no encontradas. </p> <p>Si queremos definir el aspecto y estructura de estas p\u00e1ginas, basta con crear la vista correspondiente en la carpeta <code>resources/views/errors</code>, por ejemplo, <code>resources/views/errors/404.blade.php</code> para el error 404 (anteponemos el c\u00f3digo de error al sufijo de la vista).</p> <pre><code>@extends('plantilla')\n\n@section('titulo', 'Error 404')\n\n@section('contenido')\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;Documento no encontrado&lt;/p&gt;\n@endsection\n</code></pre> <p>Podemos simular con la herramienta abort(numero) el error anterior: <pre><code>Route::get('/test404', function () {\n    abort(404);\n});\n</code></pre> o tambi\u00e9n insertar una URL que no exista: /pagina_inexistente.</p> Ejercicios <ul> <li><code>Ejercicio 5</code>.</li> </ul>"},{"location":"ut07/ut0707/","title":"Ut0707","text":"<p>Ahora que ya tenemos una visi\u00f3n bastante completa de lo que el motor de plantillas Blade puede ofrecernos, llega el momento de terminar de perfilar nuestras vistas. Hasta ahora no hemos hablado nada de estilos CSS, y eso es algo que toda vista que se precie debe incluir. Adem\u00e1s, tambi\u00e9n puede ser necesario en algunos casos incluir alguna librer\u00eda JavaScript en el lado del cliente para ciertos procesamientos. Veremos c\u00f3mo gestiona Laravel estos recursos.</p>"},{"location":"ut07/ut0707/#1-infraestructura-para-archivos-css-y-javascript","title":"1. Infraestructura para archivos CSS y JavaScript","text":"<p>Para poder a\u00f1adir estilos CSS o archivos JavaScript a nuestro proyecto Laravel, el framework proporciona ya unos archivos donde centralizar estas opciones.</p> <p>En primer lugar, debemos tener en cuenta que todas las dependencias de librer\u00edas en la parte del cliente (JavaScript) se centralizan en el archivo <code>package.json</code>, disponible en la ra\u00edz del proyecto. Inicialmente cuenta ya con una serie de dependencias prea\u00f1adidas. Algunas de ellas son importantes, como <code>vite</code> (o <code>laravel-mix</code>, dependiendo de la versi\u00f3n de Laravel que tengamos instalada), y otras puede que no las necesitemos y las podamos borrar. Es recomendable instalar las dependencias cuando creamos el proyecto, para tenerlas disponibles, con este comando:</p> <pre><code>npm install\n</code></pre> <p>Se crear\u00e1 una carpeta <code>node_modules</code> en la ra\u00edz del proyecto con las dependencias instaladas. Esta carpeta es similar a la carpeta <code>vendor</code>, tambi\u00e9n en la ra\u00edz del proyecto, pero esta \u00faltima contiene dependencias PHP (no JavaScript). Ninguna de estas carpetas debe subirse a un repositorio git, ya que ambas pueden reconstruirse con el correspondiente comando de instalaci\u00f3n de npm o de composer, seg\u00fan el caso y, adem\u00e1s, pueden ocupar mucho espacio.</p> <p>Para centralizar los estilos CSS, tenemos el archivo <code>resources/css/app.css</code>, o bien <code>resources/sass/app.scss</code> (dependiendo de la versi\u00f3n de Laravel que usemos), donde podemos definir estilos CSS propios, o incorporar librer\u00edas externas como veremos despu\u00e9s, utilizando o bien CSS plano o bien Sass. Por ejemplo, podemos editar este archivo para a\u00f1adir alg\u00fan estilo propio para el cuerpo del documento:</p> <pre><code>body\n{\n    background-color: #CCC;\n    font-family: Arial;\n    text-align: justify;\n}\n</code></pre> <p>Por otro lado, tenemos el archivo <code>resources/js/app.js</code> para incluir nuestras propias funciones en JavaScript, o incluso funcionalidades externas (a trav\u00e9s de jQuery, por ejemplo).</p>"},{"location":"ut07/ut0707/#2-generacion-automatica-de-css-y-javascript","title":"2. Generaci\u00f3n autom\u00e1tica de CSS y JavaScript","text":"<p>Estos dos archivos anteriores (<code>resources/css/app.css</code> y <code>resources/js/app.js</code>) necesitan ser procesados para generar el c\u00f3digo resultante (CSS y JavaScript) que formar\u00e1 parte de la aplicaci\u00f3n, aunando todas las librer\u00edas y funciones que hayamos especificado. Para esto, tenemos dos opciones dependiendo del gestor de frontend que se tenga instalado.</p> Generaci\u00f3n con Vite <p>Desde alguna versi\u00f3n intermedia de Laravel 9, el gestor frontend por defecto que se incorpora es <code>vite</code>, junto con un archivo de configuraci\u00f3n en la ra\u00edz del proyecto llamado <code>vite.config.js</code>. Debemos especificar en este archivo las rutas hacia los archivos CSS y JavaScript que queramos incorporar a la aplicaci\u00f3n, aunque vienen por defecto ya incluidos los que hemos mencionado anteriormente:</p> <pre><code>...\n\nexport default defineConfig({\n    plugins: [\n        laravel({\n            input: ['resources/css/app.css', 'resources/js/app.js'],\n            refresh: true\n        }),\n    ],\n});\n</code></pre> <p>Si queremos incluir cualquiera de estos archivos en nuestras p\u00e1ginas, podemos emplear la directiva <code>@vite</code> con la URL relativa. Por ejemplo:</p> <pre><code>&lt;!doctype html&gt;\n&lt;head&gt;\n    ...\n    @vite(['resources/css/app.css', 'resources/js/app.js'])\n&lt;/head&gt;\n</code></pre> <p>Ejecutando el comando <code>npm run dev</code> pondremos en marcha el servidor Vite, \u00fatil si estamos desarrollando y probando la web. Si ejecutamos <code>npm run build</code> generaremos ya las rutas preparadas para producci\u00f3n. El primer comando, aunque puede resultar \u00fatil, remite a una URL alternativa para el proyecto que no siempre funciona correctamente, as\u00ed que lo m\u00e1s c\u00f3modo es lanzar <code>npm run build</code> y que genere las dependencias adecuadas.</p> Generaci\u00f3n con Laravel mix <p>Hasta las primeras versiones de Laravel 9, se empleaba el gestor <code>laravel-mix</code> como generador de toda la parte de frontend. En este caso, se tiene el archivo <code>webpack.mix.js</code> en la ra\u00edz del proyecto, que emplea la herramienta WebPack para compilar, empaquetar y minificar estos archivos resultado CSS y JavaScript.</p> <pre><code>mix.js('resources/js/app.js', 'public/js')\n   .postCss('resources/css/app.css', 'public/css', [\n    ...\n    ]);\n</code></pre> <p>Como podemos intuir, desde este archivo <code>webpack.mix.js</code> se tomar\u00e1 todo lo que hay en el archivo <code>resources/js/app.js</code> y se generar\u00e1 un archivo optimizado ubicado en <code>public/js/app.js</code>. De forma similar, se tomar\u00e1n los estilos definidos en <code>resources/sass/app.scss</code> o en <code>resources/css/app.css</code> (dependiendo de la versi\u00f3n de Laravel) y se generar\u00e1 un archivo CSS optimizado en <code>public/css/app.css</code>. Para desencadenar este proceso, Laravel y WebPack se valen de la librer\u00eda <code>laravel-mix</code>, incluida en el archivo <code>package.json</code>. Por eso es importante esta librer\u00eda, y por eso debemos dejarla instalada previamente con el comando <code>npm install</code> que hemos explicado antes. Una vez instalada, para generar los CSS y JavaScript debemos ejecutar este comando desde la ra\u00edz del proyecto:</p> <pre><code>npm run dev\n</code></pre> <p>Esto generar\u00e1 los archivos <code>public/css/app.css</code> y <code>public/js/app.js</code>, y despu\u00e9s ya podremos a\u00f1adir estos archivos en nuestras vistas, con algo como esto, respectivamente:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css/app.css\"&gt;\n        &lt;script type=\"text/javascript\" src=\"/js/app.js\"&gt;\n        &lt;/script&gt;\n//...\n</code></pre> Incluir estilos Tailwind CSS <p>Tailwind CSS es un framework de dise\u00f1o de bajo nivel que te permite construir interfaces personalizadas mediante clases utilitarias. A diferencia de otros frameworks como Bootstrap, Tailwind te da el control total sobre el dise\u00f1o de tus vistas, permiti\u00e9ndote crear un sitio web \u00fanico y flexible.</p> <p>Para incluir Tailwind CSS en un proyecto Laravel, podemos utilizar Vite, que es la herramienta de compilaci\u00f3n recomendada desde Laravel 9. Vite se integra perfectamente con Tailwind CSS, permiti\u00e9ndote aprovechar todas sus caracter\u00edsticas.</p> <p>Seguimiento de los siguientes pasos:</p> <p>Los siguientes pasos 1, 2 y 3 no ser\u00e1n necesarios si hemos creado un proyecto Laravel Breeze o Laravel Jetstream.</p>"},{"location":"ut07/ut0707/#1-instalacion-de-tailwind-css-en-laravel","title":"1. Instalaci\u00f3n de Tailwind CSS en Laravel","text":"<p>Primero, necesitamos instalar las dependencias necesarias a trav\u00e9s de npm. Abre una terminal y navega hasta la ra\u00edz de tu proyecto Laravel, luego ejecuta el siguiente comando:</p> <p><pre><code>npm install -D tailwindcss postcss autoprefixer\n</code></pre> Este comando instalar\u00e1 Tailwind CSS, junto con PostCSS y Autoprefixer, que son herramientas necesarias para compilar los estilos de manera eficiente.</p>"},{"location":"ut07/ut0707/#2-configuracion-de-tailwind-css","title":"2. Configuraci\u00f3n de Tailwind CSS","text":"<p>Una vez instalada la librer\u00eda, debes crear los archivos de configuraci\u00f3n de Tailwind CSS. Puedes generar autom\u00e1ticamente el archivo de configuraci\u00f3n ejecutando el siguiente comando:</p> <pre><code>npx tailwindcss init\n</code></pre> <p>Este comando generar\u00e1 un archivo tailwind.config.js en la ra\u00edz del proyecto, que podr\u00e1s personalizar si es necesario. Un archivo de configuraci\u00f3n b\u00e1sico se ver\u00e1 algo as\u00ed:</p> <p><pre><code>module.exports = {\n  content: [\n    \"./resources/views/**/*.blade.php\",\n    \"./resources/js/**/*.js\",\n    \"./resources/css/**/*.css\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n</code></pre> El campo content es muy importante, ya que le dice a Tailwind qu\u00e9 archivos deben ser escaneados para clases CSS utilizadas. Aseg\u00farate de incluir las rutas correctas para que Tailwind pueda purgar las clases no utilizadas cuando hagas la compilaci\u00f3n.</p>"},{"location":"ut07/ut0707/#3-configuracion-de-vite","title":"3. Configuraci\u00f3n de Vite","text":"<p>Si est\u00e1s utilizando Vite (que es la opci\u00f3n predeterminada desde Laravel 9), necesitas asegurarte de que el archivo vite.config.js est\u00e9 configurado correctamente para procesar tus archivos CSS.</p> <p>Abre el archivo vite.config.js y aseg\u00farate de que tiene el siguiente contenido:</p> <pre><code>import { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n  plugins: [\n    laravel({\n      input: ['resources/css/app.css', 'resources/js/app.js'],\n      refresh: true,\n    }),\n  ],\n});\n</code></pre>"},{"location":"ut07/ut0707/#4-creacion-del-archivo-css","title":"4. Creaci\u00f3n del archivo CSS","text":"<p>Ahora, en lugar de trabajar con un archivo app.scss como en Bootstrap, trabajar\u00e1s con un archivo CSS en resources/css/app.css. Abre este archivo y agrega las directivas de Tailwind para importar sus estilos base, componentes y utilidades:</p> <p><pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> Estas directivas le indican a Tailwind que cargue sus estilos predeterminados. Puedes agregar estilos personalizados debajo de estas directivas si lo necesitas, por ejemplo:</p> <pre><code>/* Estilos personalizados */\nbody {\n  background-color: #f0f0f0;\n  font-family: 'Arial', sans-serif;\n}\n</code></pre>"},{"location":"ut07/ut0707/#5-actualizar-la-vista-para-incluir-tailwind","title":"5. Actualizar la vista para incluir Tailwind","text":"<p>En tu vista Blade, aseg\u00farate de que est\u00e9s cargando el archivo CSS correctamente con la directiva @vite. Abre tu archivo resources/views/layouts/app.blade.php (o el archivo Blade que est\u00e9s utilizando) y agrega la siguiente l\u00ednea en la secci\u00f3n  para cargar el archivo CSS compilado por Vite: <pre><code>&lt;!doctype html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Mi Proyecto con Tailwind CSS&lt;/title&gt;\n    @vite(['resources/css/app.css', 'resources/js/app.js'])\n&lt;/head&gt;\n</code></pre>"},{"location":"ut07/ut0707/#6-compilacion-de-los-recursos","title":"6. Compilaci\u00f3n de los recursos","text":"<p>Una vez que todo est\u00e9 configurado, es hora de compilar los recursos. Ejecuta los siguientes comandos para instalar las dependencias de npm y generar los archivos CSS y JS optimizados:</p> <p><pre><code>npm install\nnpm run dev\n</code></pre> El comando npm run dev iniciar\u00e1 el servidor de desarrollo de Vite y compilar\u00e1 tus archivos CSS y JS. Si deseas generar los archivos optimizados para producci\u00f3n, usa:</p> <pre><code>npm run build\n</code></pre>"},{"location":"ut07/ut0707/#7-verificacion","title":"7. Verificaci\u00f3n","text":"<p>Con todo configurado y compilado, puedes verificar que Tailwind CSS est\u00e9 funcionando correctamente en tu proyecto. Si todo est\u00e1 bien, podr\u00e1s usar las clases utilitarias de Tailwind en tus vistas Blade, como por ejemplo:</p> <pre><code>&lt;div class=\"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md space-y-4\"&gt;\n    &lt;h2 class=\"text-center text-2xl font-bold text-gray-800\"&gt;\u00a1Bienvenido!&lt;/h2&gt;\n    &lt;p class=\"text-gray-600\"&gt;Este es un ejemplo usando Tailwind CSS en Laravel.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> Incluir estilos Bootstrap <p>Uno de los frameworks de dise\u00f1o web m\u00e1s utilizados a la hora de elaborar una web es Bootstrap. En este curso no vamos a dar demasiadas nociones sobre \u00e9l, pero s\u00ed utilizaremos algunas pinceladas para que nuestras vistas tengan un aspecto m\u00e1s profesional.</p> <p>Para incluir este framework en Laravel, debemos incluir una librer\u00eda en el servidor llamada ui, que se encarga de incorporar distintas herramientas para dise\u00f1o de interfaces de usuario (UI, User Interface).</p> <pre><code>composer require laravel/ui:*\n</code></pre> <p>La expresi\u00f3n <code>:*</code> al final del comando es para que descargue la \u00faltima versi\u00f3n disponible compatible con el proyecto Laravel actual.</p> <p>Una vez a\u00f1adida la herramienta, la podemos emplear a trav\u00e9s del comando <code>artisan</code> para incorporar Bootstrap al proyecto:</p> <pre><code>php artisan ui bootstrap\n</code></pre> <p>Esto incorporar\u00e1 Bootstrap al archivo <code>package.json</code>, en la secci\u00f3n de dependencias\u2026</p> <pre><code>\"devDependencies\": {\n    ...\n    \"bootstrap\": \"^5.2.3\",\n    ...\n}\n</code></pre> <p>\u2026 y tambi\u00e9n a\u00f1adir\u00e1 un enlace a dicha librer\u00eda en el archivo <code>resources/sass/app.scss</code>, para que podamos generar un archivo CSS optimizado con Bootstrap incluido:</p> <pre><code> ...\n @import '~bootstrap/scss/bootstrap';\n</code></pre> <p>Si utilizamos Bootstrap, entonces el archivo <code>resources/css/app.css</code> dejar\u00e1 de tener efecto, ya que para poder incorporar los estilos de Bootstrap a nuestro proyecto, se trabaja con Sass a trav\u00e9s de <code>resources/sass/app.scss</code>. Nuestro archivo <code>webpack.mix.js</code> o <code>vite.config.js</code> tambi\u00e9n se habr\u00e1 actualizado en este sentido, y deberemos colocar todos nuestros estilos CSS propios en el archivo <code>app.scss</code>:</p> <pre><code> ...\n @import '~bootstrap/scss/bootstrap';\n\nbody\n{\n    background-color: #CCC;\n    font-family: Arial;\n    text-align: justify;\n}\n</code></pre> <p>En el caso de usar Vite, deberemos actualizar la URL correspondiente al archivo CSS en las cabeceras donde hayamos incluido la directiva <code>@vite</code>, de este modo:</p> <pre><code>&lt;!doctype html&gt;\n&lt;head&gt;\n    ...\n    @vite(['resources/sass/app.scss', 'resources/js/app.js'])\n&lt;/head&gt;\n</code></pre> <p>Para finalizar, debemos ejecutar nuevamente las instrucciones:</p> <pre><code>npm install\nnpm run build\n</code></pre> <p>La primera instrucci\u00f3n debe ejecutarse s\u00f3lo una vez, y descargar\u00e1 e instalar\u00e1 Bootstrap en el proyecto (en la subcarpeta node_modules), y la segunda generar\u00e1 de nuevo los archivos CSS y JavaScript optimizados, incluyendo en ellos la librer\u00eda Bootstrap. Con esto ya tendremos disponibles las clases y estilos de Bootstrap para nuestras vistas.</p>"},{"location":"ut07/ut070XCRUD/","title":"Instalaci\u00f3n voyager","text":"<p>Aqu\u00ed tienes los pasos detallados para instalar Laravel Voyager en tu proyecto Laravel:</p>"},{"location":"ut07/ut070XCRUD/#1-requisitos-previos","title":"1. Requisitos Previos","text":"<p>Aseg\u00farate de tener un proyecto de Laravel configurado y una base de datos conectada. Tambi\u00e9n verifica que el proyecto est\u00e9 en una versi\u00f3n compatible con Voyager (Laravel 6 o superior).</p> <p>Cuando vayas a crear el proyecto Laravel (<code>laravel new nombre_proyecto</code>) es preferible crearlo <code>breeze</code>.</p>"},{"location":"ut07/ut070XCRUD/#2-instalar-el-paquete-voyager","title":"2. Instalar el Paquete Voyager","text":"<p>Ejecuta el siguiente comando en el terminal en el directorio de tu proyecto para instalar Voyager usando Composer:</p> <pre><code>composer require tcg/voyager\n</code></pre>"},{"location":"ut07/ut070XCRUD/#3-instalar-voyager","title":"3. Instalar Voyager","text":"<p>Despu\u00e9s de instalar el paquete, ejecuta el comando de instalaci\u00f3n de Voyager. Puedes optar por incluir datos de ejemplo si lo deseas, usando la opci\u00f3n <code>--with-dummy</code>:</p> <pre><code>php artisan voyager:install\n</code></pre> <p>Si quieres incluir datos de ejemplo para probar el funcionamiento de Voyager, usa:</p> <pre><code>php artisan voyager:install --with-dummy\n</code></pre>"},{"location":"ut07/ut070XCRUD/#4-crear-un-usuario-administrador","title":"4. Crear un Usuario Administrador","text":"<p>Voyager requiere un usuario administrador para acceder al panel de control. Si a\u00fan no tienes un usuario creado, puedes generar uno ejecutando este comando:</p> <pre><code>php artisan voyager:admin tu_correo@ejemplo.com --create\n</code></pre> <p>Durante este proceso, se te pedir\u00e1 que ingreses un nombre y una contrase\u00f1a para el usuario administrador.</p> <p>Si produce ERROR:</p> <ol> <li>Abre Tinker ejecutando:</li> </ol> <pre><code>php artisan tinker\n</code></pre> <ol> <li>Crea un nuevo usuario y as\u00edgnale el rol de administrador (suponiendo que el <code>id</code> del rol de <code>admin</code> es <code>1</code>):</li> </ol> <pre><code>$user = new \\App\\Models\\User;\n$user-&gt;name = 'dwes';\n$user-&gt;email = 'arturoblasco@iesmre.com';\n$user-&gt;password = bcrypt('tu_contrase\u00f1a');  // Reemplaza 'tu_contrase\u00f1a' con la contrase\u00f1a deseada\n$user-&gt;role_id = 1; // ID del rol de admin en la tabla roles\n$user-&gt;save();\n</code></pre> <ol> <li>Sal de Tinker:</li> </ol> <pre><code>exit\n</code></pre> <p>Este m\u00e9todo te permite configurar manualmente el usuario con el rol adecuado si el comando <code>voyager:admin</code> no asigna el <code>role_id</code> de forma autom\u00e1tica.</p>"},{"location":"ut07/ut070XCRUD/#5-migrar-la-base-de-datos","title":"5. Migrar la Base de Datos","text":"<p>Voyager crea tablas adicionales en la base de datos para manejar usuarios, roles, y permisos. Ejecuta el siguiente comando para migrar estas tablas a tu base de datos:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"ut07/ut070XCRUD/#6-acceder-al-panel-de-control-de-voyager","title":"6. Acceder al Panel de Control de Voyager","text":"<p>Una vez completados los pasos anteriores, puedes acceder al panel de administraci\u00f3n de Voyager visitando la URL <code>/admin</code> en tu navegador:</p> <pre><code>http://tudominio.com/admin\n</code></pre> <p>Nota: Antes, crear el Modelo:</p> <pre><code>php artisan make:model Producto\n</code></pre> <p>Ingresa las credenciales del usuario administrador que creaste para iniciar sesi\u00f3n.</p>"},{"location":"ut07/ut070XCRUD/#resumen-de-comandos-para-instalar-voyager","title":"Resumen de Comandos para Instalar Voyager","text":"<pre><code>composer require tcg/voyager\nphp artisan voyager:install\nphp artisan voyager:admin your-email@example.com --create\nphp artisan migrate\n</code></pre> <p>Voyager ahora estar\u00e1 listo y configurado en tu proyecto Laravel. \u00a1Puedes comenzar a crear y gestionar CRUD y usuarios desde el panel de administraci\u00f3n!</p>"},{"location":"ut07/ut070XCRUD/#ejemplo-crear-crud","title":"Ejemplo crear CRUD","text":"<p>Aqu\u00ed tienes un ejemplo paso a paso para crear un CRUD en Voyager para una tabla llamada <code>productos</code>. Supongamos que queremos gestionar una lista de productos en nuestro panel de administraci\u00f3n.</p>"},{"location":"ut07/ut070XCRUD/#paso-1-crear-la-tabla-productos","title":"Paso 1: Crear la Tabla <code>productos</code>","text":"<p>Primero, crea una migraci\u00f3n para la tabla <code>productos</code> en tu proyecto Laravel. En el terminal, ejecuta:</p> <pre><code>php artisan make:migration create_productos_table --create=productos\n</code></pre> <p>Edita la migraci\u00f3n para que tenga los campos necesarios. Por ejemplo, podr\u00edamos a\u00f1adir los campos <code>nombre</code>, <code>descripcion</code>, <code>precio</code>, y <code>cantidad</code>:</p> <pre><code>public function up()\n{\n    Schema::create('productos', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('nombre');\n        $table-&gt;text('descripcion')-&gt;nullable();\n        $table-&gt;decimal('precio', 8, 2);\n        $table-&gt;integer('cantidad');\n        $table-&gt;timestamps();\n    });\n}\n</code></pre> <p>Luego, ejecuta las migraciones para crear la tabla en la base de datos:</p> <pre><code>php artisan migrate\n</code></pre>"},{"location":"ut07/ut070XCRUD/#paso-2-agregar-el-crud-para-la-tabla-productos-en-voyager","title":"Paso 2: Agregar el CRUD para la Tabla <code>productos</code> en Voyager","text":"<ol> <li>Accede al panel de administraci\u00f3n de Voyager en <code>http://tudominio.com/admin</code> e inicia sesi\u00f3n.</li> <li>En el men\u00fa lateral, selecciona Tools (Herramientas) y luego haz clic en Database (Base de datos).</li> <li>Localiza la tabla <code>productos</code> en la lista de tablas y haz clic en el bot\u00f3n Add BREAD to this table junto a ella.</li> </ol>"},{"location":"ut07/ut070XCRUD/#paso-3-configurar-el-crud-en-voyager","title":"Paso 3: Configurar el CRUD en Voyager","text":"<p>Al hacer clic en Add BREAD to this table, ver\u00e1s la pantalla de configuraci\u00f3n. Configura los siguientes campos:</p> <ul> <li>Display Name Singular: Producto</li> <li>Display Name Plural: Productos</li> <li>Slug: productos</li> <li>Model Name: App\\Models\\Producto (si tienes un modelo para la tabla, agr\u00e9galo aqu\u00ed; de lo contrario, Voyager generar\u00e1 uno autom\u00e1ticamente)</li> <li>Generate Permissions: Marca esta casilla para crear permisos autom\u00e1ticamente para este CRUD.</li> </ul>"},{"location":"ut07/ut070XCRUD/#paso-4-configurar-los-campos-del-crud","title":"Paso 4: Configurar los Campos del CRUD","text":"<p>En la parte inferior, ver\u00e1s una lista de los campos en la tabla <code>productos</code>. Aqu\u00ed puedes configurar c\u00f3mo se mostrar\u00e1 cada campo en el panel de administraci\u00f3n:</p> <ol> <li>ID: Mantenlo como est\u00e1, generalmente solo visible.</li> <li>Nombre:</li> <li>Display Name: Nombre</li> <li>Input Type: Texto</li> <li>Marcado para \"Browse\", \"Read\", \"Edit\", y \"Add\".</li> <li>Descripcion:</li> <li>Display Name: Descripci\u00f3n</li> <li>Input Type: \u00c1rea de texto (textarea)</li> <li>Marcado para \"Read\", \"Edit\", y \"Add\".</li> <li>Precio:</li> <li>Display Name: Precio</li> <li>Input Type: N\u00famero (number)</li> <li>Marcado para \"Browse\", \"Read\", \"Edit\", y \"Add\".</li> <li>Cantidad:</li> <li>Display Name: Cantidad</li> <li>Input Type: N\u00famero (number)</li> <li>Marcado para \"Browse\", \"Read\", \"Edit\", y \"Add\".</li> <li>Timestamps  (<code>created_at</code>  y  <code>updated_at</code>):</li> <li>Puedes dejarlos sin marcar o solo en \"Read\" para ver la fecha de creaci\u00f3n y \u00faltima actualizaci\u00f3n del registro.</li> </ol> <p>Una vez que hayas configurado los campos, haz clic en Submit para guardar el CRUD.</p>"},{"location":"ut07/ut070XCRUD/#paso-5-probar-el-crud","title":"Paso 5: Probar el CRUD","text":"<p>En el men\u00fa lateral del panel de Voyager, ver\u00e1s una nueva secci\u00f3n llamada Productos. Al hacer clic all\u00ed, podr\u00e1s:</p> <ul> <li>Listar los productos (ver registros en la tabla).</li> <li>Agregar nuevos productos.</li> <li>Editar productos existentes.</li> <li>Eliminar productos.</li> </ul> <p>Este CRUD te permite gestionar la tabla <code>productos</code> desde el panel de administraci\u00f3n de Voyager, sin necesidad de escribir controladores, vistas o rutas manualmente.</p>"},{"location":"ut07/ut070XCRUD/#instalar-filament-admin","title":"Instalar Filament Admin","text":"<p>Instalar Filament Admin en un proyecto Laravel es bastante sencillo. Aqu\u00ed tienes los pasos b\u00e1sicos para instalarlo y configurar un CRUD b\u00e1sico.</p>"},{"location":"ut07/ut070XCRUD/#1-requisitos-previos_1","title":"1. Requisitos Previos","text":"<ul> <li>Tener Laravel 8 o superior ya instalado y configurado.</li> <li>Contar con PHP 8 o superior.</li> </ul>"},{"location":"ut07/ut070XCRUD/#2-instalacion-de-filament-admin","title":"2. Instalaci\u00f3n de Filament Admin","text":"<ol> <li>Instalar el paquete usando Composer:</li> </ol> <pre><code>composer require filament/filament\n</code></pre> <p>Si la anterior orden produce error, puede deberse que <code>filament/support</code> requiere la extensi\u00f3n <code>ext-intl</code> de PHP, la cual no est\u00e1 habilitada en tu sistema. La extensi\u00f3n <code>intl</code> es necesaria para manejar internamente formatos de idioma, moneda y otras configuraciones regionales, algo que Filament necesita para funcionar correctamente. Vamos a solucionarlo en unos pasos.</p> <p>Soluci\u00f3n: Habilitar la Extensi\u00f3n <code>intl</code> en PHP</p> <ul> <li> <p>Abre el archivo de configuraci\u00f3n de PHP (<code>php.ini</code>). En tu caso, parece que est\u00e1 en <code>C:\\xampp\\php\\php.ini</code>.</p> </li> <li> <p>Busca la l\u00ednea que contiene: </p> </li> </ul> <pre><code>;extension=intl\n</code></pre> <p>y quita el punto y coma (<code>;</code>) al inicio de la l\u00ednea para habilitar la extensi\u00f3n:</p> <pre><code>extension=intl\n</code></pre> <ul> <li>Guarda el archivo y reinicia el servidor de Apache en XAMPP para que los cambios surtan efecto.</li> </ul> <ol> <li>Publicar los archivos de configuraci\u00f3n y migraciones de Filament: Esto es opcional, pero permite personalizar aspectos como la URL de acceso al panel de administraci\u00f3n.</li> </ol> <pre><code>php artisan vendor:publish --tag=filament-config\n</code></pre> <ol> <li> <p>Configurar la ruta de Filament (opcional): En el archivo <code>config/filament.php</code>, puedes personalizar la URL del panel de administraci\u00f3n. Por defecto, estar\u00e1 en <code>/admin</code>.</p> </li> <li> <p>Crear un usuario administrador: Si a\u00fan no tienes un sistema de autenticaci\u00f3n en tu proyecto, puedes generarlo con:</p> </li> </ol> <pre><code>php artisan make:auth\n</code></pre> <p>Para crear un usuario que pueda acceder a Filament, ejecuta:</p> <pre><code>php artisan filament:install --panels\nphp artisan make:filament-user\n</code></pre> <p>Esto te pedir\u00e1 ingresar un email, contrase\u00f1a y nombre para el usuario admin.</p>"},{"location":"ut07/ut070XCRUD/#3-ejemplo-de-crud-con-filament","title":"3. Ejemplo de CRUD con Filament","text":"<p>Supongamos que quieres crear un CRUD para gestionar productos en tu aplicaci\u00f3n.</p> <ol> <li>Crear un modelo y migraci\u00f3n de productos:</li> </ol> <pre><code>php artisan make:model Product -m\n</code></pre> <ol> <li>Definir la estructura de la tabla de productos en el archivo de migraci\u00f3n <code>database/migrations/xxxx_xx_xx_create_products_table.php</code>:</li> </ol> <pre><code>public function up()\n{\n    Schema::create('products', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('name');\n        $table-&gt;text('description')-&gt;nullable();\n        $table-&gt;decimal('price', 8, 2);\n        $table-&gt;integer('stock');\n        $table-&gt;timestamps();\n    });\n}\n</code></pre> <ol> <li>Ejecutar la migraci\u00f3n:</li> </ol> <pre><code>php artisan migrate\n</code></pre> <ol> <li>Crear un Resource para el CRUD en Filament: Filament facilita la creaci\u00f3n de CRUDs mediante Resources. Ejecuta el siguiente comando para generar un resource de productos:</li> </ol> <pre><code>php artisan make:filament-resource Product\n</code></pre> <p>Esto crear\u00e1 una clase en <code>App\\Filament\\Resources\\ProductResource</code> que contiene:</p> <ul> <li>Formularios de creaci\u00f3n y edici\u00f3n.</li> <li>Tabla de productos.</li> <li> <p>Opciones para ver, editar, y eliminar productos.</p> </li> <li> <p>Configurar el Resource: Abre el archivo <code>App\\Filament\\Resources\\ProductResource.php</code> y ver\u00e1s m\u00e9todos para definir los campos de formulario y las columnas de la tabla. Aqu\u00ed hay un ejemplo b\u00e1sico:</p> </li> </ul> <pre><code>use Filament\\Forms;\nuse Filament\\Tables;\nuse Filament\\Resources\\Resource;\nuse Filament\\Resources\\Form;\nuse Filament\\Resources\\Table;\nuse App\\Models\\Product;\n\nclass ProductResource extends Resource\n{\n    protected static ?string $model = Product::class;\n\n    public static function form(Form $form): Form\n    {\n        return $form\n            -&gt;schema([\n                Forms\\Components\\TextInput::make('name')-&gt;required(),\n                Forms\\Components\\Textarea::make('description'),\n                Forms\\Components\\TextInput::make('price')-&gt;numeric()-&gt;required(),\n                Forms\\Components\\TextInput::make('stock')-&gt;numeric()-&gt;required(),\n            ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            -&gt;columns([\n                Tables\\Columns\\TextColumn::make('name'),\n                Tables\\Columns\\TextColumn::make('price')-&gt;money('USD'),\n                Tables\\Columns\\TextColumn::make('stock'),\n                Tables\\Columns\\TextColumn::make('created_at')-&gt;dateTime(),\n            ])\n            -&gt;filters([\n                //\n            ]);\n    }\n}\n</code></pre> <ol> <li>Acceder al CRUD en Filament: Ahora puedes acceder al CRUD de productos entrando a tu panel de administraci\u00f3n en <code>/admin</code> (o la ruta que hayas configurado) e iniciando sesi\u00f3n con el usuario admin que creaste. Una vez dentro, deber\u00edas ver la secci\u00f3n de Products en el men\u00fa.</li> </ol>"},{"location":"ut07/ut070XCRUD/#4-personalizacion-adicional","title":"4. Personalizaci\u00f3n Adicional","text":"<p>Filament te permite agregar m\u00e1s personalizaci\u00f3n a los formularios y las tablas, como agregar filtros, opciones de b\u00fasqueda, permisos espec\u00edficos, y otros elementos visuales.</p>"},{"location":"ut07/ut07ac/","title":"Ejercicios propuestos","text":""},{"location":"ut07/ut07ac/#ejercicio-1","title":"Ejercicio 1","text":"<p>Crea un proyecto Laravel llamado blog. </p> <p>Pon en marcha dicho proyecto con el comando <code>php artisan serve</code> e intenta acceder a \u00e9l desde el navegador. </p> <p>Captura la pantalla del navegador, de modo que incluya tanto la p\u00e1gina de inicio que se muestra como la URL de la barra de direcciones. Guarda la captura como <code>captura01</code>, en formato JPG o PNG.</p>"},{"location":"ut07/ut07ac/#ejercicio-2","title":"Ejercicio 2","text":"<p>Sobre el proyecto del ejercicio anterior, configura un virtual host en Apache con el mismo nombre de host (blog), y as\u00f3cialo a una IP local (la que t\u00fa quieras, por ejemplo, 127.0.0.6). Prueba a acceder a la p\u00e1gina de inicio de este nuevo proyecto (con http://blog o con http://127.0.0.6). </p> <p>Captura la pantalla del navegador, mostrando la p\u00e1gina de inicio y la URL de la barra de direcciones. Guarda la captura como <code>captura02</code>, en formato JPG o PNG. </p> <p>Proyecto desde Laragon</p> <p>Ten en cuenta que, si est\u00e1 utilizando Laragon  para tus proyectos Laravel, no har\u00e1 falta realizar este ejercicio 2; pues  este sistema ya crea un host virtual para cada uno de sus proyectos (por ejemplo: <code>http://blog.test</code>).</p>"},{"location":"ut07/ut07ac/#ejercicio-3","title":"Ejercicio 3","text":"<p>Sobre el proyecto blog, edita el fichero <code>routes/web.php</code> y a\u00f1ade:</p> <p>\u00a0\u00a0\u00a0\u00a0 a) Una nueva ruta a la URL <code>posts</code>. Al acceder a esta ruta (http://blog.test/posts), deberemos ver un mensaje con el texto \u201cListado de posts\u201d.</p> <p>\u00a0\u00a0\u00a0\u00a0 b) Una nueva ruta a la URL <code>fecha</code>. Al acceder a esta ruta (http://blog.test/fecha), deberemos ver un mensaje con el d\u00eda y la hora actual.</p>"},{"location":"ut07/ut07ac/#ejercicio-4","title":"Ejercicio 4","text":"<p>Sobre el proyecto blog, vamos a a\u00f1adir estos dos cambios:</p> <p>\u00a0\u00a0\u00a0\u00a0 a) A\u00f1ade una nueva ruta parametrizada a <code>posts/{id}</code>, de manera que el par\u00e1metro <code>id</code> sea num\u00e9rico (es decir, s\u00f3lo contenga d\u00edgitos del 0 al 9) y obligatorio. Haz que la ruta devuelva el mensaje \u201cFicha del post XXXX\u201d, siendo XXXX el id que haya recibido como par\u00e1metro. Si no se inserta id deber\u00e1 mostrar el id = 1.</p> <p>\u00a0\u00a0\u00a0\u00a0 b) Pon un nombre a las tres rutas que hay definidas hasta ahora: a la p\u00e1gina de inicio ponle el nombre \u201cinicio\u201d, a la del listado la llamaremos \u201cposts_listado\u201d y a la de ficha que acabas de crear, la llamaremos \u201cposts_ficha\u201d.</p>"},{"location":"ut07/ut07ac/#ejercicio-5","title":"Ejercicio 5","text":"<p>Continuamos con el proyecto blog. En este caso vamos a definir una plantilla y una serie de vistas que la utilicen.</p> <p>\u00a0\u00a0\u00a0\u00a0 a) Definir una plantilla llamada <code>plantilla1.blade.php</code> en la carpeta de vistas del proyecto (<code>resources/views</code>). Define una cabecera con una secci\u00f3n <code>yield</code> para el t\u00edtulo, y otra para el contenido de la p\u00e1gina, como la del ejemplo que hemos visto anteriormente.</p> <p>\u00a0\u00a0\u00a0\u00a0 b) Define en un archivo aparte en la subcarpeta <code>partials</code> de nombre: <code>nav.blade.php</code> una barra de navegaci\u00f3n que nos permita acceder a estas direcciones de momento:</p> <p>\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 - P\u00e1gina de inicio  \u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 - Listado de posts</p> <p>\u00a0\u00a0\u00a0\u00a0 c)Incluye la barra de navegaci\u00f3n en la plantilla base que has definido antes.</p> <p>\u00a0\u00a0\u00a0\u00a0 d)A partir de la plantilla base, define otras dos vistas en una subcarpeta <code>posts</code>, llamadas <code>posts/listado.blade.php</code> y <code>posts/ficha.blade.php</code>. Como t\u00edtulo de cada p\u00e1gina pon un breve texto de lo que son (por ejemplo, \u201cListado posts\u201d y \u201cFicha post\u201d), y como contenido de momento deja un encabezado <code>h1</code> que indique la p\u00e1gina en la que estamos: \u201cListado de posts\u201d o \u201cFicha del post XXXX\u201d, donde XXXX ser\u00e1 el identificador del post que habremos pasado por la URL (y que deber\u00e1s pasar a la vista). Haz que las rutas correspondientes de <code>routes/web.php</code> que ya has definido rendericen estas vistas en lugar de devolver texto plano.</p>"},{"location":"ut07/ut07ac/#ejercicio-6","title":"Ejercicio 6","text":"<p>Sobre el mismo proyecto blog que venimos desarrollando, incorpora ahora los estilos de Bootstrap siguiendo los pasos vistos en estos apuntes:</p> <p>\u00a0\u00a0\u00a0\u00a0 a) Instala con composer la librer\u00eda <code>laravel/ui</code>, y util\u00edzala para incorporar Bootstrap al proyecto. \u00a0\u00a0\u00a0\u00a0 b) Descarga Bootstrap con <code>npm install</code>, y actualiza los archivos CSS y JavaScript con <code>npm run dev</code>. \u00a0\u00a0\u00a0\u00a0 c) Incorpora los estilos <code>/css/app.css</code> a la plantilla base del proyecto, para que los utilicen todas las vistas que heredan de ella. \u00a0\u00a0\u00a0\u00a0 d) Edita el archivo <code>partials/nav.blade.php</code> para modificar la barra de navegaci\u00f3n y dejarla con un estilo particular de Bootstrap. Puedes consultar esta p\u00e1gina para tomar ideas de algunos dise\u00f1os que puedes aplicar en la barra de navegaci\u00f3n. \u00a0\u00a0\u00a0\u00a0 e) Renombra el archivo <code>welcome.blade.php</code> a <code>inicio.blade.php</code> y c\u00e1mbialo para que tambi\u00e9n herede de la plantilla base. A\u00f1ade alg\u00fan texto introductorio como contenido. Puede quedarte m\u00e1s o menos as\u00ed (la barra de navegaci\u00f3n superior puede variar en funci\u00f3n del estilo que hayas querido darle).</p> Blog de inicio del ejercicio 6. <p>\u00bfQu\u00e9 entregar en estos ejercicios?</p> <p>Como entrega de esta sesi\u00f3n deber\u00e1s comprimir el proyecto blog con todos los cambios incorporados, y eliminando las carpetas <code>vendor</code> y <code>node_modules</code> como se explic\u00f3 en las sesiones anteriores. Renombra el archivo comprimido a <code>blog_07.zip</code>.</p>"},{"location":"ut08/ut0801/","title":"UT 8. Controladores","text":"<p>Duraci\u00f3n estimada: 10 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA5. Desarrolla aplicaciones web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio. b) Se han analizado y utilizado mecanismos y frameworks que permiten realizar esta separaci\u00f3n y sus caracter\u00edsticas principales."},{"location":"ut08/ut0802/","title":"Ut0802","text":"<p>Los controladores permiten estructurar mejor el c\u00f3digo de nuestra aplicaci\u00f3n. Su principal utilidad radica en liberar a los archivos de rutas de tener que ocuparse tambi\u00e9n de gestionar cierta l\u00f3gica com\u00fan de las peticiones, como el acceso a los datos, validaci\u00f3n de formularios, etc. Adem\u00e1s, a medida que la aplicaci\u00f3n crezca, el archivo de rutas puede ser demasiado grande si tiene que almacenar tambi\u00e9n la l\u00f3gica de cada ruta, y el tiempo de procesamiento del archivo tambi\u00e9n crecer\u00e1. Lo mejor es dividir esa l\u00f3gica en controladores.</p> <p>Para definir un controlador en nuestra aplicaci\u00f3n, tenemos que echar mano de nuevo del comando <code>php artisan</code> visto previamente. En concreto, utilizaremos la opci\u00f3n <code>make:controller</code> seguida del nombre que le queramos dar al controlador (php artisan make:controller NombreController). T\u00edpicamente, los nombres de controladores terminan con el sufijo Controller, por lo que podemos crear uno de prueba as\u00ed:</p> <pre><code>php artisan make:controller PruebaController\n</code></pre> <p>Esto generar\u00e1 una clase vac\u00eda con el nombre del controlador. Por defecto, los controladores se guardan en la subcarpeta <code>app/Http/Controllers</code> de nuestro proyecto Laravel.</p>"},{"location":"ut08/ut0802/#1-controladores-de-un-solo-metodo-invoke","title":"1. Controladores de un s\u00f3lo m\u00e9todo (invoke)","text":"<p>El comando anterior admite algunos par\u00e1metros adicionales m\u00e1s. Uno muy \u00fatil es el par\u00e1metro <code>-i</code>, que crea el controlador con un m\u00e9todo llamado __invoke, que se auto ejecuta cuando es llamado desde alg\u00fan proceso de enrutamiento. Por ejemplo, si creamos el controlador as\u00ed:</p> <pre><code>php artisan make:controller PruebaController -i\n</code></pre> <p>Se crear\u00e1 la clase <code>PruebaController</code> en la carpeta <code>app/Http/Controllers</code>, con un contenido como \u00e9ste:</p> <pre><code>namespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass PruebaController extends Controller\n{\n    ...\n    public function __invoke(Request $request)\n    {\n        ...\n    }\n}\n</code></pre> <p>Dentro del m\u00e9todo <code>__invoke</code> podemos definir la l\u00f3gica de generar u obtener los datos que necesita una vista, y renderizarla. Por ejemplo:</p> <pre><code>public function __invoke(Request $request)\n{\n    $datos = [...];\n    return view('miVista', compact('datos'));\n} \n</code></pre> <p>As\u00ed, en el archivo de rutas, basta con definir la ruta que queramos, y como segundo par\u00e1metro del m\u00e9todo <code>get</code>, indicar el nombre del controlador que se va a disparar para procesar esa ruta. Adicionalmente, tambi\u00e9n le podemos asignar un nombre a la ruta, como ya hemos hecho en ejemplos anteriores.</p> <pre><code>Route::get('prueba', 'PruebaController')-&gt;name('prueba');\n</code></pre> <p>Alternativamente (y de manera especial desde Laravel 8, donde la anterior forma de definir rutas asociadas a controlador ya no funciona directamente), podemos especificar la clase del controlador, incluyendo con <code>use</code> dicha clase en el archivo de rutas:</p> <pre><code>use App\\Http\\Controllers\\PruebaController;\n...\nRoute::get('prueba', PruebaController::class)-&gt;name('prueba');\n</code></pre>"},{"location":"ut08/ut0802/#2-controladores-de-varios-metodos","title":"2. Controladores de varios m\u00e9todos","text":"<p>Los controladores de tipo <code>invoke</code> son \u00fatiles para definir controladores simples, donde s\u00f3lo necesitamos un m\u00e9todo para procesar rutas asociadas a una entidad del programa. Esto no es lo habitual, ya que, por ejemplo, para una misma entidad (como puedan ser los libros de nuestra biblioteca), necesitaremos m\u00e9todos para listarlos, crearlos, borrarlos, etc. En este caso, podemos crear otros tipos de controladores que ofrecen m\u00e1s m\u00e9todos disponibles.</p>"},{"location":"ut08/ut0802/#21-controladores-de-recursos","title":"2.1. Controladores de recursos","text":"<p>Si creamos un controlador con la opci\u00f3n <code>-r</code> en lugar de la opci\u00f3n <code>-i</code> utilizada en el ejemplo anterior, crear\u00e1 un controlador de recursos (<code>resources</code>), y predefinir\u00e1 en \u00e9l una serie de m\u00e9todos de utilidad para las operaciones principales que se pueden realizar sobre una entidad de nuestra aplicaci\u00f3n:</p> <ul> <li><code>index</code>: muestra un listado de los elementos de esa entidad o recurso.</li> <li><code>create</code>: muestra el formulario para dar de alta nuevos elementos.</li> <li><code>store</code>: almacena en la base de datos el recurso creado con el formulario anterior.</li> <li><code>show</code>: muestra los datos de un recurso espec\u00edfico (a partir de su clave o id).</li> <li><code>edit</code>: muestra el formulario para editar un recurso existente.</li> <li><code>update</code>: actualiza en la base de datos el recurso editado con el formulario anterior.</li> <li><code>destroy</code>: elimina un recurso por su identificador.</li> </ul> <p>Obviamente, el c\u00f3digo de todos estos m\u00e9todos aparecer\u00e1 vac\u00edo al principio, y los deberemos rellenar con las operaciones correspondientes m\u00e1s adelante.</p> <p>Si queremos utilizar un controlador de este tipo, y llamar a alguno de sus m\u00e9todos desde alguna ruta, ya no basta con poner el nombre del controlador, como hac\u00edamos antes con los de tipo invoke, puesto que ahora hay m\u00e1s de un m\u00e9todo que elegir. Lo que haremos ser\u00e1 emplear la propia clase del controlador en la definici\u00f3n de la ruta (recomendado desde Laravel 8). En este caso, definimos un array con la clase del controlador y el m\u00e9todo a llamar (<code>index</code> en nuestro caso):</p> <pre><code>use App\\Http\\Controllers\\PruebaController;\n...\nRoute::get('prueba', [PruebaController::class, 'index'])\n    -&gt;name('listado_prueba');\n</code></pre> <p>en versiones anteriores a Laravel 8</p> <p>Tambi\u00e9n, de forma alternativa, podemos poner el nombre del controlador, seguido de una arroba <code>@</code> y el nombre del m\u00e9todo a invocar. Por ejemplo: <pre><code>Route::get('prueba', 'PruebaController@index')-&gt;name('listado_prueba');\n</code></pre></p> <p>Vamos a probar esta opci\u00f3n en nuestro proyecto de biblioteca. Crearemos un controlador para gestionar los libros, con este comando:</p> <pre><code>php artisan make:controller -r LibroController\n</code></pre> <p>De momento varios de los m\u00e9todos generados en el controlador no los vamos a utilizar. Podemos modificar los dos que s\u00ed vamos a usar de momento (<code>index</code> y <code>show</code>) y poner en ellos lo que antes ten\u00edamos en el archivo de rutas. As\u00ed, quedar\u00edan, respectivamente:</p> <pre><code>public function index() \n{\n    $libros = [\n            [ \"titulo\" =&gt; \"El juego de Ender\", \n              \"autor\" =&gt; \"Orson Scott Card\"],\n            [ \"titulo\" =&gt; \"La tabla de Flandes\", \n              \"autor\" =&gt; \"Arturo P\u00e9rez Reverte\"],\n            [ \"titulo\" =&gt; \"La historia interminable\", \n              \"autor\" =&gt; \"Michael Ende\"],\n            [ \"titulo\" =&gt; \"El Se\u00f1or de los Anillos\", \n              \"autor\" =&gt; \"J.R.R. Tolkien\"]\n    ];\n\n    return view('listado', compact('libros'));\n}\n\npublic function show($id)\n{\n    return \"Mostrando ficha de libro $id\";\n}\n</code></pre> <p> </p> <p>El m\u00e9todo <code>show</code> no lo hemos implementado pero b\u00e1sicamente lo vamos a utilizar para mostrar la ficha de un libro. De momento mostramos s\u00f3lo el id del libro recibido, como texto plano.</p> <p>Estas dos rutas quedar\u00edan ahora as\u00ed en el archivo <code>routes/web.php</code> (eliminar\u00edamos la vieja ruta de listado de posts):</p> <pre><code>Route::get('libros', 'LibroController@index');\nRoute::get('libros/{id}', 'LibroController@show');\n</code></pre> <p>O de forma alternativa (desde Laravel 8):</p> <pre><code>use App\\Http\\Controllers\\LibroController;\n...\nRoute::get('libros', [LibroController::class, 'index']);\nRoute::get('libros/{id}', [LibroController::class, 'show']);\n</code></pre>"},{"location":"ut08/ut0802/#22-controladores-de-api","title":"2.2. Controladores de API","text":"<p>Como alternativa a los controladores de recursos vistos antes, podemos crear los controladores con la opci\u00f3n <code>--api</code>. Crear\u00e1 un controlador con los mismos m\u00e9todos que el de recursos, salvo los m\u00e9todos <code>create</code> y <code>edit</code>, encargados de mostrar los formularios de creaci\u00f3n y edici\u00f3n de recursos, ya que en las APIs estos formularios no son necesarios, como veremos en sesiones posteriores.</p>"},{"location":"ut08/ut0802/#3-rutas-vistas-y-controladores","title":"3. Rutas, vistas y controladores","text":"<p>A medida que el proyecto crece, generaremos un buen n\u00famero de vistas asociadas a controladores, y es necesario estructurar estas vistas de una forma adecuada para poderlas identificar r\u00e1pidamente. Una convenci\u00f3n que podemos seguir es nombrar las vistas a partir del controlador o modelo al que hacen referencia, y a la operaci\u00f3n que realizan. Por ejemplo, si tenemos un controlador llamado <code>PruebaController</code>, se supone que actuar\u00e1 sobre una tabla llamada <code>pruebas</code> (lo veremos m\u00e1s adelante, en la sesi\u00f3n de acceso a datos). En nuestro caso de la biblioteca, podemos almacenar las vistas de los libros de la biblioteca en la subcarpeta <code>resources/views/libros</code>, y definir dentro las vistas asociadas a cada operaci\u00f3n del controlador que tengamos definida. Por ejemplo:</p> <ul> <li><code>index.blade.php</code></li> <li><code>show.blade.php</code></li> <li>\u2026</li> </ul> <p>Paralelamente, cada vez que vayamos a cargar una vista desde alg\u00fan controlador o ruta, haremos referencia a este nombre. As\u00ed, si queremos renderizar la vista <code>show</code> para los libros desde el m\u00e9todo <code>show</code> del controlador de libros, har\u00edamos algo as\u00ed (pas\u00e1ndole como par\u00e1metro el id del libro a buscar, para que lo saque en la vista por ahora):</p> <pre><code>public function show($id)\n{\n    return view('libros.show', compact('id'));\n}\n</code></pre> <p>Del mismo modo, los nombres que asociemos a las rutas deber\u00edan seguir este mismo patr\u00f3n.</p>"},{"location":"ut08/ut0802/#31-aunando-todas-las-rutas-de-un-controlador","title":"3.1. Aunando todas las rutas de un controlador","text":"<p>Al final de todo el proceso de implementaci\u00f3n de un controlador (de recursos o de API) tendremos en el archivo de rutas una dedicada a cada m\u00e9todo del controlador (una para <code>index</code>, otra para <code>show</code>, etc.). Estas rutas pueden agruparse en una sola usando el m\u00e9todo <code>resource</code> de la clase <code>Route</code>, en lugar de <code>get</code>, indic\u00e1ndole como par\u00e1metros el nombre base de la ruta, y el controlador que se va a encargar de ella; este m\u00e9todo <code>Route::resource</code> es una forma simplificada y eficiente de registrar m\u00faltiples rutas en Laravel para un controlador que sigue las convenciones RESTful. En lugar de declarar cada ruta manualmente para un controlador que maneja recursos, Laravel las define autom\u00e1ticamente por ti.</p> <pre><code>use App\\Http\\Controllers\\LibroController;\n...\nRoute::resource('libros', LibroController::class);\n</code></pre> <p>La ruta anterior definir\u00e1 autom\u00e1ticamente las rutas GET hacia <code>/libros</code>, atendida por el m\u00e9todo <code>index</code> del controlador, otra ruta GET hacia <code>/libros/{id}</code> atendida por el m\u00e9todo <code>show</code> del controlador\u2026 etc:</p> verbo HTTP URI acci\u00f3n m\u00e9todo del controlador GET /libros mostrar todos index GET /libros/create formulario crear create POST /libros guardar nuevo store GET /libros/{id} mostrar uno show GET /libros/{id}/edit formulario editar edit PUT/PATCH /libros/{id} actualizar update DELETE /libros/{id} eliminar destroy <p> </p> <p>A trav\u00e9s de la ruta <code>Route::resource</code> s\u00f3lo se incluyen los m\u00e9todos est\u00e1ndar de un controlador de recursos (<code>index</code>, <code>show</code>, <code>create</code>, <code>edit</code>, etc), pero NO los que a\u00f1adamos a mano despu\u00e9s en dicho controlador con otros nombres.</p> Ejemplo de <code>resource</code> <p>Supongamos que tienes un modelo de libro (Libro) y un controlador llamado LibroController. El controlador podr\u00eda lucir as\u00ed: <code>LibroController.php</code>: <pre><code>&lt;?php\nnamespace App\\Http\\Controllers;\n\n\nuse App\\Models\\Libro;\nuse Illuminate\\Http\\Request;\n\nclass LibroController extends Controller\n{\n    // Muestra una lista de todos los libros\n    public function index()\n    {\n        $libros = Libro::all();\n        return view('libros.index', compact('libros'));\n    }\n\n    // Muestra un formulario para crear un nuevo libro\n    public function create()\n    {\n        return view('libros.create');\n    }\n\n    // Guarda un nuevo libro en la base de datos\n    public function store(Request $request)\n    {\n        $request-&gt;validate([\n            'titulo' =&gt; 'required',\n            'autor' =&gt; 'required',\n        ]);\n\n        Libro::create($request-&gt;all());\n        return redirect()-&gt;route('libros.index')-&gt;with('success', 'Libro creado exitosamente.');\n    }\n\n    // Muestra los detalles de un libro espec\u00edfico\n    public function show($id)\n    {\n        $libro = Libro::findOrFail($id);\n        return view('libros.show', compact('libro'));\n    }\n\n    // Muestra un formulario para editar un libro existente\n    public function edit($id)\n    {\n        $libro = Libro::findOrFail($id);\n        return view('libros.edit', compact('libro'));\n    }\n\n    // Actualiza un libro en la base de datos\n    public function update(Request $request, $id)\n    {\n        $request-&gt;validate([\n            'titulo' =&gt; 'required',\n            'autor' =&gt; 'required',\n        ]);\n\n        $libro = Libro::findOrFail($id);\n        $libro-&gt;update($request-&gt;all());\n        return redirect()-&gt;route('libros.index')-&gt;with('success', 'Libro actualizado exitosamente.');\n    }\n\n    // Elimina un libro de la base de datos\n    public function destroy($id)\n    {\n        $libro = Libro::findOrFail($id);\n        $libro-&gt;delete();\n        return redirect()-&gt;route('libros.index')-&gt;with('success', 'Libro eliminado exitosamente.');\n    }\n}\n</code></pre> Vista previa de las rutas generadas Puedes ver las rutas generadas ejecutando el comando: <pre><code>php artisan route:list\n</code></pre></p> <p>El resultado incluir\u00e1 algo similar a esto:</p> verbo HTTP URI acci\u00f3n m\u00e9todo del controlador middleware GET /libros libros.index LibroController@index web GET /libros/create libros.create LibroController@create web POST /libros libros.store LibroController@store web GET /libros/{id} libros.show LibroController@show web GET /libros/{id}/edit libros.edit LibroController@edit web PUT/PATCH /libros/{id} libros.update LibroController@update web DELETE /libros/{id} libros.destroy LibroController@destroy web <p>Ejemplo de uso de vistas - Vista de \u00edndice (<code>libros/index.blade.php</code>): Muestra todos los libros. - Vista de creaci\u00f3n (<code>libros/create.blade.php</code>): Formulario para crear un libro. - Vista de edici\u00f3n (<code>libros/edit.blade.php</code>): Formulario para editar un libro. - Vista de detalle (<code>libros/show.blade.php</code>): Muestra un libro en detalle.</p> <p>Tambi\u00e9n podemos utilizar el m\u00e9todo <code>only</code> para indicar para qu\u00e9 m\u00e9todos queremos rutas:</p> <pre><code>use App\\Http\\Controllers\\LibroController;\n...\nRoute::resource('libros', LibroController::class)-&gt;only(['index', 'show']);\n</code></pre> <p>Desde el lado opuesto, tenemos disponible el m\u00e9todo <code>except</code> para indicar que se generen todas las rutas excepto aquellas para los m\u00e9todos indicados:</p> <pre><code>use App\\Http\\Controllers\\LibroController;\n...\nRoute::resource('libros', LibroController::class)-&gt;except(['update', 'edit']);\n</code></pre> <p>Con los controladores de tipo API tambi\u00e9n podemos generar autom\u00e1ticamente todas las rutas para sus m\u00e9todos, utilizando el m\u00e9todo <code>apiResource</code> de la clase <code>Route</code>, en lugar del m\u00e9todo <code>resource</code> empleado antes:</p> <pre><code>use App\\Http\\Controllers\\PruebaController;\n...\nRoute::apiResource('prueba', PruebaController::class);\n</code></pre>"},{"location":"ut08/ut0802/#32-renombrando-las-rutas","title":"3.2. Renombrando las rutas","text":"<p>Si generamos rutas autom\u00e1ticas para los m\u00e9todos de un controlador, veremos que para los formularios de crear y editar se define una ruta terminada en <code>/create</code> o en <code>/edit</code>, respectivamente. Esto puede chocar si pretendemos una web hecha en otro idioma. Pero podemos cambiar el nombre que se genera autom\u00e1ticamente para estas rutas, editando el proveedor de servicios <code>AppServiceProvider</code>, ubicado en la carpeta <code>app/Providers</code>. En el m\u00e9todo <code>boot</code>, podemos llamar al m\u00e9todo <code>resourceVerbs</code> de la clase <code>Route</code> y renombrar los verbos utilizados para acceder a las rutas del recurso. Por ejemplo:</p> <pre><code>public function boot()\n{\n    Route::resourceVerbs([\n        'create' =&gt; 'crear',\n        'edit' =&gt; 'editar'\n    ])\n}\n</code></pre> <p> </p> <p>Deberemos incluir con <code>use</code> el espacio de nombres <code>Illuminate\\Support\\Facades\\Route</code> para poder emplear la clase <code>Route</code> en el proveedor de servicios.</p> <p>Para nuestro ejemplo de la biblioteca, podemos devolver un texto plano en los m\u00e9todos <code>create</code> y <code>edit</code> que indiquen que ah\u00ed va un formulario:</p> <pre><code>public function create()\n{\n    return \"Formulario de inserci\u00f3n de libros\";\n}\n\npublic function edit()\n{\n    return \"Formulario de edici\u00f3n de libros\";\n}\n</code></pre> <p>Nuestro archivo de rutas se puede quedar con esta \u00fanica instrucci\u00f3n para todas las rutas de libros, indicando que por ahora s\u00f3lo vamos a gestionar el listado, la ficha y los dos formularios:</p> <pre><code>Route::resource('libros', LibroController::class)-&gt;only(['index', 'show', 'create', 'edit']);\n</code></pre> <p>Ahora ya podemos acceder a estas 4 URLs y ver la respuesta correspondiente:</p> URL m\u00e9todo a llamar http://biblioteca/libros index http://biblioteca/libros/3 show para el libro 3  http://biblioteca/libros/crear create http://biblioteca/libros/3/editar edit para el libro 3 <p>Podemos observar que la URL aparece en castellano gracias a los cambios en <code>AppServiceProvider</code>, pero los nombres de funciones en los controladores siguen estando en ingl\u00e9s, as\u00ed como en los elementos de la llamada al m\u00e9todo <code>only</code>.</p> <p>Podemos consultar el conjunto de rutas al que est\u00e1 respondiendo nuestra aplicaci\u00f3n en todo momento con este comando:</p> <pre><code>php artisan route:list  \n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 1</code>.</li> </ul>"},{"location":"ut08/ut0803/","title":"Ut0803","text":"<p>El concepto de inyecci\u00f3n de dependencias es muy habitual en el uso de frameworks. Consiste en un mecanismo que facilita recursos a los diferentes componentes de la aplicaci\u00f3n, y es algo que ya hemos utilizado, sin saberlo, en los m\u00e9todos que se han generado para los controladores.</p>"},{"location":"ut08/ut0803/#1-inyectando-la-peticion-del-usuario","title":"1. Inyectando la petici\u00f3n del usuario","text":"<p>Cuando necesitas trabajar con datos que el cliente env\u00eda a tu aplicaci\u00f3n, Laravel puede inyectar autom\u00e1ticamente un objeto de tipo <code>Request</code> en los m\u00e9todos de tus controladores. Autom\u00e1ticamente, Laravel procesa el tipo de dato y obtiene el objeto asociado (en este caso, la petici\u00f3n del cliente).</p> <pre><code>class LibroController extends Controller\n{\n    public function store(Request $request)\n    {\n        // Aqu\u00ed podemos usar $request para acceder a los datos enviados por el cliente\n    }\n}\n</code></pre> <ul> <li> <p>Ventaja: No necesitas crear ni configurar el objeto <code>Request</code>, Laravel lo hace por t\u00ed.</p> </li> <li> <p>Uso com\u00fan: Obtener datos enviados por el cliente mediante <code>$request-&gt;input('campo')</code> o <code>$request-&gt;all()</code>.</p> </li> </ul>"},{"location":"ut08/ut0803/#2-inyectando-la-respuesta-del-servidor","title":"2. Inyectando la respuesta del servidor","text":"<p>Adem\u00e1s de manejar peticiones, los controladores pueden gestionar respuestas que se env\u00edan de vuelta al cliente. Laravel proporciona un m\u00e9todo <code>response</code> al que le podemos pasar varios par\u00e1metros:</p>"},{"location":"ut08/ut0803/#21-generar-respuestas-basicas","title":"2.1. Generar respuestas b\u00e1sicas","text":"<ol> <li>El contenido de la respuesta (por ejemplo, un mensaje).</li> <li>El c\u00f3digo de estado HTTP (por defecto es <code>200</code>).</li> <li>Cabeceras adicionales (opcional).</li> </ol> <p>Ejemplo:</p> <pre><code>return response(\"Mensaje de respuesta\", 201)\n    -&gt;header('Content-Type', 'text/plain');\n</code></pre>"},{"location":"ut08/ut0803/#22-respuestas-en-formato-json","title":"2.2. Respuestas en formato JSON","text":"<p>Cuando necesitas devolver datos en formato JSON (muy com\u00fan en APIs), puedes usar <code>response()-&gt;json()</code>.</p> <p>Ejemplo:</p> <pre><code>return response()-&gt;json(['mensaje' =&gt; '\u00c9xito'], 201)\n-&gt;header('Custom-Header', 'Valor');\n</code></pre>"},{"location":"ut08/ut0803/#3-redirecciones-con-respuestas","title":"3. Redirecciones con respuestas","text":"<p>Laravel facilita las redirecciones mediante el m\u00e9todo redirect. Esto es \u00fatil para enviar al usuario a otra p\u00e1gina o ruta despu\u00e9s de completar una acci\u00f3n.</p>"},{"location":"ut08/ut0803/#31-redireccion-basica","title":"3.1. Redirecci\u00f3n b\u00e1sica","text":"<p>Redirige a la ra\u00edz del sitio:</p> <p><pre><code>return redirect('/');\n</code></pre> Redirige a una ruta espec\u00edfica usando su nombre:</p> <pre><code>return redirect()-&gt;route('inicio');\n</code></pre>"},{"location":"ut08/ut0803/#32-pasar-datos-a-la-redireccion","title":"3.2. Pasar datos a la redirecci\u00f3n","text":"<p>Puedes incluir datos temporales en la redirecci\u00f3n usando el m\u00e9todo <code>with</code>. Estos datos estar\u00e1n disponibles solo en la pr\u00f3xima solicitud.</p> <p>Ejemplo:</p> <p><pre><code>return redirect()-&gt;route('inicio')-&gt;with('mensaje', 'Guardado correctamente');\nEn la vista, puedes acceder al mensaje usando la funci\u00f3n session:\n</code></pre> <pre><code>@if(session()-&gt;has('mensaje'))\n    &lt;p&gt;{{ session('mensaje') }}&lt;/p&gt;\n@endif\n</code></pre></p>"},{"location":"ut08/ut0803/#33-redireccion-desde-controladores","title":"3.3. Redirecci\u00f3n desde controladores","text":"<p>Si realizas una redirecci\u00f3n dentro de un controlador, recuerda usar <code>return</code> para que Laravel la procese correctamente.</p> <p>Ejemplo:</p> <pre><code>class LibroController extends Controller\n{\n    public function store(Request $request)\n    {\n        // L\u00f3gica para guardar datos\n        return redirect()-&gt;route('libros.index');\n    }\n}\n</code></pre>"},{"location":"ut08/ut0803/#4-los-helpers","title":"4. Los helpers","text":"<p>Un helper es b\u00e1sicamente una funci\u00f3n de utilidad que podemos querer utilizar en diversos puntos de nuestra web, y que necesitamos tener localizada y compartida. Son una forma eficiente de centralizar l\u00f3gica com\u00fan que no est\u00e1 directamente relacionada con las clases o m\u00e9todos principales.</p> <p>A continuaci\u00f3n, se explica c\u00f3mo crear y utilizar helpers en Laravel mediante el ejemplo pr\u00e1ctico: resaltar el men\u00fa activo.</p> <p>ejemplo pr\u00e1ctico: resaltar el men\u00fa activo</p> <p>Queremos resaltar en el men\u00fa de navegaci\u00f3n la opci\u00f3n correspondiente a la p\u00e1gina que el usuario est\u00e1 visitando. Para lograrlo:</p> <ol> <li>Define una clase CSS (por ejemplo, <code>activo</code>) en tus estilos para destacar el men\u00fa activo.</li> <li>Usa la funci\u00f3n <code>request()-&gt;routeIs()</code> de Laravel para determinar si la ruta actual coincide con la ruta del men\u00fa. En una vista Blade, podr\u00edamos escribir el siguiente c\u00f3digo:</li> </ol> <pre><code>&lt;nav&gt;\n    &lt;ul&gt;\n        &lt;li class=\"{{ request()-&gt;routeIs('inicio') ? 'activo' : '' }}\"&gt;\n            &lt;a href=\"/\"&gt;Inicio&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=\"{{ request()-&gt;routeIs('contacto') ? 'activo' : '' }}\"&gt;\n            &lt;a href=\"/contacto\"&gt;Contacto&lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> <p>\u00bfC\u00f3mo funciona?</p> <ul> <li><code>request()-&gt;routeIs('inicio')</code>: Verifica si la ruta actual coincide con <code>'inicio'</code>.</li> <li>Operador ternario: Si la ruta coincide, se a\u00f1ade la clase <code>activo</code>; si no, se deja vac\u00edo.</li> </ul>"},{"location":"ut08/ut0803/#41-crear-un-helper-para-centralizar-la-logica","title":"4.1. Crear un helper para centralizar la l\u00f3gica","text":"<p>Para mejorar el mantenimiento y legibilidad del c\u00f3digo, extraemos esta l\u00f3gica a un helper llamado <code>setActivo</code>.</p> <p>4.1.1. Crea un archivo de helper Crea un archivo llamado <code>helpers.php</code> en la carpeta <code>app</code> (o cualquier ubicaci\u00f3n adecuada).</p> <p>Contenido del archivo:</p> <pre><code>&lt;?php\n\nfunction setActivo($nombreRuta)\n{\n    return request()-&gt;routeIs($nombreRuta) ? 'activo' : '';\n}\n</code></pre> <p>4.1.2. Usar el helper en la vista Ahora, en lugar de escribir la l\u00f3gica directamente en la vista, simplemente llamamos a <code>setActivo()</code>:</p> <p><pre><code>&lt;nav&gt;\n    &lt;ul&gt;\n        &lt;li class=\"{{ setActivo('inicio') }}\"&gt;\n            &lt;a href=\"/\"&gt;Inicio&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li class=\"{{ setActivo('contacto') }}\"&gt;\n            &lt;a href=\"/contacto\"&gt;Contacto&lt;/a&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> Ventaja: La vista es m\u00e1s limpia y la l\u00f3gica est\u00e1 centralizada en el helper.</p>"},{"location":"ut08/ut0803/#42-usar-comodines-para-rutas-anidadas","title":"4.2. Usar comodines para rutas anidadas","text":"<p>Si queremos que el enlace permanezca activo en subrutas (por ejemplo, al visualizar detalles de un registro desde una lista), usamos el comod\u00edn <code>*</code> en la funci\u00f3n <code>routeIs()</code>.</p> <p>Ejemplo con comodines</p> <pre><code>&lt;li class=\"{{ setActivo('peliculas.*') }}\"&gt;\n    &lt;a href=\"{{ route('peliculas') }}\"&gt;Pel\u00edculas&lt;/a&gt;\n&lt;/li&gt;\n</code></pre>"},{"location":"ut08/ut0803/#43-hacer-que-laravel-cargue-el-helper","title":"4.3. Hacer que Laravel cargue el helper","text":"<p>Por defecto, Laravel no carga archivos PHP que no sean clases. Para asegurarnos de que el archivo <code>helpers.php</code> est\u00e9 disponible en toda la aplicaci\u00f3n, debemos configurarlo en <code>composer.json</code>.</p> <p>4.3.1. Modifica composer.json En la ra\u00edz de tu proyecto, abre el archivo <code>composer.json</code> y a\u00f1ade el archivo helpers.php en la secci\u00f3n autoload:</p> <p><pre><code>\"autoload\": {\n    \"classmap\": [],\n    \"psr-4\": {\n        \"App\\\\\": \"app/\"\n    },\n    \"files\": [\n        \"app/helpers.php\"\n    ]\n}\n</code></pre> 4.3.2. Actualiza el autoloader Ejecuta el siguiente comando en la terminal para que Composer reconozca el nuevo archivo:</p> <pre><code>composer dump-autoload\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 2</code>.</li> </ul>"},{"location":"ut08/ut08ac/","title":"Ejercicios propuestos","text":""},{"location":"ut08/ut08ac/#ejercicio-1","title":"Ejercicio 1","text":"<p>Sobre el proyecto blog de la sesi\u00f3n anterior, vamos a a\u00f1adir estos cambios:</p> <p>\u00a0\u00a0\u00a0\u00a0 a) Crea un controlador de recursos (opci\u00f3n <code>-r</code>) llamado <code>PostController</code>, que nos servir\u00e1 para gestionar toda la l\u00f3gica de los posts del blog.</p> <p>\u00a0\u00a0\u00a0\u00a0 b) Asigna autom\u00e1ticamente con el m\u00e9todo <code>resource</code> cada ruta a su funci\u00f3n correspondiente del controlador, en el archivo <code>routes/web.php</code>. Limita con <code>only</code> las acciones s\u00f3lo a las funciones de listado (<code>index</code>), ficha (<code>show</code>), creaci\u00f3n (<code>create</code>) y edici\u00f3n (<code>edit</code>).</p> <p>\u00a0\u00a0\u00a0\u00a0 c) Utiliza el proveedor de servicios <code>AppServiceProvider</code> para \u201ccastellanizar\u201d las rutas de creaci\u00f3n y edici\u00f3n, como en el ejemplo que hemos visto de libros.</p> <p>\u00a0\u00a0\u00a0\u00a0 d) Renombra las vistas de listado y ficha de un post a <code>index.blade.php</code> y <code>show.blade.php</code>, dentro de su carpeta <code>posts</code>, y haz que los m\u00e9todos correspondientes del controlador de posts rendericen estas vistas. Para los m\u00e9todos <code>create</code> y <code>edit</code>, simplemente devuelve un texto plano indicando \u201cNuevo post\u201d y \u201cEdici\u00f3n de post\u201d, por ejemplo.</p> <p>\u00a0\u00a0\u00a0\u00a0 e) Haz los cambios adicionales que sean convenientes (por ejemplo, en el men\u00fa de navegaci\u00f3n) para que los enlaces sigan funcionando, y prueba que las cuatro rutas (listado, ficha, creaci\u00f3n y edici\u00f3n) funcionan adecuadamente.</p>"},{"location":"ut08/ut08ac/#ejercicio-2","title":"Ejercicio 2","text":"<p>Sobre el proyecto blog, se deber\u00e1 a\u00f1adir estos cambios:</p> <p>\u00a0\u00a0\u00a0\u00a0 a) Implementar las funciones de <code>create</code> y <code>edit</code> del controlador de posts, en lugar de mostrar un mensaje de texto plano indicando que ah\u00ed va un formulario, redirijan a la p\u00e1gina de inicio, usando la instrucci\u00f3n <code>redirect</code>.</p> <p>\u00a0\u00a0\u00a0\u00a0 b) Crear un helper  en el proyecto que defina una funci\u00f3n llamada <code>fechaActual</code>. Recibir\u00e1 como par\u00e1metro un formato de fecha (por ejemplo, \u201cd/m/y\u201d) y sacar\u00e1 la fecha actual en dicho formato. Util\u00edzalo para mostrar la fecha actual en formato \u201cd/m/Y\u201d en la plantilla base, bajo la barra de navegaci\u00f3n, alineada a la derecha.</p> <p>\u00bfQu\u00e9 entregar en estos ejercicios?</p> <p>Como entrega de esta sesi\u00f3n deber\u00e1s comprimir el proyecto blog con todos los cambios incorporados, y eliminando las carpetas <code>vendor</code> y <code>node_modules</code> como se explic\u00f3 en las sesiones anteriores.  Renombra el archivo comprimido a <code>blog_08.zip</code>.</p>"},{"location":"ut09/ut0901/","title":"UT 9. Modelo de datos","text":"<p>Una vez vistas dos de las tres patas en que se sustenta el patr\u00f3n MVC (las vistas y los controladores), en esta secci\u00f3n abordaremos la tercera de ellas: el modelo de datos. Con esto, trataremos algunas cuestiones importantes sobre c\u00f3mo gestiona Laravel el acceso a bases de datos, y qu\u00e9 mecanismos ofrece para sincronizar los datos de nuestra aplicaci\u00f3n con los documentos o registros de una base de datos, as\u00ed como para generar autom\u00e1ticamente la estructura de tablas y campos de la base de datos a partir del modelo de la aplicaci\u00f3n.</p> <p>Duraci\u00f3n estimada: 10 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA6. Desarrolla aplicaciones de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n. b) Se han creado aplicaciones que establezcan conexiones con bases de datos. c) Se ha recuperado informaci\u00f3n almacenada en bases de datos. e) Se han utilizado conjuntos de datos para almacenar la informaci\u00f3n."},{"location":"ut09/ut0902/","title":"Ut0902","text":""},{"location":"ut09/ut0902/#21-parametros-de-conexion-a-la-base-de-datos","title":"2.1. Par\u00e1metros de conexi\u00f3n a la base de datos","text":"<p>Una de las primeras cosas que debemos hacer para configurar el acceso a la base de datos en nuestro proyecto es establecer los par\u00e1metros con los que conectar a dicha base de datos: nombre del servidor, usuario, contrase\u00f1a, etc. Estos par\u00e1metros se definen en el archivo <code>.env</code> para cada entorno de despliegue de la aplicaci\u00f3n (recuerda que este archivo no se sube a Git, por lo que cada entorno tendr\u00e1 el suyo). Dentro de este archivo, debemos modificar las siguientes variables de entorno:</p> variable de entorno descripci\u00f3n DB_CONNECTION tipo de SGBD a usar DB_HOST direcci\u00f3n o IP del SGBD (127.0.0.1 para conexi\u00f3n local) DB_PORT puerto por el que el SGBD estar\u00e1 escuchando. Por ejemplo, el puerto por defecto para MySQL es 3306 DB_DATABASE nombre de la base de datos a la que conectar DB_USERNAME login del usuario para conectar DB_PASSWORD password del usuario para conectar <p>En cuanto al primer par\u00e1metro (<code>DB_CONNECTION</code>), aqu\u00ed tenemos un listado de los sistemas m\u00e1s habituales, junto con sus puertos por defecto que podemos utilizar en <code>DB_PORT</code>:</p> id SGBD nombre SGBD puerto por defecto mysql MySQL / MariaDB 3306 oracle Oracle 1521 pgsql PostgreSQL 5432 sqlsrv SQL Server 1433 sqlite SQLite - Configurar <code>.env</code> en el proyecto biblioteca <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=biblioteca\nDB_USERNAME=root\nDB_PASSWORD=\n</code></pre> <p>En el archivo <code>config/database.php</code> existen unos valores por defecto asociados a cada par\u00e1metro de configuraci\u00f3n del archivo <code>.env</code>, de modo que si no se encuentra el par\u00e1metro, se toma el valor por defecto. Por ejemplo, el SGBD seleccionado si no se especifica ninguno es mysql, a juzgar por esta l\u00ednea del archivo <code>database.php</code>:</p> <pre><code>'default' =&gt; env('DB_CONNECTION', 'mysql'),\n</code></pre>"},{"location":"ut09/ut0902/#22-creacion-de-la-base-de-datos","title":"2.2. Creaci\u00f3n de la base de datos","text":"<p>El \u00fanico paso necesario desde fuera de Laravel para acceder a la base de datos ser\u00e1 crearla. El resto de operaciones (creaci\u00f3n de tablas, campos, claves, relaciones, datos, etc) se podr\u00e1n hacer desde el propio Laravel, como iremos viendo m\u00e1s adelante.</p> <p>La base de datos podemos crearla a trav\u00e9s de alg\u00fan administrador que tengamos disponible (por ejemplo, phpMyAdmin para bases de datos MySQL, http://localhost/phpmyadmin, normalmente), o bien por l\u00ednea de comandos, conectando con el SGBD en cuesti\u00f3n y creando la base de datos. </p> <p>En nuestro caso, tendremos que crear una base de datos llamada \u201cbiblioteca\u201d, tal y como hemos especificado en la propiedad <code>DB_DATABASE</code> del archivo <code>.env</code>. Vamos a la opci\u00f3n Nueva del panel izquierdo y escribimos el nombre de la nueva base de datos en el formulario que aparecer\u00e1. Pulsando el bot\u00f3n de Crear ya aparecer\u00e1 la nueva base de datos en el listado izquierdo.</p> Creaci\u00f3n de una base de datos en phpMyAdmin."},{"location":"ut09/ut0903/","title":"Ut0903","text":"<p>Las migraciones son un mecanismo de definici\u00f3n de datos ofrecido por Laravel para, a trav\u00e9s de ciertas clases y opciones de configuraci\u00f3n, generar la estructura completa de una base de datos. A su vez, suponen una especie de control de versiones para una base de datos, y permiten crear y modificar el esquema de la misma f\u00e1cilmente.</p>"},{"location":"ut09/ut0903/#31-estructura-de-las-migraciones","title":"3.1. Estructura de las migraciones","text":"<p>Por defecto, Laravel trae unas migraciones predefinidas, que se hallan en la carpeta <code>database/migrations</code>. Cada una tiene un nombre de archivo que comienza por la fecha en que se hizo, seguida de una breve descripci\u00f3n de lo que contiene (creaci\u00f3n de la tabla de usuarios, reseteo de contrase\u00f1as\u2026). Puede que algunas de estas migraciones no nos vayan a ser necesarias, con lo que podemos borrarlas directamente, y puede que otras (en especial la creaci\u00f3n de la tabla de usuarios) s\u00ed nos sirva, pero con otros campos, con lo que deberemos editarla, como veremos a continuaci\u00f3n.</p> <p>Si examinamos el contenido de una migraci\u00f3n, todas deben tener dos m\u00e9todos:</p> <ul> <li><code>up</code>: permite agregar tablas, columnas o \u00edndices a la base de datos.</li> <li><code>down</code>: revierte lo hecho por el m\u00e9todo anterior.</li> </ul> <p>Si observamos el contenido de un m\u00e9todo <code>up</code> de los que vienen predefinidos para crear una tabla, vemos que se utilizan distintos m\u00e9todos para definir los tipos de datos de cada campo de la tabla, como por ejemplo <code>id()</code> para campos que puedan contener enteros autoincrementales, o <code>string()</code> para campos de tipo texto. Adem\u00e1s, existen otros m\u00e9todos modificadores para agregar propiedades adicionales, como por ejemplo <code>unique()</code> para indicar valores \u00fanicos (claves alternativas), o <code>nullable()</code> para indicar que un campo admite nulos.</p> Ejemplo de m\u00e9todo <code>up</code> <pre><code>public function up()\n{\n  Schema::create('usuarios', function(BluePrint $table) {\n     $table-&gt;id();\n     $table-&gt;string('nombre');\n     $table-&gt;string('email')-&gt;unique();\n     // ...\n     $table-&gt;timestamps();\n  });\n}\n</code></pre> <p>Por defecto, como vemos en los ejemplos que se proporcionan, los esquemas se crean con un id autonum\u00e9rico, y unos timestamps para indicar la fecha de creaci\u00f3n y de modificaci\u00f3n de cada registro, y que Laravel gestiona de forma autom\u00e1tica cuando insertamos o actualizamos contenidos, lo cual resulta muy \u00fatil.</p> <p>Sobre esta base, podemos a\u00f1adir o quitar los campos que queramos. Para ver los tipos disponibles para las columnas de la tabla, podemos visitar la documentaci\u00f3n de Laravel sobre migraciones, en concreto buscaremos el subapartado Available Column Types. Conviene tener presente, por ejemplo, que el tipo <code>string</code> que hemos utilizado en el ejemplo anterior tiene una limitaci\u00f3n de 255 caracteres. Para textos m\u00e1s grandes, se puede emplear el tipo <code>text</code> (20.000 caracteres aproximadamente) o <code>longText</code>.</p> <p>Podemos especificar una clave primaria con el m\u00e9todo <code>primary</code>, al que le podemos pasar o bien el nombre del campo clave, o un array de campos clave, en el caso de que \u00e9sta sea compuesta. Por defecto, los campos de tipo <code>id</code> se auto-establecen como claves primarias.</p> <pre><code>$table-&gt;primary(['campo1', 'campo2']);\n</code></pre>"},{"location":"ut09/ut0903/#32-creacion-de-migraciones","title":"3.2. Creaci\u00f3n de migraciones","text":"<p>a) Crear tablas</p> <p>Creamos migraciones con el comando:</p> <pre><code>php artisan make:migration nombre_migracion\n</code></pre> <p>Por ejemplo:</p> <pre><code>php artisan make:migration create_pruebas_table\n</code></pre> <p>Podemos observar que, en el nombre que se genera en la creaci\u00f3n de la migraci\u00f3n, Laravel ya asigna autom\u00e1ticamente la fecha de la migraci\u00f3n, y \"solo\" debemos especificar el nombre descriptivo de la misma. Adem\u00e1s, si Laravel detecta la palabra <code>create</code> en el nombre de la migraci\u00f3n, finalizada en <code>table</code>, intuye que es para crear una tabla nueva. En cambio, si detecta la palabra <code>to</code> (entre otras), y al final la palabra <code>table</code>, intuye que se va a alterar o modificar una tabla existente. Esto es gracias a la clase <code>TableGuesser</code> incorporada en Laravel, que detecta ciertos patrones en los nombres de migraciones. La diferencia entre la creaci\u00f3n y la modificaci\u00f3n es que en el m\u00e9todo <code>up</code> de la migraci\u00f3n se utilizar\u00e1 <code>Schema::create</code> o <code>Schema::table</code> sobre la tabla en cuesti\u00f3n, respectivamente.</p> <p>nombre  de la migraci\u00f3n para la creaci\u00f3n de una tabla</p> <p>Adem\u00e1s del prefijo <code>create</code> y del sufijo <code>table</code>, el nombre \"central\" que deber\u00e1 tomar la migraci\u00f3n ser\u00e1 el nombre de la tabla en PLURAL y, a ser posible, en ingl\u00e9s. Ejemplo: <pre><code>php artisan make:migration create_products_table\n</code></pre></p> <p>Tipos de columnas y opciones comunes</p> <p>Para  definir los tipos de columnas y sus atributos Laravel proporciona un (Fluent) constructor de esquemas. Algunos m\u00e1s usados son:</p> <ul> <li><code>id()</code>: es un alias del m\u00e9todo <code>bigIncrements</code>. Por defecto, el m\u00e9todo crear\u00e1 una columna <code>id</code>; sin embargo, se puede pasar un nombre de columna si se desea asignar un nombre diferente a la columna (  <code>$table-&gt;id('campo')</code> ).</li> <li><code>string('titulo', 255)</code>: crea un <code>VARCHAR(255)</code>.</li> <li><code>text('descripcion')</code>: crea un <code>TEXT</code>.</li> <li><code>integer('stock')</code>: crea un <code>INT</code>.</li> <li><code>boolean('is_published')</code>: crea un <code>TINYINT(1)</code>.</li> <li><code>date('published_date')</code>: crea un <code>DATE</code>.</li> <li><code>foreignId('usuario_id')-&gt;constrained()</code>: crea una columna <code>usuario_id</code> como llave for\u00e1nea apuntando a la tabla <code>usuarios</code>.</li> </ul> <p>Aqu\u00ed podemos consultar el restos, documentaci\u00f3n oficial (debemos tener en cuenta que en Laravel 11 se mantienen estos m\u00e9todos con las mismas convenciones).</p> <p>Adem\u00e1s, se puede a\u00f1adir atributos como:</p> <ul> <li><code>nullable()</code>: permite valores <code>NULL</code>.</li> <li><code>default('texto por defecto')</code>: asigna un valor por defecto.</li> <li><code>unique()</code>: crea un \u00edndice \u00fanico.</li> <li><code>index()</code>: crea un \u00edndice b\u00e1sico.</li> <li><code>after('campo')</code>: crea un campo despu\u00e9s del indicado.</li> </ul> <pre><code>&lt;?php\n    // ...\n    Schema::create('posts', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('titulo')-&gt;unique();\n        $table-&gt;string('slug')-&gt;nullable()-&gt;index();\n        $table-&gt;text('descripcion')-&gt;nullable();\n        $table-&gt;integer('stock')-&gt;default(0);\n        $table-&gt;timestamp('published_at')-&gt;nullable();\n        $table-&gt;foreignId('user_id')-&gt;constrained()-&gt;onDelete('cascade');\n        $table-&gt;timestamps();\n    });\n</code></pre> <pre><code>$table-&gt;string('isbn')-&gt;unique()-&gt;after('id');\n</code></pre> <p>b) A\u00f1adir columnas en una tabla</p> <p>Para a\u00f1adir una columna a una tabla existente en Laravel se debe hacer uso de migraciones. Para ello, primero se debe crear una nueva migraci\u00f3n usando el comando <code>make:migration</code>.</p> <pre><code>php artisan make:migration add_estado_column_on_libros_table --table=libros\n</code></pre> <p>El comando anterior habr\u00e1 creado un nuevo archivo de migraci\u00f3n en el directorio <code>database/migrations</code>de nuestro proyecto:</p> <pre><code>&lt;?php\n\n    use Illuminate\\Database\\Migrations\\Migration;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Support\\Facades\\Schema;\n\n    return new class extends Migration\n    {\n        public function up(): void\n        {\n            Schema::table('libros', function (Blueprint $table) {\n                $table-&gt;string('estado')-&gt;after('descripcion')-&gt;default('muy bueno');\n            });\n        }\n\n        public function down(): void\n        {\n            Schema::table('libros', function (Blueprint $table) {\n                $table-&gt;dropColumn('status');\n            });\n        }\n    };\n</code></pre> <ul> <li>El m\u00e9todo <code>up</code>a\u00f1adir\u00e1 la columna <code>estado</code> de tipo <code>varchar</code>a la tabla libros despu\u00e9s de la columna estado utilizando por defecto el valor muy bueno.</li> <li>El m\u00e9todo <code>down</code>eliminar\u00e1 la columna cuando hagamos un rollback.</li> </ul> <p>c) Modificar columna en una tabla</p> <p>Para modificar una columna existente en una tabla en Laravel usando migraciones:</p> <pre><code>php artisan make:migration modify_estado_column_on_libros_table --table=users\n</code></pre> <p>Una vez creada la migraci\u00f3n, podemos modificar la columna estdo haciendo que su longitud sea de 15, en lugar de 255 que es el valor por defecto en MySQL utilizando el m\u00e9todo <code>change</code>:</p> <pre><code>&lt;?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\n\nreturn new class extends Migration\n{\n    public function up(): void\n    {\n        Schema::table('libros', function (Blueprint $table) {\n            $table-&gt;string('estado', 15)-&gt;change();\n        });\n    }\n\n\n    public function down(): void\n    {\n        Schema::table('libros', function (Blueprint $table) {\n            $table-&gt;string('estado')-&gt;change();\n        });\n    }\n};\n</code></pre> <ul> <li>El m\u00e9todo <code>up</code> cambia la longitud a 15.</li> <li>El m\u00e9todo <code>down</code> volver\u00e1 a dejar la longitud en 255.</li> </ul> <p>d) Eliminar columna en una tabla</p> <p>El proceso para eliminar columnas utilizando migraciones en Laravel es el mismo, primero debemos crear una nueva migraci\u00f3n usando el comando <code>make:migration</code>.</p> <pre><code>php artisan make:migration drop_status_column_on_users_table --table=users\n</code></pre> <p>Una vez tenemos nuestra migraci\u00f3n, debemos definir los m\u00e9todo up y down, veamos:</p> <pre><code>&lt;?php\n\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\n\nreturn new class extends Migration\n{\n    public function up(): void\n    {\n        Schema::table('users', function (Blueprint $table) {\n            $table-&gt;dropColumn('status');\n        });\n    }\n\n\n    public function down(): void\n    {\n        Schema::table('users', function (Blueprint $table) {\n            $table-&gt;string('status')-&gt;after('email')-&gt;default('active');\n        });\n    }\n};\n</code></pre> <ul> <li>El m\u00e9todo <code>up</code> elimina la columna status.</li> <li>El m\u00e9todo <code>down</code> vuelve a crear la columna status, es s\u00faper importante que la columna quede en el \u00faltimo estado que ten\u00eda.</li> </ul> <p>Crear la migraci\u00f3n sin patrones</p> <p>En cualquier caso, tambi\u00e9n podemos especificar un par\u00e1metro adicional en el comando de migraci\u00f3n para indicar si queremos crear o modificar una tabla, y de este modo podemos definir el nombre de la migraci\u00f3n en el idioma que queramos, y sin restricciones de patrones. Estas dos migraciones crean una tabla (pedidos) y modifican otra (usuarios), respectivamente:</p> <pre><code>php artisan make:migration crear_tabla_pedidos --create=pedidos\nphp artisan make:migration nuevo_campo_usuario --table=usuarios\n</code></pre>"},{"location":"ut09/ut0903/#321-ejecucion-y-borrado-de-migraciones","title":"3.2.1. Ejecuci\u00f3n y borrado de migraciones","text":"<p>Para ejecutar las migraciones (el m\u00e9todo <code>up</code> de cada una), lanzamos el siguiente comando desde la carpeta de nuestro proyecto (habiendo creado la base de datos ya previamente, y modificado las credenciales de acceso en el archivo <code>.env</code>):</p> <pre><code>php artisan migrate\n</code></pre> <p>Adicionalmente a las tablas afectadas, se tendr\u00e1 otra tabla migrations en la base de datos con un hist\u00f3rico de las migraciones realizadas. Para cada una, se almacena su id (autonum\u00e9rico), el nombre de la migraci\u00f3n, y el n\u00famero de proceso por lotes en que se hizo (aquellas que compartan el mismo n\u00famero se hicieron a la vez en el mismo lote). De este modo, aquellas que ya se hayan hecho no se volver\u00e1n a realizar.</p> <p>Para deshacer las migraciones realizadas (ejecutar el m\u00e9todo <code>down</code> de las mismas), ejecutamos:</p> <pre><code>php artisan migrate:rollback\n</code></pre> <p>Esto eliminar\u00e1 TODAS las migraciones del \u00faltimo lote existente en la tabla <code>migrations</code>. Si no queremos deshacerlo todo, sino retroceder un n\u00famero determinado de migraciones dentro de ese lote, ejecutamos el comando anterior con un par\u00e1metro <code>--step</code>, indicando el n\u00famero de pasos o migraciones a deshacer (en orden cronol\u00f3gico de m\u00e1s reciente a m\u00e1s antigua):</p> <pre><code>php artisan migrate:rollback --step=2\n</code></pre> <p>Si volvemos a hacer la migraci\u00f3n, se restablecer\u00e1n las migraciones deshechas de ese lote.</p> <p>Otro comando tambi\u00e9n muy utilizado es <code>migrate:fresh</code>. Lo que hace es eliminar todas las migraciones realizadas y volverlas a lanzar. Es \u00fatil cuando, estando en desarrollo, a\u00f1adimos campos nuevos a alguna tabla y queremos rehacer las tablas completamente.</p> <pre><code>php artisan migrate:fresh\n</code></pre> <p>Ejecutar comando <code>migrate:fresh</code></p> <p>El comando <code>migrate:fresh</code> es DESTRUCTIVO, elimina los contenidos de las tablas, y s\u00f3lo debe utilizarse en entornos de desarrollo, no de producci\u00f3n.</p>  Aplicando las migraciones a nuestro ejemplo biblioteca <p>Vamos a poner en pr\u00e1ctica todo lo visto en este apartado sobre nuestro proyecto <code>biblioteca</code>:</p> <ol> <li> <p>Anteriormente ya hemos comentado c\u00f3mo modificar el archivo <code>.env</code> del proyecto para darle los par\u00e1metros de conexi\u00f3n correctos a la base de datos, y </p> </li> <li> <p>c\u00f3mo crear la base de datos \u201cbiblioteca\u201d desde phpMyAdmin. Revisa ese apartado para hacer estos pasos, si no los has hecho ya.</p> </li> <li> <p>A continuaci\u00f3n, vamos a eliminar las migraciones que no nos van a ser necesarias de la carpeta <code>database/migrations</code>. En concreto, borramos todas salvo la de creaci\u00f3n de la tabla de usuarios <code>create_users_table</code>.</p> </li> <li> <p>Despu\u00e9s, editamos la migraci\u00f3n para la tabla de usuarios (<code>create_users_table</code>), ya que la utilizaremos en sesiones posteriores. Podemos renombrar el archivo a <code>crear_tabla_usuarios</code>. La clase interna en versiones recientes de Laravel no tiene nombre, se crea simplemente un subtipo de la clase Migration:</p> </li> </ol> <pre><code>// ...\n\nreturn new class extends Migration\n{\n  // ...\n}\n</code></pre> <p> </p> <p>En versiones anteriores donde s\u00ed tenga nombre, podemos reemplazar el nombre viejo (CreateUsersTable) por CrearTablaUsuarios, por ejemplo.</p> <p>La tabla a la que se alude en los m\u00e9todos <code>up</code> y <code>down</code> tambi\u00e9n la renombramos a <code>usuarios</code>, para dejarlo en nuestro idioma (respetando la fecha de creaci\u00f3n en el nombre del archivo), y despu\u00e9s editamos el m\u00e9todo <code>up</code> para dejarlo as\u00ed:</p> <pre><code>public function up()\n{\n  Schema::create('usuarios', function(Blueprint $table) {\n     $table-&gt;id();\n     $table-&gt;string('login')-&gt;unique();\n     $table-&gt;string('password');\n     $table-&gt;timestamps();\n  });\n}\n</code></pre> <p>Ahora vamos a crear una nueva migraci\u00f3n para definir la estructura de los libros:</p> <pre><code>php artisan make:migration crear_tabla_libros --create=libros\n</code></pre> <p>Editamos despu\u00e9s el contenido de esta migraci\u00f3n, en concreto el m\u00e9todo <code>up</code> para definir estos campos en los libros:</p> <pre><code>bpublic function up()\n{\n  Schema::create('libros', function(Blueprint $table) {\n     $table-&gt;id();\n     $table-&gt;string('titulo');\n     $table-&gt;string('editorial')-&gt;nullable();\n     $table-&gt;float('precio');\n     $table-&gt;timestamps();\n  });\n}\n</code></pre> <p>Cargamos las migraciones con el comando:</p> <pre><code>php artisan migrate\n</code></pre> <p>Tras esto, ya deber\u00edamos ver en nuestra base de datos \u201cbiblioteca\u201d las dos tablas creadas (usuarios y libros), junto con la tabla migrations que crea Laravel para gestionar las migraciones realizadas.</p>"},{"location":"ut09/ut0903/#322-aparacion-de-la-tabla-personal_access_tokens","title":"3.2.2. Aparaci\u00f3n de la tabla personal_access_tokens","text":"<p>Si, adem\u00e1s de las tablas anteriores, aparece una tabla de personal_access_tokens (\u00e9sta la crea autom\u00e1ticamente el paquete Sanctum) incorporada por defecto en Laravel.Esta tabla no molesta para lo que vamos a hacer durante estas unidades, pero si se quiere quitar, hay que editar el archivo <code>app\\Providers\\AppServiceProvider.php</code> y a\u00f1adir esta l\u00ednea en el m\u00e9todo <code>register</code> (junto con el correspondiente <code>use</code> para la clase <code>Sanctum</code>):</p> <p><pre><code>// ...\nuse Laravel\\Sanctum\\Sanctum;\n\nclass AppServiceProvider ...\n{\n  // ...\n  public function register()\n  {\n      Sanctum::ignoreMigrations();\n  }\n  // ...\n}\n</code></pre> Despu\u00e9s, lanzamos <code>php artisan migrate:fresh</code> para ejecutar desde cero las migraciones, y esa tabla habr\u00e1 desaparecido.</p> Ejercicios a realizar <ul> <li><code>Ejercicio 1</code>.</li> <li><code>Ejercicio 2</code>.</li> </ul>"},{"location":"ut09/ut0904/","title":"Ut0904","text":"<p>Ahora que ya tenemos la estructura de tablas creada en la base de datos, vamos a ver qu\u00e9 mecanismos ofrece Laravel para acceder a estos datos de forma sencilla desde la aplicaci\u00f3n. </p> <p>Laravel es un framework que facilita el desarrollo de aplicaciones web mediante una estructura clara y herramientas avanzadas. Uno de sus pilares fundamentales es Eloquent ORM (Object-Relational Mapping), que permite interactuar con bases de datos de forma intuitiva utilizando modelos de PHP en lugar de consultas SQL directas. Cada modelo en Laravel representa una tabla de la base de datos y proporciona m\u00e9todos para realizar operaciones CRUD (Crear, Leer, Actualizar y Eliminar) de manera sencilla y expresiva.</p> <p>El modelo de datos en Laravel se define a trav\u00e9s de clases que extienden <code>Illuminate\\Database\\Eloquent\\Model</code>. Estos modelos pueden incluir relaciones entre tablas, como uno a uno, uno a muchos y muchos a muchos, facilitando la gesti\u00f3n de datos relacionales. Adem\u00e1s, Laravel incorpora migraciones para estructurar y versionar la base de datos, as\u00ed como factories y seeders para poblarla con datos de prueba, lo que agiliza el desarrollo y mantenimiento de aplicaciones web robustas.</p>"},{"location":"ut09/ut0904/#41-crear-el-modelo","title":"4.1. Crear el modelo","text":"<p>La idea es crear una clase por cada tabla que tengamos en nuestra base de datos, para as\u00ed interactuar con la tabla a trav\u00e9s de dicha clase asociada. Para crear esta clase modelo, utilizamos la opci\u00f3n <code>make:model</code> del comando <code>php artisan</code>. Le pasaremos como par\u00e1metro adicional el nombre de la clase a crear. Por ejemplo, para el caso de nuestra biblioteca, podemos crear as\u00ed el modelo <code>Libro</code>:</p> <pre><code>php artisan make:model Libro\n</code></pre> <p>Por convenci\u00f3n, los modelos se crean con un nombre en singular, empezando por may\u00fascula, y se ubican en la carpeta <code>app\\Models</code>. La estructura b\u00e1sica del modelo es algo as\u00ed:</p> <pre><code>&lt;?php\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Libro extends Model\n{\n\n}\n?&gt;\n</code></pre> <p>En nuestro caso, vamos tambi\u00e9n a utilizar el modelo de usuario que ya existe en la carpeta <code>app\\Models</code>, aunque lo renombraremos de <code>User</code> a <code>Usuario</code>:</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Usuario extends Model\n{\n  // ...\n</code></pre> <p> </p> <p>Hasta Laravel 7, los modelos se generaban autom\u00e1ticamente en la carpeta <code>app</code>, y era necesario moverlos manualmente a una subcarpeta si quer\u00edamos estructurar mejor nuestro c\u00f3digo, actualizando tambi\u00e9n el <code>namespace</code> correspondiente. Desde Laravel 8 la ubicaci\u00f3n en la carpeta <code>app\\Models</code> se realiza por defecto.</p> <p>Autom\u00e1ticamente, se asocia este modelo a una tabla con el mismo nombre, pero en plural y en min\u00fascula, por lo que los modelos anteriores estar\u00edan asociados a unas tablas libros y usuarios en la base de datos, respectivamente. En caso de que no queramos que sea as\u00ed, definimos una propiedad <code>$table</code> en la clase con el nombre que queramos que tenga la tabla asociada. Por ejemplo:</p> <pre><code>class Libro extends Model\n{\n  protected $table = 'mislibros';\n}\n</code></pre>"},{"location":"ut09/ut0904/#411-otras-opciones-de-crear-modelos","title":"4.1.1. Otras opciones de crear modelos","text":"<p>El comando anterior <code>make:model</code> admite unos par\u00e1metros adicionales, de forma que se puede crear a la vez el modelo y la migraci\u00f3n, y m\u00e1s a\u00fan, el modelo, la migraci\u00f3n y el controlador asociado. Veamos algunos ejemplos:</p>"},{"location":"ut09/ut0904/#opcion-m","title":"Opci\u00f3n -m","text":"<pre><code>php artisan make:model Pelicula -m\n</code></pre> <p>El comando anterior crea un modelo <code>Pelicula</code> en la carpeta <code>app\\Models</code> y, adem\u00e1s, crea una migraci\u00f3n llamada <code>create_peliculas_table</code> en la carpeta <code>database/migrations</code>, lista para que editemos el m\u00e9todo <code>up</code> y especifiquemos los campos necesarios.</p> <p>Se puede observar que el nombre de la migraci\u00f3n a\u00f1ade una \u201cs\u201d al nombre de la tabla autom\u00e1ticamente, a partir del modelo en singular.</p>"},{"location":"ut09/ut0904/#opcion-mc","title":"Opci\u00f3n -mc","text":"<pre><code>php artisan make:model Pelicula -mc\n</code></pre> <p>Este otro comando crea: modelo <code>Pelicula</code> , una migraci\u00f3n asociada y, adem\u00e1s, un controlador llamado <code>PeliculaController</code> en la carpeta <code>app\\Http\\Controllers</code>. Dicho controlador est\u00e1 vac\u00edo, para que a\u00f1adamos los m\u00e9todos que consideremos.</p>"},{"location":"ut09/ut0904/#opcion-mcr","title":"Opci\u00f3n -mcr","text":"<pre><code>php artisan make:model Pelicula -mcr\n</code></pre> <p>Esta otra opci\u00f3n crea: modelo <code>Pelicula</code> , migraci\u00f3n <code>XXX_create_peliculas_table</code> y controlador <code>PeliculaController</code>, pero el controlador <code>PeliculaController</code> es en este caso un controlador de recursos, por lo que tiene ya incorporados el conjunto de m\u00e9todos propios de este tipo de controladores: <code>index</code>, <code>show</code>, <code>create</code>, <code>store</code>, <code>edit</code>, <code>update</code> y <code>destroy</code>.</p>"},{"location":"ut09/ut0904/#opcion-extendida","title":"Opci\u00f3n extendida","text":"<p>Podemos tambi\u00e9n usar la versi\u00f3n extendida de estos par\u00e1metros. Por ejemplo:</p> <pre><code>php artisan make:model Pelicula --migration --controller --resource\n</code></pre> <p>En nuestro caso, como hemos ido creando los controladores y migraciones antes que los modelos, no ser\u00eda necesario dar este paso, pero ahora que ya empezamos a ver c\u00f3mo funciona y se interrelaciona todo, puede resultar \u00fatil emplear este comando para crear de golpe todas las partes implicadas (modelo, migraci\u00f3n y controlador).</p>"},{"location":"ut09/ut0904/#todas-las-opciones","title":"Todas las opciones","text":"Opci\u00f3n Descripci\u00f3n <code>-a, --all</code> Genera un modelo, migraci\u00f3n, factory, seeder, y controller (de tipo resource). <code>-c, --controller</code> Crea un controller para el modelo. <code>-f, --factory</code> Genera un factory para el modelo. <code>-m, --migration</code> Crea una migraci\u00f3n para la tabla asociada al modelo. <code>-s, --seed</code> Genera un seeder para poblar la base de datos con datos de ejemplo. <code>-p, --pivot</code> Indica que el modelo es para una tabla intermedia (pivot table). <code>-r, --resource</code> Indica que el controlador asociado ser\u00e1 un resource controller. <code>--policy</code> Crea una pol\u00edtica de autorizaci\u00f3n para el modelo. <code>--force</code> Sobrescribe cualquier archivo existente generado previamente. <p>Seguir una nomenclatura uniforme</p> <p>Recuerda que, de sesiones anteriores, hemos comentado la recomendaci\u00f3n/necesidad de seguir una nomenclatura uniforme en los modelos, controladores y vistas.</p> <p>As\u00ed, para el modelo <code>Libro</code> ya tendr\u00edamos su controlador asociado <code>LibroController</code>, y las vistas se definir\u00edan en la subcarpeta <code>resources/views/libros</code>, con los nombres correspondientes a cada m\u00e9todo del controlador (por ejemplo, <code>index.blade.php</code>, o <code>show.blade.php</code>).</p>"},{"location":"ut09/ut0904/#42-operaciones-sobre-el-modelo-primeros-pasos-con-eloquent","title":"4.2. Operaciones sobre el modelo. Primeros pasos con Eloquent","text":"<p>Eloquent es el ORM incorporado por defecto en Laravel. Un ORM (Object Relational Mapping) es una herramienta que permite establecer una relaci\u00f3n entre los registros de una tabla de la base de datos y los objetos de una clase (de PHP en nuestro caso), de forma que los datos de la base de datos se convierten a objetos PHP y viceversa. Adem\u00e1s, Eloquent implementa el patr\u00f3n Active Record, que a\u00f1ade a las clases m\u00e9todos como <code>save</code>, <code>update</code>, <code>delete</code>\u2026 que permiten interactuar con la base de datos para insertar, modificar o borrar registros asociados a objetos, respectivamente.</p>"},{"location":"ut09/ut0904/#421-realizar-busquedas","title":"4.2.1. Realizar b\u00fasquedas","text":"<p>Una vez creado el modelo, y aunque est\u00e9 vac\u00edo, ya podemos utilizarlo en los controladores para acceder a los datos. Bastar\u00eda con importar la clase correspondiente (con <code>use</code>), y utilizar los m\u00e9todos que se heredan de <code>Model</code>. Por ejemplo, el m\u00e9todo <code>get</code> permite obtener los registros de la tabla, convertidos a objetos. As\u00ed es como obtendr\u00edamos todos los libros de la tabla desde un controlador:</p> <pre><code>// ...\nuse App\\Models\\Libro;\n// ...\n\nclass LibroController extends Controller\n{\n  public function index()\n  {\n     $libros = Libro::get();\n     return view('libros.index', compact('libros'));\n  }\n}\n</code></pre> <p>Lo que obtenemos es un array de objetos, por lo que deberemos acceder a sus propiedades como tales. Por ejemplo, si queremos mostrar los t\u00edtulos de los libros en una vista Blade, har\u00edamos algo como esto:</p> <pre><code>@forelse($libros as $libro)\n  {{ $libro-&gt;titulo }}\n@endforelse\n</code></pre> <p>Alternativamente, tambi\u00e9n podemos obtener una consulta filtrada, especificando con el m\u00e9todo <code>where</code> la condici\u00f3n que deben cumplir los registros a obtener. Por ejemplo, as\u00ed obtendr\u00edamos los libros cuyo precio sea inferior a 10 euros:</p> <pre><code>$libros = Libro::where('precio', '&lt;', 10)\n               -&gt;get();\n</code></pre> <p>De este otro modo, obtendr\u00edamos libros con precio inferior a 10 euros y superior a 5 euros, de manera que podemos combinar condiciones:</p> <pre><code>$libros = Libro::where('precio', '&lt;', 10)\n               -&gt;where('precio', '&gt;', 5)\n               -&gt;get();\n</code></pre> <p>Sobre estas consultas base podemos aplicar una serie de a\u00f1adidos. Por ejemplo, podemos querer ordenar los libros por t\u00edtulo, para lo que har\u00edamos esto en el controlador:</p> <pre><code>$libros = Libro::orderBy('titulo')\n               -&gt;get();\n</code></pre> <p>El m\u00e9todo <code>orderBy</code> admite un segundo par\u00e1metro que indica el sentido de la ordenaci\u00f3n. Por defecto es <code>ASC</code> (ascendente), pero tambi\u00e9n puede ser <code>DESC</code>:</p> <pre><code>$libros = Libro::orderBy('titulo', 'DESC')\n               -&gt;get();\n</code></pre> <p>Paginaciones de resultados</p> <p>Si queremos paginar los resultados obtenidos debemos, por un lado, cuando obtengamos el listado desde el controlador, indicar con <code>paginate</code> cu\u00e1ntos registros queremos por p\u00e1gina:</p> <pre><code>public function index()\n{\n  $libros = Libro::paginate(5);\n  return view('libros.index', compact('libros'));\n}\n</code></pre> <p>Despu\u00e9s, en la vista asociada (<code>libros.index</code> en el ejemplo anterior) podemos emplear el m\u00e9todo <code>links</code> para que muestre los botones de paginaci\u00f3n en el lugar deseado:</p> <pre><code>@forelse($libros as $libro)\n  {{ $libro-&gt;titulo }}\n@endforelse\n\n{{ $libros-&gt;links() }}\n</code></pre> <p>Si queremos ordenar el listado, podemos emplear <code>orderBy</code> u <code>orderByDesc</code>, pas\u00e1ndole como par\u00e1metro el nombre del campo por el que ordenar, antes de la paginaci\u00f3n. Podemos, incluso, ordenar por m\u00faltiples criterios concatenados:</p> <pre><code>public function index()\n{\n  $libros = Libro::orderByAsc('titulo')\n                 -&gt;orderByAsc('editorial')\n                 -&gt;paginate(5);\n  return view('libros.index', compact('libros'));\n}\n</code></pre> <p>Paginaciones desde Laravel 8</p> <p>En la versi\u00f3n 8 de Laravel se ha cambiado el estilo de los botones de paginaci\u00f3n, empleando el del framework Tailwind CSS. Si queremos seguir utilizando los de Bootstrap, debemos a\u00f1adir una de estas l\u00edneas en el m\u00e9todo <code>boot</code> del provider <code>App\\Providers\\AppServiceProvider</code>, dependiendo de la versi\u00f3n de Bootstrap que queramos usar (por defecto se usar\u00e1 la 5 en la versi\u00f3n actual de los apuntes):</p> <pre><code>// Bootstrap 4\nPaginator::useBootstrap();\n// Bootstrap 5\nPaginator::useBootstrapFive();\n</code></pre> <p>Adem\u00e1s, debemos incorporar la cl\u00e1usula <code>use</code> para localizar el elemento <code>Paginator</code>:</p> <pre><code>use Illuminate\\Pagination\\Paginator;\n</code></pre>"},{"location":"ut09/ut0904/#422-fichas-de-objetos-individuales","title":"4.2.2. Fichas de objetos individuales","text":"<p>Una operaci\u00f3n bastante habitual es mostrar una ficha de un objeto a partir de un listado, haciendo clic en el t\u00edtulo o alguna parte visible de ese objeto. Por ejemplo, si queremos ver los datos de un libro a partir de un listado con sus t\u00edtulos, podemos hacer algo como esto en la plantilla Blade:</p> <pre><code>@forelse($libros as $libro)\n  &lt;li&gt;\n     &lt;a href=\"{{ route('libros.show', $libro) }}\"&gt;\n         {{ $libro-&gt;titulo }}\n     &lt;/a&gt;\n  &lt;/li&gt;\n@endforelse\n</code></pre> <p>Vemos que hemos utilizado el m\u00e9todo <code>route</code> para indicar la ruta a seguir, con un segundo par\u00e1metro, que en este caso es el objeto concreto de esa fila. Laravel autom\u00e1ticamente lo reemplazar\u00e1 en el enlace por el identificador de dicho objeto.</p> <p>Por su parte, la ruta asociada a este enlace podr\u00eda ser algo as\u00ed (en el archivo de rutas):</p> <pre><code>Route::get('/libros/{id}', [LibroController::class, 'show']) -&gt; name('libros.show');\n</code></pre> <p>Aunque tambi\u00e9n podemos haber definido las rutas como un paquete de recursos, y cada una tendr\u00e1 su m\u00e9todo asociado:</p> <pre><code>Route::resource('libros', LibroController::class);\n</code></pre> <p>Finalmente, el m\u00e9todo <code>show</code> del controlador asociado se encargar\u00e1 de obtener los datos del libro a partir de su id, y generar la vista correspondiente. Para obtener los datos de un objeto a partir de su identificador, podemos emplear el m\u00e9todo <code>find</code> del modelo, pas\u00e1ndole como par\u00e1metro el identificador. As\u00ed, podr\u00edamos generar una vista con los datos como \u00e9sta:</p> <pre><code>// ...\nclass LibroController extends Controller\n{\n  // ...\n\n  public function show($id)\n  {\n    $libro = Libro::find($id);\n    return view('libros.show', compact('libro'));\n  }\n}\n</code></pre> <p>Retornar objeto/registro/fila en formato JSON</p> <p>Si devolvemos (<code>return</code>) directamente lo que obtiene el m\u00e9todo <code>find</code>: <pre><code>// ...\nclass LibroController extends Controller\n{\n  // ...\n\n  public function show($id)\n  {\n    $libro = Libro::find($id);\n    return $libro;\n  }\n}\n</code></pre> nos llegar\u00e1 al navegador en formato JSON. De hecho, si devolvemos un array, Laravel lo env\u00eda directamente en formato JSON. Esta caracter\u00edstica la utilizaremos m\u00e1s adelante para definir servicios REST.</p> <p>En el caso de que el objeto no se encuentre (porque, por ejemplo, utilicemos un id equivocado), la vista generada fallar\u00e1. Para evitarlo, en lugar del m\u00e9todo <code>find</code> podemos emplear <code>findOrFail</code>, que, en caso de que no se encuentre el objeto, generar\u00e1 una vista con un error 404, m\u00e1s apropiada. Adem\u00e1s, recuerda que puedes personalizar estas p\u00e1ginas de error definiendo las vistas correspondientes.</p> <pre><code>$libro = Libro::findOrFail($id);\n</code></pre> <p>En este punto, y a falta de que podamos hacer inserciones m\u00e1s adelante, puedes probar a insertar unos pocos libros de prueba en la base de datos biblioteca desde phpMyAdmin, y probar estas dos rutas que hemos hecho (listado y ficha de libro).</p>"},{"location":"ut09/ut0904/#423-inserciones","title":"4.2.3. Inserciones","text":"<p>Las inserciones a trav\u00e9s de Eloquent se pueden realizar creando una instancia del objeto, rellenando sus atributos y llamando al m\u00e9todo <code>save</code>, heredado de la superclase <code>Model</code>.</p> <pre><code>$libro = new Libro();\n$libro-&gt;titulo = \"El juego de Ender\";\n$libro-&gt;editorial = \"Ediciones B\";\n$libro-&gt;precio = 8.95;\n$libro-&gt;save();\n</code></pre> <p>Como alternativa, tambi\u00e9n se puede utilizar el m\u00e9todo <code>create</code> del modelo, y pasarle todos los datos de la petici\u00f3n, que llegar\u00edan desde un formulario, como veremos m\u00e1s adelante:</p> <pre><code>Libro::create($request-&gt;all());\n</code></pre> <p>Para que esto \u00faltimo funcione, deben cumplirse dos premisas:</p> <ul> <li>Cada campo de la petici\u00f3n debe tener asociado un campo del mismo nombre en el modelo.</li> <li>Definir en el modelo una propiedad llamada <code>$fillable</code> con los nombres de los campos de la petici\u00f3n que nos interesa procesar (el resto se descartan). Esto es obligatorio especificarlo, aunque nos interesen todos los campos, para evitar inserciones masivas malintencionadas (por ejemplo, editando el c\u00f3digo fuente para a\u00f1adir otros campos y modificar datos inesperados).</li> </ul> <pre><code>class Libro extends Model\n{\n  protected $fillable = ['titulo', 'editorial', 'precio'];\n}\n</code></pre> <p>Este c\u00f3digo de inserci\u00f3n (o bien campo a campo, o usando el m\u00e9todo <code>all</code>) se suele poner en el m\u00e9todo <code>store</code> del controlador, para que reciba los datos del formulario de inserci\u00f3n y la haga en la base de datos. Lo terminaremos de ver cuando abordemos en la siguiente unidad los formularios en Laravel.</p>"},{"location":"ut09/ut0904/#424-modificaciones","title":"4.2.4. Modificaciones","text":"<p>La modificaci\u00f3n consiste en dos pasos:</p> <ol> <li> <p>Encontrar el objeto a modificar (busc\u00e1ndolo por el id con <code>findOrFail</code>, por ejemplo, como se ha explicado antes).</p> </li> <li> <p>Modificar las propiedades que se necesiten, y llamar al m\u00e9todo <code>save</code> del objeto para guardar los cambios.</p> </li> </ol> <p>Por ejemplo:</p> <pre><code>$libroAModificar = Libro::findOrFail($id);\n$libroAModificar-&gt;titulo=\"Otro t\u00edtulo\";\n$libroAModificar-&gt;save();\n</code></pre> <p>Tambi\u00e9n podemos utilizar el m\u00e9todo <code>update</code> enlazado con <code>findOrFail</code>, y pasarle como par\u00e1metro todos los datos de la petici\u00f3n, igual que se ha explicado para la inserci\u00f3n, y siempre y cuando hayamos declarado el atributo <code>$fillable</code> en el modelo para indicar qu\u00e9 campos se aceptan:</p> <pre><code>Libro::findOrFail($id)-&gt;update($request-&gt;all());\n</code></pre> <p>Este c\u00f3digo de modificaci\u00f3n se suele poner en el m\u00e9todo <code>update</code> del controlador, para que reciba los datos del formulario de edici\u00f3n y haga la modificaci\u00f3n correspondiente. Lo terminaremos de ver cuando abordemos el tema de los formularios en Laravel.</p>"},{"location":"ut09/ut0904/#425-borrados","title":"4.2.5. Borrados","text":"<p>Para hacer el borrado, tambi\u00e9n buscamos el objeto a borrar con <code>findOrFail</code>, y luego llamamos a su m\u00e9todo <code>delete</code>:</p> <pre><code>Libro::findOrFail($id)-&gt;delete();\n</code></pre> <p>Esto lo haremos normalmente en el m\u00e9todo <code>destroy</code> del controlador en cuesti\u00f3n. Despu\u00e9s, podemos redirigir o renderizar alguna vista resultado, como el listado de libros general para comprobar que se ha borrado.</p> <pre><code>public function destroy($id)\n{\n  Libro::findOrFail($id)-&gt;delete();\n  $libros = Libro::get();\n  return view('libros.index', compact('libros'));\n}\n</code></pre> <p>Sobre el borrado desde las vistas</p> <p>Lo normal es que el borrado se active haciendo clic en alg\u00fan elemento de una vista. Por ejemplo, haciendo clic en un bot\u00f3n o enlace que ponga \u201cBorrar\u201d. </p> <p>Sin embargo, si implementamos esto as\u00ed:</p> <p><pre><code>&lt;a href=\"{{ route('libros.destroy', $libro }}\"&gt;\n   Borrar\n&lt;/a&gt;\n</code></pre> Si queremos borrar el libro con id 3, se generar\u00e1 una ruta http://biblioteca/libros/3. Lo podemos comprobar pasando el rat\u00f3n por el enlace y viendo la barra inferior de estado del navegador. Esta ruta, sin embargo, nos va a enviar a la ficha del libro 3, no al borrado, ya que estamos enviando una petici\u00f3n GET, y no una de borrado (DELETE). </p> <p>Para evitar esto, la opci\u00f3n de borrado debe hacerse siempre desde un formulario, donde a trav\u00e9s del helper <code>@method</code> indicamos que es una petici\u00f3n de borrado (DELETE). Con lo que el enlace para borrar un libro quedar\u00eda as\u00ed:</p> <pre><code>&lt;form action=\"{{ route('libros.destroy', $libro) }}\" method=\"POST\"&gt;\n  @method('DELETE')\n  @csrf\n  &lt;button&gt;Borrar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p> </p> <p>El helper <code>@csrf</code> lo veremos con m\u00e1s detalle al hablar de formularios, pero se a\u00f1ade a los formularios Laravel para evitar ataques de tipo cross-site, es decir, accesos a una URL de nuestra web desde otras webs.</p>"},{"location":"ut09/ut0905/","title":"Ut0905","text":"<p>En esta sesi\u00f3n veremos qu\u00e9 tipos de relaciones se pueden establecer entre los modelos de la aplicaci\u00f3n, y c\u00f3mo se reflejan autom\u00e1ticamente en la base de datos. Para ello, Eloquent permite definir relaciones de varios tipos entre tablas. \u00c9stas se definen a trav\u00e9s de los distintos modelos involucrados en la relaci\u00f3n, como veremos a continuaci\u00f3n.</p>"},{"location":"ut09/ut0905/#51-relaciones-uno-a-uno-one-to-one","title":"5.1. Relaciones uno a uno ( one to one )","text":"<p>Supongamos que tenemos dos modelos <code>Usuario</code> y <code>Telefono</code>, de modo que podemos establecer una relaci\u00f3n uno a uno entre ellos: un usuario tiene un tel\u00e9fono, y un tel\u00e9fono pertenece a un usuario.</p> <p>Para reflejar esta relaci\u00f3n en tablas, una de las dos deber\u00eda tener una referencia a la otra. En este caso, podr\u00edamos tener un campo <code>telefono_id</code> en la tabla de <code>usuarios</code> que indique el tel\u00e9fono que pertenece a dicho usuario, o viceversa (un campo <code>usuario_id</code> en la tabla <code>telefonos</code> que indique a qu\u00e9 usuario pertenece un tel\u00e9fono). Conceptualmente es m\u00e1s correcta la primera opci\u00f3n (el usuario tiene el tel\u00e9fono), as\u00ed que seguiremos ese primer ejemplo. Es importante que el campo nuevo en la tabla <code>usuarios</code> se llame <code>telefono_id</code>, como veremos a continuaci\u00f3n.</p> <p>Para indicar que un usuario tiene un tel\u00e9fono, a\u00f1adimos un nuevo m\u00e9todo en el modelo de <code>Usuario</code>, que se llame igual que el modelo con el que queremos conectar (<code>telefono</code>, en este caso). Dentro, usaremos el m\u00e9todo <code>hasOne</code> del modelo de usuario para indicar que un objeto de este tipo tiene un objeto del otro modelo (tel\u00e9fono):</p> <pre><code>class Usuario extends Model\n{\n  public function telefono()\n  {\n     return $this-&gt;hasOne(Telefono::class);\n  }\n}\n</code></pre> <p>Ahora, si queremos obtener el tel\u00e9fono de un usuario, basta con que hagamos esto:</p> <pre><code>$telefono = Usuario::findOrFail($id)-&gt;telefono;\n</code></pre> <p>Hemos empleado una caracter\u00edstica de Eloquent denominada propiedades din\u00e1micas, por la cual podemos referenciar un m\u00e9todo de relaci\u00f3n como si fuera una propiedad (en lugar de usar telefono(), hemos empleado telefono).</p> <p>La instrucci\u00f3n anterior obtiene el objeto <code>Telefono</code> asociado con el usuario buscado (a trav\u00e9s del <code>$id</code> del tel\u00e9fono). Para que esta asociaci\u00f3n tenga efecto, es preciso que en la tabla <code>usuarios</code> exista un campo <code>telefono_id</code> y que se corresponda con un campo <code>id</code> de la tabla de <code>telefonos</code>, de modo que Eloquent establece la conexi\u00f3n entre una y otra tabla. Deberemos definir una nueva migraci\u00f3n de modificaci\u00f3n sobre la tabla usuarios para a\u00f1adir ese nuevo campo, o refrescar la migraci\u00f3n original con \u00e9l y borrar los contenidos previos.</p> <p>Si queremos utilizar otros campos distintos en una y otra tabla para conectarlas, debemos indicar dos par\u00e1metros m\u00e1s al llamar a <code>hasOne</code>. Por ejemplo, as\u00ed relacionar\u00edamos las dos tablas anteriores, indicando que la clave ajena de <code>usuarios</code> a <code>telefonos</code> es <code>idTelefono</code>, y que la clave primaria de <code>telefonos</code> a la que se referencia es <code>codigo</code>:</p> <pre><code>return $this-&gt;hasOne(Telefono::class, 'idTelefono', 'codigo');\n</code></pre> <p>Tambi\u00e9n es posible obtener la relaci\u00f3n inversa, es decir, a partir de un tel\u00e9fono, obtener el usuario al que pertenece. Para ello, a\u00f1adimos un m\u00e9todo <code>usuario</code> en el modelo <code>Telefono</code> y empleamos el m\u00e9todo <code>belongsTo</code> para indicar a qu\u00e9 modelo se asocia:</p> <pre><code>class Telefono extends Model\n{\n  public function usuario()\n  {\n     return $this-&gt;belongsTo(Usuario::class);\n  }\n}\n</code></pre> <p>Nuevamente, podemos especificar otros nombres de clave pasando par\u00e1metros adicionales a <code>belongsTo</code>, igual que se hace para <code>hasOne</code>.</p> <p>De este modo, si queremos obtener el usuario a partir del tel\u00e9fono, podemos hacerlo as\u00ed:</p> <pre><code>$usuario = Telefono::findOrFail($idTelefono)-&gt;usuario;\n</code></pre>"},{"location":"ut09/ut0905/#511-guardar-datos-relacionados","title":"5.1.1. Guardar datos relacionados","text":"<p>Supongamos que queremos guardar un usuario con su tel\u00e9fono asociado. Podemos simplemente guardar el id del tel\u00e9fono como un campo m\u00e1s del usuario:</p> <pre><code>// Buscamos el tel\u00e9fono que queremos asociar\n// (suponiendo que existe previamente)\n$telefono = Telefono::findOrFail($idTelefono);\n$usuario = new Usuario();\n$usuario-&gt;nombre = \"Pepe\";\n$usuario-&gt;email = \"pepe@gmail.com\";\n$usuario-&gt;telefono_id = $telefono-&gt;id;\n$usuario-&gt;save();\n</code></pre> <p>Pero, adem\u00e1s, podemos vincular ambos objetos en la relaci\u00f3n, usando el m\u00e9todo <code>associate</code>, de este modo:</p> <pre><code>// Buscamos el tel\u00e9fono que queremos asociar\n// (suponiendo que existe previamente)\n$telefono = Telefono::findOrFail($idTelefono);\n$usuario = new Usuario();\n$usuario-&gt;nombre = \"Pepe\";\n$usuario-&gt;email = \"pepe@gmail.com\";\n$usuario-&gt;telefono()-&gt;associate($telefono);\n$usuario-&gt;save();\n</code></pre>"},{"location":"ut09/ut0905/#52-relaciones-uno-a-muchos-one-to-many","title":"5.2. Relaciones uno a muchos ( one to many )","text":"<p>Para ilustrar esta relaci\u00f3n veamos otro ejemplo: supongamos que tenemos los modelos <code>Autor</code> y <code>Libro</code>, de modo que un autor puede tener varios libros, y un libro est\u00e1 asociado a un autor.</p> <p>La forma de establecer la relaci\u00f3n entre ambos consistir\u00e1 en a\u00f1adir en la tabla de <code>libros</code> una clave ajena al autor al que pertenece. A la hora de plasmar esta relaci\u00f3n en los modelos, se hace de forma similar al caso anterior, s\u00f3lo que en lugar de utilizar el m\u00e9todo <code>hasOne</code> en la clase <code>Autor</code> usar\u00edamos el m\u00e9todo <code>hasMany</code>:</p> <pre><code>class Autor extends Model\n{\n  public function libros()\n  {\n     return $this-&gt;hasMany(Libro::class);\n  }\n}\n</code></pre> <p>Igual que ocurr\u00eda antes, se asume que la tabla de libros tiene una clave primaria <code>id</code>, y que la clave ajena correspondiente hacia la tabla de autores es <code>autor_id</code>. De lo contrario, se pueden especificar otros pasando m\u00e1s par\u00e1metros a <code>hasMany</code>.</p> <p>De este modo obtenemos los libros asociados a un autor:</p> <pre><code>$libros = Autor::findOrFail($id)-&gt;libros\n</code></pre> <p>Finalmente, tambi\u00e9n podemos establecer la relaci\u00f3n inversa, y recuperar el autor al que pertenece un determinado libro, definiendo un m\u00e9todo en la clase <code>Libro</code> que emplee <code>belongsTo</code>, como en las relaciones uno a uno:</p> <pre><code>class Libro extends Model\n{\n  public function autor()\n  {\n     return $this-&gt;belongsTo(Autor::class);\n  }\n}\n</code></pre> <p>Y obtener, por ejemplo, el nombre del autor a partir del libro:</p> <pre><code>$nombreAutor = Libro::findOrFail($id)-&gt;autor-&gt;nombre;\n</code></pre> Aplicando esta relaci\u00f3n en nuestro ejemplo <p>Esta relaci\u00f3n la podemos dejar plasmada en nuestro ejemplo de la biblioteca, definiendo un nuevo modelo <code>Autor</code> con su correspondiente migraci\u00f3n, y relacionando los modelos. Para ello, seguiremos estos pasos:</p> <p>\u00a0\u00a0\u00a0\u00a01. Creamos una nueva migraci\u00f3n de modificaci\u00f3n sobre la tabla de libros, para a\u00f1adir un nuevo campo <code>autor_id</code>.</p> <pre><code>php artisan make:migration nuevo_campo_autor_libros --table=libros\n</code></pre> <pre><code>class NuevoCampoAutorLibros extends Migration\n{\n  public function up()\n  {\n     Schema::table('libros', function(Blueprint $table) {\n         $table-&gt;integer('autor_id');\n     });\n  }\n\n  public function down()\n  {\n     Schema::table('libros', function(Blueprint $table) {\n         $table-&gt;dropColumn('autor_id');\n     });\n  }\n}\n</code></pre> <pre><code>php artisan migrate\n</code></pre> <p>\u00a0\u00a0\u00a0\u00a02. Creamos de golpe el modelo, la migraci\u00f3n y el controlador de autores (aunque el controlador no lo vamos a utilizar, al menos por el momento). El modelo <code>Autor</code> debe quedar en la carpeta <code>app\\Models</code>, junto con el de usuarios y el de libros.</p> <pre><code>php artisan make:model Autor -mcr\n</code></pre> <p> </p> <p>En este punto, deber\u00e1s renombrar a mano la migraci\u00f3n, ya que el plural que asignar\u00e1 Laravel por defecto ser\u00e1 autors, y no autores. Recuerda cambiar tanto el nombre del fichero de la migraci\u00f3n, como el nombre de la tabla a la que se referencia en los m\u00e9todos <code>up</code> y <code>down</code>.</p> <ul> <li>Editamos la migraci\u00f3n para definir los campos que tendr\u00e1 la nueva tabla de autores, en su m\u00e9todo <code>up</code>: un nombre y un a\u00f1o de nacimiento (opcional):</li> </ul> <p><pre><code>return new class extends Migration\n{\n  public function up()\n  {\n     Schema::create('autores', function(Blueprint $table) {\n         $table-&gt;id();\n         $table-&gt;string('nombre');\n         $table-&gt;integer('nacimiento')-&gt;nullable();\n         $table-&gt;timestamps();\n     });\n  }\n}\n</code></pre> <pre><code>php artisan migrate\n</code></pre> - A\u00f1adimos en el modelo <code>Autor</code> que la tabla asociada ser\u00e1 <code>autores</code> (de lo contrario, considera que ser\u00e1 autors. Adem\u00e1s, definimos una relaci\u00f3n de uno a muchos con los libros, a\u00f1adiendo el m\u00e9todo siguiente:</p> <pre><code>class Autor extends Model\n{\n  protected $table = 'autores';\n  // ...\n\n  public function libros()\n  {\n     return $this-&gt;hasMany(Libro::class);\n  }\n}\n</code></pre> <p>\u00a0\u00a0\u00a0\u00a03. Rec\u00edprocamente, a\u00f1adimos al modelo <code>Libro</code> este otro m\u00e9todo, para poder recuperar un autor a partir de uno de sus libros:</p> <pre><code>class Libro extends Model\n{\n  // ...\n\n  public function autor()\n  {\n     return $this-&gt;belongsTo(Autor::class);\n  }\n}\n</code></pre> <p>\u00a0\u00a0\u00a0\u00a04. Utilizando phpMyAdmin, creamos a mano un par de autores en la tabla de autores, y los relacionamos con algunos de los libros que haya en la tabla de libros, a\u00f1adiendo tambi\u00e9n a mano el id de cada autor en la clave ajena correspondiente de los libros. Por ejemplo:</p> <p>Tuplas de la tabla autores (modelo Autor).</p> <p>Tuplas de la tabla libros (modelo Libro).</p> <p>\u00a0\u00a0\u00a0\u00a05. Para probar c\u00f3mo funcionan las relaciones, vamos primero a crear un nuevo libro asociado al autor 1. Definimos una ruta de prueba en el archivo <code>routes/web.php</code> con este c\u00f3digo (deberemos incorporar con <code>use</code> los modelos de <code>Autor</code> y <code>Libro</code>):</p> <pre><code>Route::get('relacionPrueba', function() {\n    $autor = Autor::findOrFail(1);\n    $libro = new Libro();\n    $libro-&gt;titulo = \"Libro de prueba \" . rand();\n    $libro-&gt;editorial = \"Editorial de prueba\";\n    $libro-&gt;precio = 5;\n    $libro-&gt;autor()-&gt;associate($autor);\n    $libro-&gt;save();\n\n    return redirect()-&gt;route('libros.index');\n});\n</code></pre> <p>\u00a0\u00a0\u00a0\u00a06. Ahora, modificamos la vista <code>libros/index.blade.php</code> para que, en el listado, utilice las relaciones entre tablas para mostrar el nombre del autor entre par\u00e9ntesis junto al t\u00edtulo de cada libro:</p> <pre><code>@forelse($libros as $libro)\n    &lt;li&gt;&lt;a href=\"{{ route('libros.show', $libro) }}\"&gt;\n        {{ $libro-&gt;titulo }} ({{ $libro-&gt;autor-&gt;nombre }})\n    &lt;/a&gt;&lt;/li&gt;\n@empty\n    &lt;li&gt;No se encontraron libros&lt;/li&gt;\n@endforelse\n</code></pre> <p>\u00a0\u00a0\u00a0\u00a07. Podemos probar las dos cosas accediendo respectivamente a estas dos URLs (suponiendo que el servidor est\u00e1 escuchando en localhost por el puerto 8000):</p> <pre><code>http://localhost:8000/relacionPrueba\nhttp://localhost:8000/libros\n</code></pre>"},{"location":"ut09/ut0905/#522-acceso-eficiente-a-datos-relacionados-eager-loading","title":"5.2.2. Acceso eficiente a datos relacionados. Eager loading","text":"<p>En el ejemplo anterior, hemos visto c\u00f3mo, dado un libro, podemos obtener el nombre del autor de este modo en una vista Blade:</p> <pre><code>{{ $libro-&gt;autor-&gt;nombre }}\n</code></pre> <p>Sin embargo, este c\u00f3digo provoca una nueva consulta en la base de datos para buscar los datos del autor asociado al libro, con lo que, para un listado de 100 libros, estaremos haciendo 100 consultas adicionales para extraer la informaci\u00f3n de los respectivos autores.</p> <p>Para evitar esta sobrecarga, podemos emplear una t\u00e9cnica llamada eager loading (que en espa\u00f1ol podr\u00edamos traducir como carga apresurada o impaciente). Consiste en emplear el m\u00e9todo <code>with</code> para indicar qu\u00e9 relaci\u00f3n queremos dejar precargada en el resultado. Por ejemplo, si indicamos algo as\u00ed en la funci\u00f3n <code>index</code> del controlador de libros:</p> <pre><code>public function index()\n{\n    $libros = Libro::with('autor')-&gt;get();\n    return view('libros.index', compact('libros'));\n}\n</code></pre>"},{"location":"ut09/ut0905/#53-relaciones-muchos-a-muchos-many-to-many","title":"5.3. Relaciones muchos a muchos ( many to many )","text":"<p>Estas relaciones son m\u00e1s dif\u00edciles de plasmar, ya que es necesario contar con una tercera tabla que relacione las dos tablas afectadas. Pero vayamos por partes\u2026</p> <p>Para ilustrar este caso, supongamos los modelos <code>Usuario</code> y <code>Rol</code>, de modo que un usuario puede tener varios roles, y un rol puede ser asignado a varios usuarios. Nuevamente, definimos un m\u00e9todo en el modelo <code>Usuario</code> que utilice el m\u00e9todo <code>belongsToMany</code> para indicar con qu\u00e9 otro modelo se relaciona:</p> <pre><code>class Usuario extends Model\n{\n  public function roles()\n  {\n     return $this-&gt;belongsToMany(Rol::class);\n  }\n}\n</code></pre> <p>As\u00ed ya podremos acceder a los roles de un usuario:</p> <pre><code>$roles = Usuario::findOrFail($id)-&gt;roles;\n</code></pre> <p>En este caso, al otro lado de la relaci\u00f3n hacemos lo mismo: definimos un m\u00e9todo en el modelo <code>Rol</code> que indique con <code>belongsToMany</code> que puede pertenecer a varios usuarios:</p> <pre><code>class Rol extends Model\n{\n  public function usuarios()\n  {\n     return $this-&gt;belongsToMany(Usuario::class);\n  }\n}\n</code></pre> <p>A efectos de automatizaci\u00f3n, es decir, para que Eloquent establezca los nexos de forma autom\u00e1tica, si queremos establecer una relaci\u00f3n muchos a muchos entre un modelo <code>A</code> y otro <code>B</code>, se asume que existir\u00e1 otra tabla <code>a_b</code> (el orden en que se colocan los nombres de las tablas es alfab\u00e9tico), con los campos <code>a_id</code> y <code>b_id</code>, que relacionen los dos modelos. En nuetro caso, se asumir\u00e1 que existe una tabla <code>rol_usuario</code> con un campo <code>rol_id</code> y otro llamado <code>usuario_id</code>, que enlacen con los correspondientes <code>id</code> de las tablas de usuarios y roles. Si esto no fuera as\u00ed, podemos pasar m\u00e1s par\u00e1metros a <code>belongsToMany</code> para indicarlo.</p> <p>En el caso de las relaciones muchos a muchos, es posible que nos interese acceder a alg\u00fan dato de esa tabla intermedia que los relaciona. En ese caso, hacemos uso del atributo <code>pivot</code>, predefinido, y que apunta a la tabla o modelo intermedio entre los dos relacionados. Por ejemplo, si quisi\u00e9ramos obtener la fecha de creaci\u00f3n de la relaci\u00f3n entre un usuario y un rol, podr\u00edamos hacer esto:</p> <pre><code>$roles = Usuario::findOrFail($id)-&gt;roles;\n\nfor($roles as $rol)\n{\n  echo $rol-&gt;pivot-&gt;created_at;\n}\n</code></pre> Ejemplo <code>usuarios</code>-<code>roles</code> <p>\u200b    Se necesitan tres tablas:     - <code>usuarios</code>         - <code>roles</code>         - <code>rol_usuario</code> (tabla intermedia para la relaci\u00f3n muchos a muchos) Migraci\u00f3n para la tabla <code>usuarios</code> <pre><code>use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateUsuariosTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('usuarios', function (Blueprint $table) {\n            $table-&gt;id();\n            $table-&gt;string('nombre');\n            $table-&gt;string('email')-&gt;unique();\n            $table-&gt;timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('usuarios');\n    }\n}\n</code></pre> Migraci\u00f3n para la tabla <code>roles</code> <pre><code>use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateRolesTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('roles', function (Blueprint $table) {\n            $table-&gt;id();\n            $table-&gt;string('nombre');\n            $table-&gt;timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('roles');\n    }\n}\n</code></pre> Migraci\u00f3n para la tabla <code>rol_usuario</code> (tabla intermedia) <pre><code>use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateRolUsuarioTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('rol_usuario', function (Blueprint $table) {\n            $table-&gt;id();\n            $table-&gt;foreignId('usuario_id')-&gt;constrained('usuarios')-&gt;onDelete('cascade');\n            $table-&gt;foreignId('rol_id')-&gt;constrained('roles')-&gt;onDelete('cascade');\n            $table-&gt;timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::dropIfExists('rol_usuario');\n    }\n}\n</code></pre>     ### 2. Modelos     Modelo <code>Usuario</code> <pre><code>namespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Usuario extends Model\n{\n    protected $fillable = ['nombre', 'email'];\n\n    public function roles()\n    {\n        return $this-&gt;belongsToMany(Rol::class, 'rol_usuario', 'usuario_id', 'rol_id')-&gt;withTimestamps();\n    }\n}\n</code></pre> Modelo <code>Rol</code> <pre><code>namespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Rol extends Model\n{\n    protected $fillable = ['nombre'];\n\n    public function usuarios()\n    {\n        return $this-&gt;belongsToMany(Usuario::class, 'rol_usuario', 'rol_id', 'usuario_id')-&gt;withTimestamps();\n    }\n}\n</code></pre>     ### 3. Uso en Controladores o Seeders     Insertar usuarios y roles y relacionarlos <pre><code>use App\\Models\\Usuario;\nuse App\\Models\\Rol;\n\n// Crear usuarios\n$usuario1 = Usuario::create(['nombre' =&gt; 'Juan', 'email' =&gt; 'juan@example.com']);\n$usuario2 = Usuario::create(['nombre' =&gt; 'Maria', 'email' =&gt; 'maria@example.com']);\n\n// Crear roles\n$admin = Rol::create(['nombre' =&gt; 'Administrador']);\n$editor = Rol::create(['nombre' =&gt; 'Editor']);\n\n// Asignar roles a usuarios (relaci\u00f3n muchos a muchos)\n$usuario1-&gt;roles()-&gt;attach([$admin-&gt;id, $editor-&gt;id]); // Juan es Administrador y Editor\n$usuario2-&gt;roles()-&gt;attach([$editor-&gt;id]); // Maria es solo Editor\n</code></pre> Consultar los roles de un usuario <pre><code>$usuario = Usuario::find(1);\n\nforeach ($usuario-&gt;roles as $rol) {\n    echo \"El usuario {$usuario-&gt;nombre} tiene el rol: {$rol-&gt;nombre} &lt;br&gt;\";\n}\n</code></pre> Consultar los usuarios con un rol espec\u00edfico <pre><code>$rol = Rol::where('nombre', 'Administrador')-&gt;first();\n\nforeach ($rol-&gt;usuarios as $usuario) {\n    echo \"El usuario {$usuario-&gt;nombre} es Administrador &lt;br&gt;\";\n}\n</code></pre> Eliminar una relaci\u00f3n <pre><code>$usuario = Usuario::find(1);\n$usuario-&gt;roles()-&gt;detach($admin-&gt;id); // Quita el rol de Administrador al usuario Juan\n</code></pre>     ### 4. Acceder a Datos de la Tabla Pivot     Si queremos obtener la fecha de asignaci\u00f3n de un rol a un usuario:     <pre><code>$usuario = Usuario::find(1);\n\nforeach ($usuario-&gt;roles as $rol) {\n    echo \"Rol: {$rol-&gt;nombre} - Asignado el: {$rol-&gt;pivot-&gt;created_at} &lt;br&gt;\";\n}\n</code></pre>     ### 5. Conclusi\u00f3n     Esta implementaci\u00f3n de relaciones muchos a muchos en Laravel permite asignar m\u00faltiples roles a un usuario y m\u00faltiples usuarios a un rol. La tabla intermedia rol_usuario maneja la relaci\u00f3n sin necesidad de un modelo expl\u00edcito, y pivot nos permite acceder a metadatos como la fecha de asignaci\u00f3n.</p>"},{"location":"ut09/ut0905/#1-migraciones","title":"1. Migraciones","text":""},{"location":"ut09/ut0905/#54-mas-informacion","title":"5.4. M\u00e1s informaci\u00f3n","text":"<p>Sobre estas relaciones existen algunas variantes, y formas de personalizar las tablas y campos afectados. Se puede consultar m\u00e1s informaci\u00f3n en la documentaci\u00f3n oficial de Eloquent.</p> Ejercicios <p>Realizar <code>ejercicio 3</code>.</p>"},{"location":"ut09/ut0906/","title":"Ut0906","text":"<p>En las pruebas que hemos hecho hasta ahora, para tener datos con que probar la aplicaci\u00f3n, nos hemos limitado a a\u00f1adirlos a mano desde phpMyAdmin, o bien desde el c\u00f3digo con algunos datos simples como \u201cT\u00edtulo de prueba 1\u201d o cosas similares.</p> <p>Dado que los datos de inicio son necesarios para probar algunas funcionalidades b\u00e1sicas de la aplicaci\u00f3n, como son las b\u00fasquedas y filtrados, y dado que los formularios para dar de alta y gestionar estos datos normalmente no se tienen listos hasta etapas m\u00e1s tard\u00edas, puede resultar conveniente disponer de alg\u00fan mecanismo que genere estos datos de prueba al inicio, sin preocuparnos de tocar la base de datos a mano o alterar el c\u00f3digo de la aplicaci\u00f3n para ello. En este aspecto, los seeders y factories juegan un papel importante.</p>"},{"location":"ut09/ut0906/#61-seeders","title":"6.1. Seeders","text":"<p>Los seeders son clases especiales que permiten sembrar (seed) de contenido una aplicaci\u00f3n. Para crearlos, utilizamos el comando <code>php artisan</code> como sigue:</p> <pre><code>php artisan make:seeder NombreSeeder\n</code></pre> <p>Esto crear\u00e1 una clase llamada <code>NombreSeeder</code> en la carpeta <code>database/seeds</code> (hasta Laravel 7) o <code>database/seeders</code> (desde Laravel 8). En el m\u00e9todo <code>run</code> de dicha clase podemos crear los elementos que necesitemos a\u00f1adir a la base de datos.</p> <p>Por ejemplo, vamos a crear en nuestro proyecto biblioteca un seeder llamado <code>LibrosSeeder</code> para crear libros, y otro llamado <code>AutoresSeeder</code> para autores:</p> <pre><code>php artisan make:seeder LibrosSeeder\nphp artisan make:seeder AutoresSeeder\n</code></pre> <p>Editamos el m\u00e9todo <code>run</code> del seeder que hemos creado (el de libros, por ejemplo), y definimos este c\u00f3digo para crear un autor con un libro asociado (deberemos incorporar con <code>use</code> los modelos de <code>Autor</code> y <code>Libro</code> previamente):</p> <pre><code>public function run()\n{\n    $autor = new Autor();\n    $autor-&gt;nombre = \"Juan Seeder\";\n    $autor-&gt;nacimiento = 1960;\n    $autor-&gt;save();\n    $libro = new Libro();\n    $libro-&gt;titulo = \"El libro del Seeder\";\n    $libro-&gt;editorial = \"Seeder S.A.\";\n    $libro-&gt;precio = 10;\n    $libro-&gt;autor()-&gt;associate($autor);\n    $libro-&gt;save();\n}\n</code></pre> <p>De forma similar, podr\u00edamos editar el m\u00e9todo <code>run</code> de <code>AutoresSeeder</code> para crear, en este caso, un autor (sin libro asociado, normalmente).</p> <pre><code>public function run()\n{\n    $autor = new Autor();\n    $autor-&gt;nombre = \"Autor Suelto\";\n    $autor-&gt;nacimiento = 1951;\n    $autor-&gt;save();\n}\n</code></pre>"},{"location":"ut09/ut0906/#611-anadiendo-los-seeders-a-la-aplicacion","title":"6.1.1. A\u00f1adiendo los seeders a la aplicaci\u00f3n","text":"<p>Por defecto, los seeders que creamos no forman parte de la aplicaci\u00f3n a\u00fan, en el sentido de que a\u00fan no los podemos ejecutar. Para ello, debemos darlos de alta en el seeder general, llamado <code>DatabaseSeeder</code>, ubicado en la misma carpeta que los seeders que definimos:</p> <pre><code>class DatabaseSeeder extends Seeder\n{\n    public function run()\n    {\n        ...\n        $this-&gt;call(AutoresSeeder::class);\n        $this-&gt;call(LibrosSeeder::class);\n    }\n}\n</code></pre> <p> </p> <p>Es importante el orden en que colocamos los seeders dentro de este m\u00e9todo, como veremos despu\u00e9s, ya que esto indicar\u00e1 en qu\u00e9 orden se crean los datos de prueba en la aplicaci\u00f3n.</p>"},{"location":"ut09/ut0906/#612-lanzar-los-seeders","title":"6.1.2. Lanzar los seeders","text":"<p>Si queremos ejecutar los seeders para que a\u00f1adan los datos, emplearemos este comando:</p> <pre><code>php artisan db:seed\n</code></pre> <p>Esto lanzar\u00e1 todos los seeders que tengamos declarados en la clase <code>DatabaseSeeder</code>. Si s\u00f3lo queremos lanzar uno en concreto, podemos hacer lo siguiente:</p> <pre><code>php artisan db:seed --class=LibrosSeeder\n</code></pre> <p>Tambi\u00e9n puede ser necesario (y a veces conveniente) limpiar la base de datos y llenarla desde cero con los datos de los seeds para empezar a probar la aplicaci\u00f3n. En este caso, el comando es el siguiente:</p> <pre><code>php artisan migrate:fresh --seed\n</code></pre>"},{"location":"ut09/ut0906/#62-factories","title":"6.2. Factories","text":"<p>Los seeders son una herramienta \u00fatil para poblar nuestra aplicaci\u00f3n con datos al inicio. Podemos, por ejemplo, dar de alta una serie de usuarios iniciales con acceso a la aplicaci\u00f3n, para que con ellos se puedan rellenar el resto de datos. Tambi\u00e9n podemos dar de alta una serie de datos predefinidos en ciertas tablas, o datos de prueba que luego poder borrar.</p> <p>Sin embargo, los seeders por s\u00ed solos se quedan algo \u201ccojos\u201d. \u00bfQu\u00e9 tendr\u00edamos que hacer para dar de alta 10 o 20 libros en nuestra base de datos de biblioteca? Tendr\u00edamos que definir alg\u00fan tipo de bucle en el seeder, y definir datos diferentes (por ejemplo, con identificadores o contadores aleatorios) para cada libro. Para facilitar esta tarea, podemos echar mano de los factories.</p> <p>Los factories son clases que permiten generar datos por lotes. Se crean con el siguiente comando, almacen\u00e1ndose la clase en la carpeta <code>database/factories</code>:</p> <pre><code>php artisan make:factory NombreFactory --model=NombreModelo\n</code></pre>"},{"location":"ut09/ut0906/#621-generar-factories-y-asociarlos-a-su-modelo","title":"6.2.1. Generar factories y asociarlos a su modelo","text":"<p>Si recordamos, cuando creamos los modelos de <code>Autor</code> y <code>Libro</code> la clase se crea con una cl\u00e1usula <code>use</code> que alude al trait <code>HasFactory</code>.</p> <pre><code>class Libro extends Model\n{\n    use HasFactory;\n\n    ...\n}\n</code></pre> <p>Un trait b\u00e1sicamente es un conjunto de m\u00e9todos que se puede emplear por cualquier clase que quiera utilizarlos. De este modo, se amortigua en parte la limitaci\u00f3n de s\u00f3lo poder heredar de una clase, y mediante estos traits podemos incorporar la funcionalidad de otras. En este caso, indicamos que el modelo de Libro puede usar los m\u00e9todos de su factory asociado.</p> <p>Por ejemplo, vamos a crear un factory para generar autores y otro para libros, indicando con el par\u00e1metro <code>--model</code> el modelo asociado a cada factory:</p> <pre><code>php artisan make:factory AutorFactory --model=Autor\nphp artisan make:factory LibroFactory --model=Libro\n</code></pre> <p>Esto generar\u00e1 dos clases donde, en una anotaci\u00f3n <code>@extends</code> se especificar\u00e1 el modelo asociado. Por ejemplo, as\u00ed quedar\u00eda el factory de autores:</p> <pre><code>namespace Database\\Factories;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\n/**\n * @extends Illuminate\\Database\\Eloquent\\Factories\\Factory&lt;\\App\\Models\\Autor&gt;\n */ \nclass AutorFactory extends Factory\n{\n    /**\n     * Define the model's default state.\n     *\n     * @return array&lt;string, mixed&gt;\n     */\n    public function definition()\n    {\n        return [\n            //\n        ];\n    }\n}\n</code></pre> <p>En Laravel 8, en lugar de la anotaci\u00f3n <code>@extends</code>, la relaci\u00f3n entre el modelo y el factory se daba a trav\u00e9s de un atributo protegido llamado <code>model</code>. Esta opci\u00f3n sigue estando permitida en Laravel 9:</p> <pre><code>...\nclass AutorFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Autor::class;\n\n    ...\n}\n</code></pre> <p>En cualquiera de los dos casos, el m\u00e9todo <code>definition</code> es el que se va a ejecutar cuando utilicemos el factory, para generar los datos del modelo asociado. Podemos devolver datos manualmente generados (por ejemplo, Autor 1, Autor 2, etc):</p> <pre><code>public function definition()\n{\n    return [\n        'nombre' =&gt; \"Autor \" . rand(1, 100),\n        'nacimiento' =&gt; rand(1950, 1990)\n    ];\n}\n</code></pre> <p>Para crear autores usando este factory, lo invocamos desde el seeder correspondiente (<code>AutoresSeeder</code>, en este caso), en su m\u00e9todo <code>run</code>:</p> <pre><code>...\nclass AutoresSeeder extends Seeder\n{\n    public function run()\n    {\n        return Autor::factory()-&gt;count(5)-&gt;create();\n    }\n}\n</code></pre> <p>Notar c\u00f3mo acudimos al factory a trav\u00e9s del modelo, con <code>Autor::factory()</code>, gracias al trait <code>HasFactory</code>. Esto generar\u00e1 5 autores con datos distintos y aleatorios.</p>"},{"location":"ut09/ut0906/#622-fakers","title":"6.2.2. Fakers","text":"<p>Estaremos de acuerdo en que generar datos del tipo \u201cAutor 1\u201d, \u201cAutor 2\u201d, etc, no queda demasiado \u201creal\u201d en una aplicaci\u00f3n, por mucho que sean datos de prueba. Por ello, Laravel nos proporciona los fakers para generar datos al azar con una apariencia determinada. As\u00ed, podemos generar nombres reales aleatorios, o direcciones de correo electr\u00f3nico, o frases, o textos largos.</p> <p>Para generar estos datos de prueba, Laravel cuenta con una clase llamada <code>Faker</code>, cuyo objeto est\u00e1 autom\u00e1ticamente incorporado en el factory a trav\u00e9s de la propiedad <code>$this-&gt;faker</code>. Internamente dispone de m\u00e9todos para generar datos de distintos tipos.Algunos de los m\u00e1s habituales son:</p> <ul> <li><code>name</code>: genera un nombre de persona. Admite como par\u00e1metro opcional \u201cmale\u201d o \u201cfemale\u201d para generar nombres masculinos o femeninos, respectivamente.</li> <li><code>sentence</code>: genera una frase corta. Admite como par\u00e1metro opcional un n\u00famero, indicando cu\u00e1ntas palabras generar.</li> <li><code>word</code>: genera una palabra aleatoria.</li> <li><code>text</code>: genera un texto largo.</li> <li><code>phoneNumber</code>: genera un n\u00famero de tel\u00e9fono.</li> <li><code>email</code>: genera un e-mail aleatorio.</li> <li><code>randomNumber</code>: genera un n\u00famero aleatorio. Como alternativa, tambi\u00e9n se tiene <code>numberBetween</code>, que genera un n\u00famero aleatorio entre un m\u00ednimo y un m\u00e1ximo pasados como par\u00e1metro.</li> <li>\u2026 etc (aqu\u00ed pod\u00e9is consultar m\u00e1s posibilidades al respecto).</li> </ul> <p>Adem\u00e1s, tambi\u00e9n tenemos disponible el m\u00e9todo <code>unique()</code> para asegurarnos de que alguno de los campos que generemos no se repita entre registros.</p> <p>Vamos a generar los datos de autores usando este faker en el m\u00e9todo <code>definition</code> de nuestra <code>AutorFactory</code>:</p> <pre><code>public function definition()\n{\n    return [\n        'nombre' =&gt; $this-&gt;faker-&gt;name,\n        'nacimiento' =&gt; $this-&gt;faker-&gt;numberBetween(1950, 1990)\n    ];\n}\n</code></pre> <p>Como podemos intuir, generamos un nombre al azar (de hombre o mujer) y un a\u00f1o de nacimiento entre 1950 y 1990.</p> <p>Del mismo modo, completamos la informaci\u00f3n del m\u00e9todo <code>definition</code> para el factory de libros (<code>LibroFactory</code>):</p> <pre><code>public function definition()\n{\n    return [\n        'titulo' =&gt; $this-&gt;faker-&gt;sentence,\n        'editorial' =&gt; $this-&gt;faker-&gt;sentence(2),\n        'precio' =&gt; $this-&gt;faker-&gt;randomFloat(2, 5, 20)\n    ];\n}\n</code></pre>"},{"location":"ut09/ut0906/#63-relacionando-los-modelos","title":"6.3. Relacionando los modelos","text":"<p>Finalmente, en los seeder correspondientes, podemos utilizar estos factory para generar N objetos del modelo asociado. Por ejemplo, para el caso de los autores, generamos 5 autores aleatorios:</p> <pre><code>class AutoresSeeder extends Seeder\n{\n    public function run()\n    {\n        Autor::factory()-&gt;count(5)-&gt;create();\n    }\n}\n</code></pre> <p>En el caso de los libros, recorremos los autores y, para cada uno, le generamos 2 libros al azar:</p> <pre><code>class LibrosSeeder extends Seeder\n{\n    public function run()\n    {\n        $autores = Autor::all();\n        $autores-&gt;each(function($autor) {\n            Libro::factory()-&gt;count(2)-&gt;create([\n                'autor_id' =&gt; $autor-&gt;id\n            ]);\n        });\n    }\n}\n</code></pre> <p> </p> <p>Es IMPORTANTE el orden en que se declaran los seeders en la clase <code>DatabaseSeeder</code>. Si primero colocamos el de libros y luego el de autores, a\u00fan no habr\u00e1 autores con los que generar los libros. Por eso es importante generar primero los autores y as\u00ed, usarlos para recorrerlos y generar los libros.</p> Ejercicios a realizar <ul> <li><code>Ejercicio 4</code>.</li> </ul>"},{"location":"ut09/ut0907/","title":"Ut0907","text":"<p>En este documento veremos un par de cuestiones secundarias que nos han quedado en el tintero. La primera es una forma alternativa de \u201catacar\u201d la base de datos, sin emplear el ORM Eloquent: el query builder. La segunda es c\u00f3mo trabajar c\u00f3modamente con fechas en aplicaciones Laravel.</p>"},{"location":"ut09/ut0907/#1-query-builder","title":"1. Query builder","text":"<p>A la hora de obtener datos de la base de datos, en lugar de usar modelos de Eloquent, podemos emplear tambi\u00e9n el query builder, una herramienta incorporada con Laravel que permite realizar operaciones sobre la base de datos sin utilizar un modelo de objetos por detr\u00e1s, y con una sintaxis diferente a SQL.</p>"},{"location":"ut09/ut0907/#11-consultas","title":"1.1. Consultas","text":"<p>Para utilizar estas consultas, utilizamos el elemento <code>DB</code>. Dicho elemento corresponde al espacio de nombres <code>Illuminate\\Support\\Facades\\DB</code> que deberemos incluir. Internamente, tiene un m\u00e9todo <code>table</code> para especificar la tabla sobre la que se quiere consultar. Una vez referenciada, con el m\u00e9todo <code>get</code> obtenemos todos los registros:</p> <pre><code>use Illuminate\\Support\\Facades\\DB;\n//...\n\n$personas = DB::table('personas')-&gt;get();\n</code></pre> <p>A pesar de no estar trabajando con clases, lo que obtenemos aqu\u00ed es un array de objetos, no un array asociativo.</p> <p>En el caso de buscar un registro concreto (por su id, por ejemplo), utilizamos el m\u00e9todo <code>where</code>, pas\u00e1ndole como par\u00e1metros el nombre del campo a comparar, y el valor que debe tener. Despu\u00e9s, enlazamos con el m\u00e9todo <code>first</code> para obtener s\u00f3lo el primer registro de la b\u00fasqueda (de lo contrario, obtendr\u00edamos un array con un resultado, si buscamos por id):</p> <pre><code>$persona = DB::table('personas')-&gt;where('id', $id)-&gt;first();\n</code></pre>"},{"location":"ut09/ut0907/#12-actualizaciones","title":"1.2. Actualizaciones","text":"<p>Si lo que queremos hacer es una inserci\u00f3n, empleamos el m\u00e9todo <code>insert</code> de la tabla. En este caso, le pasamos un array asociativo con los nombres de cada campo del nuevo registro, y sus valores:</p> <pre><code>DB::table('personas')-&gt;insert([\n  'nombre' =&gt; 'Juan',\n  'edad' =&gt; 56\n]);\n</code></pre> <p>En el caso de modificaciones, utilizamos el m\u00e9todo <code>where</code> para filtrar el registro o registros a modificar, y empleamos el m\u00e9todo <code>update</code> con el array de campos a modificar:</p> <pre><code>DB::table('personas')-&gt;where('id', $id)-&gt;update([\n  'nombre' =&gt; 'Juan',\n  'edad' =&gt; 56\n]);\n</code></pre> <p>Para borrados, usamos una estructura similar a la anterior, reemplazando la llamada a <code>update</code> por <code>delete</code>, que no necesita par\u00e1metros:</p> <pre><code>DB::table('personas')-&gt;where('id', $id)-&gt;delete();\n</code></pre>"},{"location":"ut09/ut0907/#2-uso-de-fechas","title":"2. Uso de fechas","text":"<p>En algunas tablas que hemos visto o creado, se ha usado un tipo <code>timestamp</code>, que b\u00e1sicamente genera un tipo fecha en la tabla correspondiente. Estos campos de tipo tabla son instancias de una librer\u00eda PHP llamada Carbon, muy \u00fatil para trabajar con fechas. As\u00ed que, si tenemos un registro de tipo <code>Persona</code> con un campo <code>created_at</code> de tipo fecha, podemos trabajar con \u00e9l como una fecha Carbon, y, por ejemplo, mostrarla en una vista con un formato espec\u00edfico:</p> <pre><code>&lt;p&gt;\n  Fecha creaci\u00f3n: \n  {{ Carbon\\Carbon::parse($persona-&gt;created_at)-&gt;format('d/m/Y') }}\n&lt;/p&gt;\n</code></pre> <p>Adem\u00e1s, para trabajar sobre los campos <code>created_at</code> y <code>updated_at</code>, que por defecto se crean en una tabla desde una migraci\u00f3n Laravel, podemos emplear esta librer\u00eda Carbon para darles valor, aunque de esto ya se encarga Eloquent autom\u00e1ticamente, pero por si lo queremos hacer manualmente, aqu\u00ed va un ejemplo:</p> <pre><code>DB::table('personas')-&gt;insert([\n  'nombre' =&gt; 'Juan',\n  'edad' =&gt; 56,\n  'created_at' =&gt; Carbon::now(),\n  'updated_at' =&gt; Carbon::now()\n]);\n</code></pre> <p>Para poder emplear la clase <code>Carbon</code>, debemos importarla (<code>use Carbon\\Carbon</code>), o bien anteponerle siempre el prefijo del namespace <code>Carbon\\Carbon</code>, como en el ejemplo de <code>format</code> anterior.</p> Ejercicios a realizar (opcional) <ul> <li><code>Ejercicio 5</code>.</li> </ul>"},{"location":"ut09/ut09ac/","title":"Ejercicios propuestos","text":""},{"location":"ut09/ut09ac/#parte-i","title":"Parte I","text":""},{"location":"ut09/ut09ac/#ejercicio-1","title":"Ejercicio 1","text":"<p>Sobre el proyecto blog de la sesi\u00f3n anterior, vamos a a\u00f1adir estos cambios:</p> <ol> <li> <p>Crea una base de datos llamada <code>blog</code> en tu servidor de bases de datos a trav\u00e9s de phpMyAdmin. Modifica tambi\u00e9n el archivo <code>.env</code> del proyecto para acceder a dicha base de datos con las credenciales adecuadas, similares a las del ejemplo de la biblioteca (cambiando el nombre de la base de datos).</p> </li> <li> <p>Elimina todas las migraciones existentes, salvo la de create_users_table. Edita esta migraci\u00f3n de la tabla usuarios para dejarla igual que el ejemplo de la biblioteca (\u00fanicamente con los campos login y password, adem\u00e1s del id y los timestamps).</p> </li> <li> <p>Crea una nueva migraci\u00f3n llamada <code>crear_tabla_posts</code>, que crear\u00e1 una tabla llamada <code>posts</code> con estos campos:</p> </li> <li> <p>Id autonum\u00e9rico</p> </li> <li> <p>T\u00edtulo del post (<code>string</code>)</p> </li> <li> <p>Contenido del post (<code>text</code>)</p> </li> <li> <p>Timestamps para gestionar autom\u00e1ticamente la fecha de creaci\u00f3n o modificaci\u00f3n del post</p> </li> <li> <p>Lanza las migraciones y comprueba que se crean las tablas correspondientes con los campos asociados en la base de datos.</p> </li> <li>Opcionalmente, puedes desactivar las migraciones de Sanctum en el proyecto Laravel, como se ha explicado al final de este documento, si al crear las migraciones aparece alguna otra tabla no deseada, como la de los personal_access_tokens. Recuerda ejecutar <code>php artisan migrate:fresh</code> de nuevo para borrar el rastro de esas tablas.</li> </ol>"},{"location":"ut09/ut09ac/#ejercicio-2","title":"Ejercicio 2","text":"<p>Continuamos con el proyecto blog anterior. Modifica si no lo has hecho a\u00fan el modelo <code>User</code> que viene por defecto para que se llame <code>Usuario</code>, igual que hemos hecho en el ejemplo de la biblioteca. Crea un nuevo modelo llamado <code>Post</code> para los posts de nuestro blog. Aseg\u00farate de que ambos modelos se ubican en la carpeta <code>App\\Models</code> del proyecto.</p> <p>Despu\u00e9s, modifica los m\u00e9todos del controlador <code>PostController</code> creado en sesiones anteriores, de este modo:</p> <ol> <li> <p>El m\u00e9todo <code>index</code> debe obtener todos los posts de la tabla, y mostrar la vista <code>posts.index</code> con ese listado de posts.</p> </li> <li> <p>La vista <code>posts.index</code>, por su parte, recibir\u00e1 el listado de posts y mostrar\u00e1 los t\u00edtulos de cada uno, y un bot\u00f3n <code>Ver</code> para mostrar su ficha (<code>posts.show</code>).</p> </li> <li> <p>Debes mostrar el listado de posts ordenado por t\u00edtulo en orden ascendente, y paginado de 5 en 5.</p> </li> <li> <p>El m\u00e9todo <code>show</code> debe obtener el post cuyo <code>id</code> se pasar\u00e1 como par\u00e1metro, y mostrarlo en la vista <code>posts.show</code> .</p> </li> <li>La vista <code>posts.show</code> recibir\u00e1 el objeto con el post a mostrar, y mostraremos el t\u00edtulo, contenido y fecha de creaci\u00f3n del post, con el formato que quieras.</li> <li>El m\u00e9todo <code>destroy</code> eliminar\u00e1 el post cuyo id recibir\u00e1 como par\u00e1metro, y devolver\u00e1 la vista <code>posts.index</code> con el listado actualizado. Para probar este m\u00e9todo, recuerda que debes definir un formulario en una vista (lo puedes hacer para cada post mostrado en la vista <code>posts.index</code>) que env\u00ede a la ruta <code>posts.destroy</code> usando un m\u00e9todo DELETE, como hemos explicado en un ejemplo anterior.</li> <li>Los m\u00e9todos <code>create</code>, <code>edit</code>, <code>store</code> y <code>update</code> de momento los vamos a dejar sin hacer, hasta que veamos c\u00f3mo gestionar formularios.</li> <li>Para simular la inserci\u00f3n y la modificaci\u00f3n, vamos a crear dos m\u00e9todos adicionales en el controlador, que usaremos de forma temporal:</li> <li>Un m\u00e9todo llamado <code>nuevoPrueba</code>, que cada vez que lo llamemos crear\u00e1 un post con un t\u00edtulo al azar (por ejemplo, \u201cT\u00edtulo X\u201d, siendo X un entero aleatorio), y un contenido al azar (\u201cContenido X\u201d). Puedes emplear la funci\u00f3n rand de PHP para generar estos n\u00fameros aleatorios para t\u00edtulo y contenido.</li> <li>Un m\u00e9todo llamado <code>editarPrueba</code>, que recibir\u00e1 como par\u00e1metro un id y modificar\u00e1 el t\u00edtulo y contenido del post otros generados aleatoriamente, como en el punto anterior.</li> <li>Estos dos m\u00e9todos (especialmente el primero) nos servir\u00e1n para crear una serie de posts de prueba que luego nos servir\u00e1n para probar el listado y la ficha de los posts.</li> <li>En el archivo <code>routes/web.php</code>, recuerda a\u00f1adir dos nuevas rutas temporales de tipo <code>get</code> para probar estas inserciones y modificaciones. La primera puede apuntar a <code>/posts/nuevoPrueba</code>, por ejemplo, y la segunda a <code>/posts/editarPrueba/{id}</code>. Recuerda tambi\u00e9n eliminar o editar la restricci\u00f3n <code>only</code> de las rutas del controlador que estableciste la sesi\u00f3n anterior, para que no s\u00f3lo permita las rutas index, show, create y edit, y adem\u00e1s permita la de destroy (o todas las posibles, si quieres, ya que tarde o temprano las utilizaremos).</li> </ol> <p> </p> <p>Los m\u00e9todos <code>nuevoPrueba</code> y <code>editarPrueba</code> que has creado en <code>PostController</code> NO son m\u00e9todos est\u00e1ndar de un controlador de recursos, y de ninguna manera estar\u00e1n disponibles a trav\u00e9s de <code>Route::resource</code> en <code>routes/web.php</code>. Por eso debes definir a mano una ruta para cada uno de ellos en ese archivo, a trav\u00e9s de <code>Route::get</code>, y esas rutas deben definirse ANTES de la de recursos (<code>Route::resource</code>) porque de lo contrario no se emparejar\u00e1n correctamente.</p> <p>\u00bfQu\u00e9 entregar en estos ejercicios?</p> <p>Como entrega de esta sesi\u00f3n deber\u00e1s comprimir el proyecto blog con todos los cambios incorporados, y eliminando las carpetas <code>vendor</code> y <code>node_modules</code> como se explic\u00f3 en las sesiones anteriores. Renombra el archivo comprimido a <code>blog_09a.zip</code>.</p>"},{"location":"ut09/ut09ac/#parte-ii","title":"Parte II","text":""},{"location":"ut09/ut09ac/#ejercicio-3","title":"Ejercicio 3","text":"<p>Sobre el proyecto blog de la sesi\u00f3n anterior, vamos a a\u00f1adir estos cambios:</p> <ul> <li>Crea una relaci\u00f3n uno a muchos entre el modelo de <code>Usuario</code> y el modelo de <code>Post</code>, ambos ya existentes en la aplicaci\u00f3n, de forma que un post es de un usuario, y un usuario puede tener muchos posts. Deber\u00e1s definir una nueva migraci\u00f3n de modificaci\u00f3n sobre la tabla posts que a\u00f1ada un nuevo campo <code>usuario_id</code>, y establecer a partir de \u00e9l la relaci\u00f3n, como hemos hecho en el ejemplo con autores y libros.</li> <li>Crea desde phpMyAdmin una serie de usuarios de prueba en la tabla usuarios, y asocia algunos de ellos a los posts que haya.</li> <li>Modifica la vista <code>posts/index.blade.php</code> para que, junto al t\u00edtulo de cada post, entre par\u00e9ntesis, aparezca el login del usuario que lo cre\u00f3.</li> </ul>"},{"location":"ut09/ut09ac/#ejercicio-4","title":"Ejercicio 4","text":"<p>Continuamos con el proyecto blog anterior. Ahora a\u00f1adiremos lo siguiente:</p> <ul> <li>Crea un seeder llamado <code>UsuariosSeeder</code>, con un factory asociado llamado <code>UsuarioFactory</code> (renombra el que viene por defecto <code>UserFactory</code> para aprovecharlo). Crea con esto 3 usuarios de prueba, con logins que sean \u00fanicos y de una sola palabra (usa el faker), y passwords tambi\u00e9n de una sola palabra, sin encriptar (para poderlos identificar despu\u00e9s, llegado el caso).</li> <li>Crea otro seeder llamado <code>PostsSeeder</code> con un factory asociado llamado <code>PostFactory</code>. En el factory, define con el faker t\u00edtulos aleatorios (frases) y contenidos aleatorios (textos largos). Usa el seeder para crear 3 posts para cada uno de los usuarios existentes.</li> </ul> <p>Utiliza la opci\u00f3n <code>php artisan migrate:fresh --seed</code> para borrar todo contenido previo y poblar la base de datos con estos nuevos elementos. Comprueba despu\u00e9s desde la p\u00e1gina del listado de posts, y desde phpMyAdmin, que la informaci\u00f3n que aparece es correcta.</p>"},{"location":"ut09/ut09ac/#ejercicio-5-opcional","title":"Ejercicio 5 (opcional)","text":"<p>A\u00f1ade al proyecto blog un nuevo modelo llamado <code>Comentario</code>, junto con su migraci\u00f3n y controlador asociados. Cada comentario tendr\u00e1 como campo el contenido del comentario, y estar\u00e1 relacionado uno a muchos con el modelo <code>Usuario</code>, de forma que un usuario puede tener muchos comentarios, y cada comentario pertenece a un usuario. Tambi\u00e9n tendr\u00e1 una relaci\u00f3n uno a muchos con el modelo <code>Post</code>, de modo que un comentario pertenece a un post, y un post puede tener muchos comentarios. Por lo tanto, la migraci\u00f3n de los comentarios deber\u00e1 tener como campos adicionales la relaci\u00f3n con el usuario (<code>usuario_id</code>) y con el post al que pertenece (<code>post_id</code>).</p> <p>Aplica la migraci\u00f3n para reflejar la nueva tabla en la base de datos, y utiliza un seeder y un factory para crear 3 comentarios en cada post, con el usuario que sea. A la hora de aplicar todo esto, borra los contenidos previos de la base de datos (<code>migrate:fresh --seed</code>).</p> <p>Ayuda</p> <p>Si quieres elegir un usuario al azar como autor de cada comentario, puedes hacer algo as\u00ed:</p> <pre><code>Usuario::inRandomOrder()-&gt;first();\n</code></pre> <p>En este caso, ser\u00eda conveniente que ese usuario aleatorio se a\u00f1ada directamente en el factory del comentario, y no en el seeder, ya que de lo contrario es posible que genere el mismo usuario para todos los comentarios de un post.</p> <p>En la ficha de los posts (vista <code>posts/show.blade.php</code>), a\u00f1ade el c\u00f3digo necesario para mostrar el login del usuario que ha hecho el post, y el listado de comentarios asociado al post, mostrando para cada uno el login del usuario que lo hizo, y el texto del comentario en s\u00ed. Utiliza tambi\u00e9n la librer\u00eda Carbon para mostrar la fecha de creaci\u00f3n del post (o la de los comentarios, como prefieras) en formato d/m/Y.</p> <p>Aqu\u00ed tienes una captura de pantalla de c\u00f3mo podr\u00eda quedar:</p> Listado de Post. <p>\u00bfQu\u00e9 entregar en estos ejercicios?</p> <p>Como entrega de esta sesi\u00f3n deber\u00e1s comprimir el proyecto blog con todos los cambios incorporados, y eliminando las carpetas <code>vendor</code> y <code>node_modules</code> como se explic\u00f3 en las sesiones anteriores. Renombra el archivo comprimido a <code>blog_09b.zip</code>.</p>"},{"location":"ut10/ut1001/","title":"UT 10. Formularios y validaciones","text":"<p>Duraci\u00f3n estimada: 10 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA8. Genera p\u00e1ginas web din\u00e1micas analizando y utilizando tecnolog\u00edas y frameworks del servidor web que a\u00f1aden c\u00f3digo al lenguaje de marcas. e) Se han utilizado estas tecnolog\u00edas y frameworks, para generar p\u00e1ginas web que incluyan verificaci\u00f3n de formularios."},{"location":"ut10/ut1002/","title":"Ut1002","text":"<p>El env\u00edo de formularios en Laravel implica, por un lado, definir un formulario, empleando HTML sencillo junto con algunas opciones ofrecidas por Blade. Por otra parte, debemos recoger los datos enviados por el formulario en alg\u00fan m\u00e9todo de alg\u00fan controlador, y procesarlos adecuadamente.</p>"},{"location":"ut10/ut1002/#1-creacion-y-envio-de-formularios","title":"1. Creaci\u00f3n y env\u00edo de formularios","text":"<p>Si definimos un formulario en una vista, se define con los conceptos que ya sabemos de HTML. Como \u00fanico a\u00f1adido, en el campo <code>action</code> del formulario podemos utilizar Blade y la funci\u00f3n <code>route</code> para indicar el nombre de ruta a la que queremos enviar el formulario.</p> <p>Veamos, por ejemplo, c\u00f3mo definir un formulario para dar de alta nuevos libros en nuestro proyecto de biblioteca. Creamos una vista llamada <code>create.blade.php</code> en la subcarpeta <code>resources/views/libros</code>, con un contenido como \u00e9ste:</p> <p>Si definimos un formulario en una vista, se define con los conceptos que ya sabemos de HTML. Como \u00fanico a\u00f1adido, en el campo <code>action</code> del formulario podemos utilizar Blade y la funci\u00f3n <code>route</code> para indicar el nombre de ruta a la que queremos enviar el formulario.</p> <p>Veamos, por ejemplo, c\u00f3mo definir un formulario para dar de alta nuevos libros en nuestro proyecto de biblioteca. Creamos una vista llamada <code>create.blade.php</code> en la subcarpeta <code>resources/views/libros</code>, con un contenido como \u00e9ste:</p> <pre><code>@extends('plantilla')\n\n@section('titulo', 'Nuevo libro')\n\n@section('contenido')\n  &lt;h1&gt;Nuevo libro&lt;/h1&gt;\n\n  &lt;form action=\"{{ route('libros.store') }}\" method=\"POST\"&gt;\n\n    &lt;div class=\"form-group\"&gt;\n       &lt;label for=\"titulo\"&gt;T\u00edtulo:&lt;/label&gt;\n       &lt;input type=\"text\" class=\"form-control\"\n              name=\"titulo\" id=\"titulo\"&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-group\"&gt;\n       &lt;label for=\"editorial\"&gt;Editorial:&lt;/label&gt;\n       &lt;input type=\"text\" class=\"form-control\" \n              name=\"editorial\" id=\"editorial\"&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-group\"&gt;\n       &lt;label for=\"precio\"&gt;Precio:&lt;/label&gt;\n       &lt;input type=\"text\" class=\"form-control\" \n              name=\"precio\" id=\"precio\"&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-group\"&gt;\n       &lt;label for=\"autor\"&gt;Autor:&lt;/label&gt;\n       &lt;select class=\"form-control\" name=\"autor\" id=\"autor\"&gt;\n           @foreach ($autores as $autor)\n              &lt;option value=\"{{ $autor-&gt;id }}\"&gt;\n                 {{ $autor-&gt;nombre }}\n              &lt;/option&gt;\n           @endforeach\n       &lt;/select&gt;\n    &lt;/div&gt;\n\n    &lt;input type=\"submit\" class=\"btn btn-dark btn-block\"\n           name=\"enviar\" value=\"Enviar\" &gt;\n\n  &lt;/form&gt;\n@endsection\n</code></pre> <p>Un segundo a\u00f1adido m\u00e1s que tenemos que tener en cuenta es que Laravel por defecto protege de ataques XSS (Cross Site Scripting) de suplantaci\u00f3n de identidad, por lo que obtendremos un error de tipo 419 si enviamos un formulario no validado. Para solucionar este problema, basta con utilizar la directiva <code>@csrf</code> en el formulario, que a\u00f1ade un campo oculto con un token de validaci\u00f3n:</p> <pre><code>&lt;form action=\"{{ route('libros.store') }}\" method=\"POST\"&gt;\n    @csrf\n    // ...\n&lt;/form&gt;\n</code></pre> <p>En cualquier caso, este formulario se enviar\u00e1 a la ruta indicada. Dado que en nuestro proyecto hemos definido un conjunto de recursos como \u00e9ste en <code>routes/web.php</code>, la ruta ya est\u00e1 autom\u00e1ticamente definida como <code>libros.store</code>:</p> <pre><code>Route::resource('libros', LibroController::class);\n</code></pre> <p>De lo contrario, tendr\u00edamos que a\u00f1adir a mano la ruta correspondiente para recoger el formulario.</p> <p>Adem\u00e1s, debemos redefinir los m\u00e9todos involucrados en el controlador: por un lado, el m\u00e9todo <code>create</code> deber\u00e1 renderizar el formulario anterior. Como necesitamos mostrar el listado de autores para asociar uno al libro, le pasaremos a la vista anterior el listado de autores como par\u00e1metro (recuerda incluir el modelo <code>Autor</code> con <code>use</code>, si no lo has hecho antes):</p> <pre><code>public function create()\n{\n  $autores = Autor::get();\n  return view('libros.create', compact('autores'));\n}\n</code></pre> <p>Por otra parte, el m\u00e9todo <code>store</code> se encargar\u00e1 de recoger los datos de la petici\u00f3n a trav\u00e9s del par\u00e1metro <code>Request</code> de dicho m\u00e9todo. Disponemos de un m\u00e9todo <code>get</code> para acceder a cada campo del formulario a partir de su nombre:</p> <pre><code>public function store(Request $request)\n{\n  $libro = new Libro();\n  $libro-&gt;titulo = $request-&gt;get('titulo');\n  $libro-&gt;editorial = $request-&gt;get('editorial');\n  $libro-&gt;precio = $request-&gt;get('precio');\n  $libro-&gt;autor()-&gt;associate(Autor::findOrFail($request-&gt;get('autor')));\n  $libro-&gt;save();\n\n  return redirect()-&gt;route('libros.index');\n}\n</code></pre> <p>Podemos emplear tambi\u00e9n alg\u00fan m\u00e9todo auxiliar de la petici\u00f3n, como <code>has</code>, que comprueba si existe un campo con un nombre determinado:</p> <pre><code>public function store(Request $request)\n{\n  if($request-&gt;has('titulo'))\n  {\n    // ...\n  }\n}\n</code></pre> <p>Para poder lanzar esta operaci\u00f3n de inserci\u00f3n, necesitamos alg\u00fan enlace que muestre el formulario. Podemos a\u00f1adir una nueva opci\u00f3n en el men\u00fa superior de navegaci\u00f3n (archivo <code>resources/views/partials/nav.blade.php</code>):</p> <pre><code>&lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-secondary\"&gt;\n  // ...\n  &lt;div class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n     &lt;ul class=\"navbar-nav\"&gt;\n         ...\n         &lt;li class=\"{{ setActivo('libros.create') }} nav-item\"&gt;\n             &lt;a class=\"nav-link\" href=\"{{ route('libros.create') }}\"&gt;\n                Nuevo libro\n             &lt;/a&gt;\n         &lt;/li&gt;\n     &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"ut10/ut1002/#2-actualizaciones-y-borrados","title":"2. Actualizaciones y borrados","text":"<p>Por defecto, el atributo <code>method</code> de un formulario s\u00f3lo admite los valores GET o POST. Si queremos enviar un formulario de actualizaci\u00f3n o borrado, \u00e9ste debe ir asociado a los m\u00e9todos PUT o DELETE, respectivamente. Para esto, podemos emplear dentro del mismo formulario la directiva <code>@method</code>, indicando el nombre del m\u00e9todo que queremos usar:</p> <pre><code>&lt;form ...&gt;\n  @csrf\n  @method('PUT')\n  // ...\n&lt;/form&gt;\n</code></pre> <p>Por ejemplo, para borrar libros en nuestra aplicaci\u00f3n de biblioteca, podr\u00edamos a\u00f1adir un formulario como este en la ficha del libro (vista <code>resources/views/libros/show.blade.php</code>):</p> <pre><code>&lt;form action=\"{{ route('libros.destroy', $libro-&gt;id) }}\" method=\"POST\"&gt;\n  @csrf\n  @method('DELETE')\n  &lt;input type=\"submit\" class=\"btn btn-danger\" value=\"Borrar libro\" /&gt;\n&lt;/form&gt;\n</code></pre> <p>Observa c\u00f3mo le pasamos a la ruta el id del libro a borrar, para que le llegue como par\u00e1metro al m\u00e9todo <code>destroy</code> del controlador. Dentro de este m\u00e9todo, buscamos el libro afectado, lo borramos, y mostramos el listado de libros nuevamente:</p> <pre><code>public function destroy($id)\n{\n  $libro = Libro::findOrFail($id);\n  $libro-&gt;delete();\n  return redirect()-&gt;route('libros.index');\n}\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 1</code>.</li> <li><code>Ejercicio 2</code> (opcional).</li> </ul>"},{"location":"ut10/ut1003/","title":"Ut1003","text":"<p>Adem\u00e1s de aplicar una validaci\u00f3n en el cliente a trav\u00e9s de HTML5, que tambi\u00e9n es recomendable, se deben validar los datos en el servidor. Para hacer esto, el propio objeto <code>request</code> proporciona un m\u00e9todo llamado <code>validate</code>, al que le pasamos un array con las reglas de validaci\u00f3n.</p>"},{"location":"ut10/ut1003/#1-ejemplo-de-validacion","title":"1. Ejemplo de validaci\u00f3n","text":"<p>Por ejemplo, as\u00ed comprobar\u00edamos que el t\u00edtulo y la editorial de los libros de nuestra biblioteca se han enviado, y que el t\u00edtulo tiene un tama\u00f1o m\u00ednimo de 3 caracteres. Adem\u00e1s, comprobamos que el precio es un valor num\u00e9rico real positivo.</p> <pre><code>public function store()\n{\n  request()-&gt;validate(\n    [\n       'titulo' =&gt; 'required|min:3',\n       'editorial' =&gt; 'required',\n       'precio' =&gt; 'required|numeric|min:0'\n    ]\n  );\n\n  // ... c\u00f3digo para procesar el formulario\n}\n</code></pre> <p> </p> <p>Notar que en varios campos se han a\u00f1adido dos o m\u00e1s reglas de validaci\u00f3n enlazadas por una barra vertical. Para el precio, por ejemplo, se comprueba que se ha enviado, que es num\u00e9rico y que es mayor o igual que 0. Pod\u00e9is consultar en la documentaci\u00f3n de Laravel sobre otras reglas de validaci\u00f3n disponibles, especialmente en el apartado de Available Validation Rules.</p>"},{"location":"ut10/ut1003/#2-utilizar-form-requests-para-validaciones-mas-complejas","title":"2. Utilizar form requests para validaciones m\u00e1s complejas","text":"<p>Si tenemos que validar unos pocos campos, puede ser adecuado llamar al m\u00e9todo <code>validate</code> desde el propio m\u00e9todo del controlador, pero para formularios m\u00e1s grandes el c\u00f3digo puede crecer demasiado.</p> <p>Una alternativa que ofrece laravel es crear un form request, una clase adicional que contiene la l\u00f3gica de validaci\u00f3n de una petici\u00f3n. Se crean con el comando <code>php artisan</code>, y la opci\u00f3n <code>make:request</code>, seguida del nombre de la clase a crear:</p> <pre><code>php artisan make:request LibroPost\n</code></pre> <p>Esta clase se almacena por defecto en <code>app/Http/Requests</code>, y contiene un par de m\u00e9todos predefinidos:</p> <ul> <li><code>authorize</code>: devuelve un booleano dependiendo de si el usuario actual est\u00e1 autorizado a enviar la petici\u00f3n o no. Para muchos formularios que no requieran autorizaci\u00f3n previa podemos simplemente devolver <code>true</code>. Ser\u00e1 lo que haremos de momento en este formulario.</li> <li><code>rules</code>: este es el m\u00e9todo que m\u00e1s nos interesa. Devuelve un array de reglas de validaci\u00f3n como las que ten\u00edamos en el controller, as\u00ed que movemos ese c\u00f3digo aqu\u00ed:</li> </ul> <pre><code>public function rules()\n{\n  return [\n    'titulo' =&gt; 'required|min:3',\n    'editorial' =&gt; 'required',\n    'precio' =&gt; 'required|numeric|min:0'\n  ];\n}\n</code></pre> <p>Ahora, en el m\u00e9todo del controlador simplemente tenemos que inyectar este form request como par\u00e1metro (si observamos la clase que se ha creado, es un subtipo de <code>Request</code>), y usarlo para validar. La validaci\u00f3n es autom\u00e1tica, es decir, no tenemos que a\u00f1adir m\u00e1s c\u00f3digo al controlador que el objeto inyectado como par\u00e1metro, que se encargar\u00e1 de validar la propia petici\u00f3n que contiene a trav\u00e9s del m\u00e9todo <code>rules</code>.</p> <pre><code>public function store(LibroPost $request)\n{\n  // si entramos aqu\u00ed, el formulario es v\u00e1lido\n}\n</code></pre>"},{"location":"ut10/ut1003/#3-mostrar-mensajes-de-error","title":"3. Mostrar mensajes de error","text":"<p>Si la validaci\u00f3n es correcta, se retornar\u00e1 el dato del final de la funci\u00f3n, pero si falla alg\u00fan campo, se volver\u00e1 a la p\u00e1gina del formulario, con la informaci\u00f3n del error que se haya producido. Podemos acceder desde cualquier lugar de Laravel a la variable <code>$errors</code> con los errores que se hayan producido en una operaci\u00f3n determinada. Esta variable tiene un m\u00e9todo booleano llamado <code>any</code> que comprueba si hay alg\u00fan error, y otro m\u00e9todo llamado <code>all</code> que devuelve el array de errores producidos. Combinando estos dos m\u00e9todos con Blade, podemos mostrar el listado de errores de validaci\u00f3n antes del formulario, de esta forma:</p> <pre><code>@if ($errors-&gt;any())\n  &lt;ul&gt;\n  @foreach($errors-&gt;all() as $error)\n      &lt;li&gt;{{ $error }}&lt;/li&gt;\n  @endforeach\n  &lt;/ul&gt;\n@endif\n&lt;form ...&gt;\n  @csrf\n  // ...\n&lt;/form&gt;\n</code></pre> <p>Tambi\u00e9n podemos emplear el m\u00e9todo <code>first</code> del array de errores para obtener el primer error asociado a un campo, y mostrarlo bajo o sobre el campo en cuesti\u00f3n. Por ejemplo:</p> <pre><code>&lt;form action=\"{{ route('libros.store') }}\" method=\"POST\"&gt;\n  @csrf\n\n  &lt;div class=\"form-group\"&gt;\n     &lt;label for=\"titulo\"&gt;T\u00edtulo:&lt;/label&gt;\n     &lt;input type=\"text\" class=\"form-control\" name=\"titulo\" \n            id=\"titulo\"&gt;\n     @if ($errors-&gt;has('titulo'))\n        &lt;div class=\"text-danger\"&gt;\n           {{ $errors-&gt;first('titulo') }}\n        &lt;/div&gt;\n     @endif\n  &lt;/div&gt;\n\n  // ...\n</code></pre> <p>Adem\u00e1s, podemos personalizar el mensaje de error a mostrar, redefiniendo en la clase del form request el m\u00e9todo <code>messages</code>. En este m\u00e9todo devolvemos un array con el mensaje a mostrar para cada posible error de validaci\u00f3n. Por ejemplo:</p> <pre><code>public function messages()\n{\n  return [\n     'titulo.required' =&gt; 'El t\u00edtulo es obligatorio',\n      // ...\n  ];\n}\n</code></pre> <p>De forma alternativa, si optamos por validar el formulario en el propio controlador, este array de mensajes se pasa como segundo par\u00e1metro en la llamada al m\u00e9todo <code>validate</code>:</p> <pre><code>request()-&gt;validate(\n  [\n    'titulo' =&gt; 'required|min:3',\n    'editorial' =&gt; 'required',\n    'precio' =&gt; 'required|numeric|min:0'\n  ], [\n    'titulo.required' =&gt; 'El t\u00edtulo es obligatorio',\n    // ...\n  ]\n);\n</code></pre> <p>En definitiva, conseguiremos mostrar mensajes de error para los campos que hayan dado errores al validar:</p> Errores de validaci\u00f3n."},{"location":"ut10/ut1003/#4-recordar-valores-enviados","title":"4. Recordar valores enviados","text":"<p>Un problema derivado de la validaci\u00f3n de datos es que, al volver a la p\u00e1gina del formulario tras un error, los campos que ya se han examinado hasta el error, aunque fueran correctos, han perdido el valor que ten\u00edan, y puede resultar engorroso tenerlos que rellenar otra vez. Para mantener su antiguo valor, podemos a\u00f1adir el atributo <code>value</code> en cada campo del formulario, y utilizar con Blade una funci\u00f3n llamada <code>old</code>, que permite acceder al anterior valor de un determinado campo, referenciado por su nombre:</p> <pre><code>&lt;form action=\"{{ route('libros.store') }}\" method=\"POST\"&gt;\n  @csrf\n\n  &lt;div class=\"form-group\"&gt;\n     &lt;label for=\"titulo\"&gt;T\u00edtulo:&lt;/label&gt;\n     &lt;input type=\"text\" class=\"form-control\" name=\"titulo\" \n           id=\"titulo\" value=\"{{ old('titulo') }}\"&gt;\n     @if ($errors-&gt;has('titulo'))\n        &lt;div class=\"text-danger\"&gt;\n            {{ $errors-&gt;first('titulo') }}\n        &lt;/div&gt;\n     @endif\n  &lt;/div&gt;\n\n  // ...\n</code></pre> <p>En el caso de \u00e1reas de texto, usamos esta expresi\u00f3n dentro del \u00e1rea (es decir, entre la etiqueta de apertura y la de cierre del textarea):</p> <pre><code>&lt;textarea name=\"mensaje\" placeholder=\"Mensaje...\"&gt;\n  {{ old('mensaje') }}\n&lt;/textarea&gt;\n</code></pre> Ejercicios a realizar <ul> <li><code>Ejercicio 3</code>.</li> </ul>"},{"location":"ut10/ut10ac/","title":"Ejercicios propuestos","text":""},{"location":"ut10/ut10ac/#ejercicio-1","title":"Ejercicio 1","text":"<p>Sobre el proyecto blog de la sesi\u00f3n anterior, vamos a a\u00f1adir estos cambios:</p> <ol> <li>Crea un formulario para dar de alta nuevos posts, en la vista <code>resources/views/posts/create.blade.php</code>. A\u00f1ade dos campos (un texto corto y un texto largo) para rellenar el t\u00edtulo y el contenido, y como autor o usuario del post de momento deja uno predefinido; por ejemplo, el autor con id = 1, o el primer usuario que encuentres en la base de datos (<code>Usuario::get()-&gt;first()</code>). M\u00e1s adelante ya lo haremos dependiente del usuario que se haya autenticado. Recuerda definir el m\u00e9todo <code>store</code> en el controlador de posts para dar de alta el post, y redirigir despu\u00e9s al listado principal de posts. Para cargar el formulario, a\u00f1ade una nueva opci\u00f3n en el men\u00fa principal de navegaci\u00f3n.</li> <li>En la ficha de un post, a\u00f1ade un bot\u00f3n con un formulario para borrar el post. Deber\u00e1s definir el c\u00f3digo del m\u00e9todo <code>destroy</code> para eliminar el post y redirigir de nuevo al listado. En el caso de que hayas hecho el ejercicio opcional de la sesi\u00f3n anterior para a\u00f1adir comentarios a los posts, deber\u00e1s previamente eliminar todos los comentarios asociados a ese post, y despu\u00e9s borrar el post. Para filtrar los comentarios de un post y borrarlos, utiliza la cl\u00e1usula <code>where</code> :</li> </ol> <pre><code>Comentario::where('post_id', $id)-&gt;delete();\n// aqu\u00ed ya borramos el post\n</code></pre>"},{"location":"ut10/ut10ac/#ejercicio-2-opcional","title":"Ejercicio 2  (opcional)","text":"<p>Continuamos con el proyecto blog anterior. Ahora a\u00f1adiremos el formulario de edici\u00f3n de un post, tambi\u00e9n desde la vista de la ficha del post. El formulario deber\u00e1 mostrar los datos ya rellenos del post. Dicho formulario se carga a partir del m\u00e9todo <code>edit</code> (que deber\u00e1 renderizar la vista con el formulario de edici\u00f3n, <code>resources/views/posts/edit.blade.php</code>), y el formulario se enviar\u00e1 al m\u00e9todo <code>update</code> del controlador, pas\u00e1ndole como par\u00e1metro el id del post a modificar.</p>"},{"location":"ut10/ut10ac/#ejercicio-3","title":"Ejercicio 3","text":"<p>Continuamos con el proyecto blog anterior. Crea un form request llamado <code>PostRequest</code>, que valide los datos del post. En concreto, deben cumplirse estos requisitos:</p> <ul> <li>El t\u00edtulo del post debe ser obligatorio, y de al menos 5 caracteres de longitud.</li> <li>El contenido del post debe ser obligatorio, y de al menos 50 caracteres de longitud.</li> </ul> <p>Define mensajes de error personalizados para cada posible error de validaci\u00f3n, y mu\u00e9stralos junto a cada campo afectado, como en el ejemplo de la biblioteca. Adem\u00e1s, utiliza la funci\u00f3n <code>old</code> para recordar el valor antiguo correcto, en el caso de que un campo pase la validaci\u00f3n pero otro(s) no.</p> <p>\u00bfQu\u00e9 entregar en estos ejercicios?</p> <p>Como entrega de esta sesi\u00f3n deber\u00e1s comprimir el proyecto blog con todos los cambios incorporados, y eliminando las carpetas <code>vendor</code> y <code>node_modules</code> como se explic\u00f3 en las sesiones anteriores. Renombra el archivo comprimido a <code>blog_10.zip</code>.</p>"},{"location":"ut11/ut1101/","title":"UT 11. Servicios REST","text":"<p>Duraci\u00f3n estimada: 10 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA7. Desarrolla servicios web reutilizables y accesibles mediante protocolos web, verificando su funcionamiento. a) Se han reconocido las caracter\u00edsticas propias y el \u00e1mbito de aplicaci\u00f3n de los servicios web. e) Se ha programado un servicio web. f) Se ha verificado el funcionamiento del servicio web."},{"location":"ut11/ut1102/","title":"Ut1102","text":"<p>En esta unidad del curso veremos c\u00f3mo emplear Laravel como proveedor de servicios REST. Comenzaremos detallando algunas cuestiones b\u00e1sicas de la arquitectura cliente-servidor y de los servicios REST, para luego pasar a ver c\u00f3mo desarrollarlos y probarlos con Laravel.</p> <p>A estas alturas todos deber\u00edamos tener claro que cualquier aplicaci\u00f3n web se basa en una arquitectura cliente-servidor, donde un servidor queda a la espera de conexiones de clientes, y los clientes se conectan a los servidores para solicitar ciertos recursos. Sobre esta base, veremos unas breves pinceladas de c\u00f3mo funciona el protocolo HTTP, y en qu\u00e9 consisten los servicios REST.</p>"},{"location":"ut11/ut1102/#1-conceptos-basicos-del-protocolo-http","title":"1. Conceptos b\u00e1sicos del protocolo HTTP","text":"<p>Las comunicaciones web entre cliente y servidor se realizan mediante el protocolo HTTP (o HTTPS, en el caso de comunicaciones seguras). En ambos casos, cliente y servidor se env\u00edan cierta informaci\u00f3n est\u00e1ndar, en cada mensaje</p> <p>En cuanto a los clientes, env\u00edan al servidor los datos del recurso que solicitan, junto con cierta informaci\u00f3n adicional, como por ejemplo las cabeceras de petici\u00f3n (informaci\u00f3n relativa al tipo de cliente o navegador, contenido que acepta, etc), y par\u00e1metros adicionales llamados normalmente datos del formulario, puesto que suelen contener la informaci\u00f3n de alg\u00fan formulario que se env\u00eda de cliente a servidor.</p> <p>Por lo que respecta a los servidores, aceptan estas peticiones, las procesan y env\u00edan de vuelta algunos datos relevantes, como un c\u00f3digo de estado (indicando si la petici\u00f3n pudo ser atendida satisfactoriamente o no), cabeceras de respuesta (indicando el tipo de contenido enviado, tama\u00f1o, idioma, etc), y el recurso solicitado propiamente dicho, si todo ha ido correctamente.</p> <p>Este es el mecanismo que hemos estado utilizando hasta ahora a trav\u00e9s de los controladores: reciben la petici\u00f3n concreta del cliente, y env\u00edan una respuesta, que por el momento se ha centrado en renderizar un contenido HTML de una vista.</p> <p>En cuanto a los c\u00f3digos de estado de la respuesta, depende del resultado de la operaci\u00f3n que se haya realizado, \u00e9stos se catalogan en cinco grupos:</p> <ul> <li>C\u00f3digos 1XX**: representan informaci\u00f3n sobre una petici\u00f3n normalmente incompleta. No son muy habituales, pero se pueden emplear cuando la petici\u00f3n es muy larga, y se env\u00eda antes una cabecera para comprobar si se puede procesar dicha petici\u00f3n.</li> <li>C\u00f3digos 2xx: representan peticiones que se han podido atender satisfactoriamente. El c\u00f3digo m\u00e1s habitual es el 200, respuesta est\u00e1ndar para las peticiones que son correctas. Existen otras variantes, como el c\u00f3digo 201, que se env\u00eda cuando se ha insertado o creado un nuevo recurso en el servidor (una inserci\u00f3n en una base de datos, por ejemplo), o el c\u00f3digo 204, que indica que la petici\u00f3n se ha atendido bien, pero no se ha devuelto nada como respuesta.</li> <li>C\u00f3digos 3xx: son c\u00f3digos de redirecci\u00f3n, que indican que de alg\u00fan modo la petici\u00f3n original se ha redirigido a otro recurso del servidor. Por ejemplo, el c\u00f3digo 301 indica que el recurso solicitado se ha movido permanentemente a otra URL. El c\u00f3digo 304 indica que el recurso solicitado no ha cambiado desde la \u00faltima vez que se solicit\u00f3, por si se quiere recuperar de la cach\u00e9 local en ese caso.</li> <li>C\u00f3digos 4xx: indican un error por parte del cliente. El m\u00e1s t\u00edpico es el error 404, que indica que estamos solicitando una URL o recurso que no existe. Pero tambi\u00e9n hay otros habituales, como el 401 (cliente no autorizado), o 400 (los datos de la petici\u00f3n no son correctos, por ejemplo, porque los campos del formulario no sean v\u00e1lidos).</li> <li>C\u00f3digos 5xx: indican un error por parte del servidor. Por ejemplo, el error 500 indica un error interno del servidor, o el 504, que es un error de timeout por tiempo excesivo en emitir la respuesta.</li> </ul> <p>Haremos uso de estos c\u00f3digos de estado en nuestros servicios REST para informar al cliente del tipo de error que se haya producido, o del estado en que se ha podido atender su petici\u00f3n.</p>"},{"location":"ut11/ut1102/#2-los-servicios-rest","title":"2. Los servicios REST","text":"<p>REST son las siglas de RE*presentational State T*ransfer, y designa un estilo de arquitectura de aplicaciones distribuidas basado en HTTP. En un sistema REST, identificamos cada recurso a solicitar con una URI (identificador uniforme de recurso), y definimos un conjunto delimitado de comandos o m\u00e9todos a realizar, que t\u00edpicamente son:</p> <ul> <li>GET: para obtener resultados de alg\u00fan tipo (listados completos o filtrados por alguna condici\u00f3n).</li> <li>POST: para realizar inserciones o a\u00f1adir elementos en un conjunto de datos.</li> <li>PUT: para realizar modificaciones o actualizaciones del conjunto de datos.</li> <li>DELETE: para realizar borrados del conjunto de datos.</li> <li>Existen otros tipos de comandos o m\u00e9todos, como por ejemplo PATCH (similar a PUT, pero para cambios parciales), HEAD (para consultar s\u00f3lo el encabezado de la respuesta obtenida), etc. </li> </ul> <p>Nos centraremos de momento en los cuatro m\u00e9todos principales anteriores.</p> <p>Por lo tanto, identificando el recurso a solicitar y el comando a aplicarle, el servidor que ofrece esta API REST proporciona una respuesta a esa petici\u00f3n. Esta respuesta t\u00edpicamente viene dada por un mensaje en formato JSON o XML (aunque \u00e9ste \u00faltimo cada vez est\u00e1 m\u00e1s en desuso). Esto permite que las aplicaciones puedan extenderse a distintas plataformas, y acceder a los mismos servicios desde una aplicaci\u00f3n Angular, o una aplicaci\u00f3n de escritorio .NET, o una aplicaci\u00f3n m\u00f3vil en Android, por poner varios ejemplos.</p> <p>Aclaraci\u00f3n</p> <p>Para quienes no conozc\u00e1is la definici\u00f3n de API (Application Programming Interface), b\u00e1sicamente es el conjunto de m\u00e9todos o funcionalidades que se ponen a disposici\u00f3n de quienes los quieran utilizar. En este caso, el concepto de API REST hace referencia al conjunto de servicios REST proporcionados por el servidor para los clientes que quieran utilizarlos.  Una de las caracter\u00edsticas fundamentales de las API es que son Stateless, lo que quiere decir que las peticiones se hacen y desaparecen, no hay usuarios logueados ni datos que se quedan almacenados.  Ejemplos de APIs gratuitas:</p> <ul> <li>ChuckNorris IO{:target=\"blank\"}</li> <li>_OMDB</li> <li>PokeAPI - Pokemon{:target=\"blank\"}</li> <li>_RAWg - Videojuegos</li> <li>The Star Wars API</li> </ul> <p>Para hacer pruebas con estas APIs podemos implementar el c\u00f3digo para consumirlas o utilizar un cliente especial para el consumo de estos servicios.</p> <ul> <li>PostMan</li> <li>Thunder Client (utilizaremos esta extensi\u00f3n de VS Code para nuestras comprobaciones){:target=\"_blank\"}.</li> <li>Insomnia</li> <li>Advance REST Client (desde el navegador)</li> </ul>"},{"location":"ut11/ut1102/#3-el-formato-json","title":"3. El formato JSON","text":"<p>JSON son las siglas de JavaScript Object Notation, una sintaxis propia de Javascript para poder representar objetos como cadenas de texto, y poder as\u00ed serializar y enviar informaci\u00f3n de objetos a trav\u00e9s de flujos de datos (archivos de texto, comunicaciones cliente-servidor, etc).</p> <p>Un objeto Javascript se define mediante una serie de propiedades y valores. Por ejemplo, los datos de una persona (como nombre y edad) podr\u00edamos almacenarlos as\u00ed:</p> <pre><code>let persona = {\n    nombre: \"Nacho\",\n    edad: 39\n};\n</code></pre> <p>Este mismo objeto, convertido a JSON, formar\u00eda una cadena de texto con este contenido:</p> <pre><code>{\"nombre\":\"Nacho\",\"edad\":39}\n</code></pre> <p>Del mismo modo, si tenemos una colecci\u00f3n (vector) de objetos como \u00e9sta:</p> <pre><code>let personas = [\n    { nombre: \"Nacho\", edad: 39},\n    { nombre: \"Mario\", edad: 4},\n    { nombre: \"Laura\", edad: 2},\n    { nombre: \"Nora\", edad: 10}\n];\n</code></pre> <p>Transformada a JSON sigue la misma sintaxis, pero entre corchetes:</p> <pre><code>[{\"nombre\":\"Nacho\",\"edad\":39}, {\"nombre\":\"Mario\",\"edad\":4},  \n {\"nombre\":\"Laura\",\"edad\":2}, {\"nombre\":\"Nora\",\"edad\":10}]\n</code></pre> <p>Cuando solicitamos un servicio REST, t\u00edpicamente la respuesta (los datos que nos env\u00eda el servicio) vienen en este formato JSON, de modo que es f\u00e1cilmente serializable y se puede enviar entre cualquier tipo de cliente (m\u00f3vil, web, escritorio) y el servidor.</p>"},{"location":"ut11/ut1103/","title":"Ut1103","text":"<p>Veamos ahora qu\u00e9 pasos dar para construir una API REST en Laravel que d\u00e9 soporte a las operaciones b\u00e1sicas sobre una o varias entidades: consultas (GET), inserciones (POST), modificaciones (PUT) y borrados (DELETE). Emplearemos para ello los denominados controladores de API, que comentamos brevemente en unidades anteriores, al hablar de controladores, y que proporcionan un conjunto de funciones ya definidas para dar soporte a cada uno de estos comandos.</p>"},{"location":"ut11/ut1103/#1-definiendo-los-controladores-de-api","title":"1. Definiendo los controladores de API","text":"<p>Para proporcionar una API REST a los clientes que lo requieran, necesitamos definir un controlador (o controladores) orientados a ofrecer estos servicios REST. Estos controladores en Laravel se denominan de tipo api, como vimos en sesiones previas. Normalmente se definir\u00e1 un controlador API por cada uno de los modelos a los que necesitemos acceder. Vamos a crear uno de prueba para ofrecer una API REST sobre los libros de nuestra aplicaci\u00f3n de biblioteca.</p> <p>Existen diferentes formas de ejecutar el comando de creaci\u00f3n del controlador de API. Aqu\u00ed vamos a mostrar quiz\u00e1 una de las m\u00e1s \u00fatiles:</p> <pre><code>php artisan make:controller Api/LibroController --api --model=Libro\n// \u00f3, si no funciona:\n// sudo docker-compose exec myapp php artisan make:controller Api/LibroController --api --model=Libro\n</code></pre> <p>\u200b   </p> <pre><code>namespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Libro;\nuse Illuminate\\Http\\Request;\n\nclass LibroController extends Controller\n{\n  /**\n   * Display a listing of the resource.\n   *\n   * @return \\Illuminate\\Http\\Response\n   */\n  public function index()\n  {\n    //\n  }\n\n  /**\n   * Store a newly created resource in storage.\n   *\n   * @param  \\Illuminate\\Http\\Request  $request\n   * @return \\Illuminate\\Http\\Response\n   */\n  public function store(Request $request)\n  {\n    //\n  }\n\n  /**\n   * Display the specified resource.\n   *\n   * @param  \\App\\Models\\Libro  $libro\n   * @return \\Illuminate\\Http\\Response\n   */\n  public function show(Libro $libro)\n  {\n    //\n  }\n\n  /**\n   * Update the specified resource in storage.\n   *\n   * @param  \\Illuminate\\Http\\Request  $request\n   * @param  \\App\\Models\\Libro  $libro\n   * @return \\Illuminate\\Http\\Response\n   */\n  public function update(Request $request, Libro $libro)\n  {\n    //\n  }\n\n  /**\n   * Remove the specified resource from storage.\n   *\n   * @param  \\App\\Models\\Libro  $libro\n   * @return \\Illuminate\\Http\\Response\n   */\n  public function destroy(Libro $libro)\n  {\n    //\n  }\n}\n</code></pre> <p>Observemos que se incorpora autom\u00e1ticamente la cl\u00e1usula <code>use</code> para cargar el modelo asociado, que hemos indicado en el par\u00e1metro <code>--model</code>. Adem\u00e1s, los m\u00e9todos <code>show</code>, <code>update</code> y <code>destroy</code> ya vienen con un par\u00e1metro de tipo <code>Libro</code> que facilitar\u00e1 mucho algunas tareas.</p> <p> </p> <p>En el caso de versiones anteriores a Laravel 8, hay que tener en cuenta que, por defecto, los modelos se ubican en la carpeta <code>App</code>, por lo que deberemos indicar cualquier subcarpeta donde localizar el modelo cuando creemos el controlador, si es que lo hemos movido a una subcarpeta. Por ejemplo, <code>--model=Models/Libro</code>.</p> <p>Cada una de las funciones del nuevo controlador creado se asocia a uno de los m\u00e9todos REST comentados anteriormente:</p> <ul> <li><code>index</code> se asociar\u00eda con una operaci\u00f3n GET de listado general, para obtener todos los registros (de libros, en este caso)</li> <li><code>store</code> se asociar\u00eda con una operaci\u00f3n POST, para almacenar los datos que lleguen en la petici\u00f3n (como un nuevo libro, en nuestro caso)</li> <li><code>show</code> se asociar\u00eda con una operaci\u00f3n GET para obtener el registro asociado a un identificador concreto</li> <li><code>update</code> se asociar\u00eda con una operaci\u00f3n PUT, para actualizar los datos del registro asociado a un identificador concreto</li> <li><code>destroy</code> se asociar\u00eda con una operaci\u00f3n DELETE, para eliminar los datos del registro asociado a un identificador concreto</li> </ul>"},{"location":"ut11/ut1103/#2-estableciendo-las-rutas","title":"2. Estableciendo las rutas","text":"<p>Una vez tenemos el controlador API creado, vamos a definir las rutas asociadas a cada m\u00e9todo del controlador. Si recordamos de sesiones anteriores, pod\u00edamos emplear el m\u00e9todo <code>Route::resource</code> en el archivo <code>routes/web.php</code> para establecer de golpe todas las rutas asociadas a un controlador de recursos. De forma an\u00e1loga, podemos emplear el m\u00e9todo <code>Route::apiResource</code> en el archivo <code>routes/api.php</code> para establecer autom\u00e1ticamente todas las rutas de un controlador de API. A\u00f1adimos esta l\u00ednea en dicho archivo <code>routes/api.php</code>:</p> <pre><code>use App\\Http\\Controllers\\Api\\LibroController;\n// ...\nRoute::apiResource('libros', LibroController::class);\n</code></pre> <p>Las rutas de API (aquellas definidas en el archivo <code>routes/api.php</code>) por defecto tienen un prefijo <code>api</code>, tal y como se establece en el provider <code>RouteServiceProvider</code>. Por tanto, hemos definido una ruta general <code>api/libros</code>, de forma que todas las subrutas que se deriven de ella llevar\u00e1n a uno u otro m\u00e9todo del controlador de API de libros.</p> <p>Podemos comprobar qu\u00e9 rutas hay activas con este comando:</p> <pre><code>php artisan route:list\n// \u00f3, si no funciona:\n// sudo docker-compose exec myapp php artisan route:list\n</code></pre> <p>Veremos, entre otras, las 5 rutas derivadas del controlador API de libros:</p> <pre><code>+----------------------------------------------------+\n|Method     | URI                   | Name           |\n+----------------------------------------------------+\n| GET|HEAD  | api/libros            | libros.index   |\n| POST      | api/libros            | libros.store   |\n| GET|HEAD  | api/libros/{libro}    | libros.show    |\n| PUT|PATCH | api/libros/{libro}    | libros.update  |\n| DELETE    | api/libros/{libro}    | libros.destroy |\n+----------------------------------------------------+\n</code></pre>"},{"location":"ut11/ut1103/#3-servicios-get","title":"3. Servicios GET","text":"<p>Vamos a empezar por definir el m\u00e9todo <code>index</code>. En este caso, vamos a obtener el conjunto de libros de la base de datos y devolverlo tal cual:</p> <pre><code>public function index()\n{\n  $libros = Libro::get();\n  return $libros;\n}\n</code></pre> <p>Si accedemos a la ruta <code>api/libros</code> desde el navegador, se activar\u00e1 el m\u00e9todo <code>index</code> que acabamos de implementar, y recibiremos los libros de la base de datos, directamente en formato JSON.</p> Acceso al m\u00e9todo index desde la URL api/libros desde el navegador web. <p> </p> <p>Podemos instalar la extensi\u00f3n JSON formatter para Chrome, y as\u00ed poder ver los datos en formato JSON m\u00e1s organizados y con la sintaxis resaltada, como en la imagen anterior.</p> <p>De una forma similar, podr\u00edamos implementar y probar el m\u00e9todo <code>show</code>, para mostrar los datos de un libro en particular:</p> <pre><code>public function show(Libro $libro)\n{\n  return $libro;\n}\n</code></pre> <p>En este caso, si accedemos a la URI <code>api/libros/1</code>, obtendremos la informaci\u00f3n del libro con id = 1. Notar que Laravel se encarga autom\u00e1ticamente de buscar el libro por nosotros (hacer la correspondiente operaci\u00f3n <code>find</code> para el id proporcionado). Es lo que se conoce como enlace impl\u00edcito, y es algo que tambi\u00e9n est\u00e1 disponible en los controladores web normales, siempre que los asociemos correctamente con el modelo vinculado. Esto se hace autom\u00e1ticamente si creamos el controlador junto con el modelo, como vimos en la unidad 4, o si usamos el par\u00e1metro <code>--model</code> para asociarlo, como hemos hecho aqu\u00ed.</p>"},{"location":"ut11/ut1103/#31-mas-sobre-el-formato-json-y-la-respuesta","title":"3.1. M\u00e1s sobre el formato JSON y la respuesta","text":"<p>Tras probar los dos servicios anteriores, habr\u00e1s observado que Laravel se encarga de transformar directamente los registros obtenidos a formato JSON cuando los enviamos mediante <code>return</code>, por lo que, en principio, no tenemos por qu\u00e9 preocuparnos de este proceso. Sin embargo, de este modo se escapan algunas cosas a nuestro control. Por ejemplo, y sobre todo, no podemos especificar el c\u00f3digo de estado de la respuesta, que por defecto es 200 si todo ha ido correctamente. Adem\u00e1s, tampoco podemos controlar qu\u00e9 informaci\u00f3n enviar del objeto en cuesti\u00f3n.</p> <p>Si queremos limitar o formatear la informaci\u00f3n a enviar de los objetos que estamos tratando, y que no se env\u00eden todos sus campos sin m\u00e1s, tenemos varias opciones:</p> <ul> <li>A\u00f1adir cl\u00e1usulas <code>hidden</code> en los modelos correspondientes, para indicar que esa informaci\u00f3n no debe ser enviada en ning\u00fan caso en ninguna parte de la aplicaci\u00f3n. Es lo que ocurre, por ejemplo, con el campo password del modelo de <code>Usuario</code>:</li> </ul> <pre><code>protected $hidden = ['password'];\n</code></pre> <ul> <li>Definir a mano un array con los campos a enviar en el m\u00e9todo del controlador. En el caso de la ficha del libro anterior, si s\u00f3lo queremos enviar el t\u00edtulo y la editorial, podr\u00edamos hacer algo as\u00ed:</li> </ul> <pre><code>public function show(Libro $libro)\n{\n  return [\n     'titulo'    =&gt; $libro-&gt;titulo,\n     'editorial' =&gt; $libro-&gt;editorial\n  ];\n}\n</code></pre> <ul> <li>En el caso de que el paso anterior sea muy costoso (porque el modelo tenga muchos campos, o porque tengamos que hacer lo mismo en varias partes del c\u00f3digo), tambi\u00e9n podemos definir recursos (resources), que permiten separar el c\u00f3digo de la informaci\u00f3n a mostrar del propio controlador. Aqu\u00ed pod\u00e9is encontrar informaci\u00f3n al respecto, ya que estos contenidos escapan del alcance de esta sesi\u00f3n.</li> </ul> <p>Por otra parte, si queremos a\u00f1adir o modificar m\u00e1s informaci\u00f3n en la respuesta, como el c\u00f3digo de estado, la estructura anterior no nos sirve, ya que siempre se va a enviar un c\u00f3digo 200. Para esto, es conveniente emplear el m\u00e9todo <code>response()-&gt;json(...)</code>, que permite especificar como primer par\u00e1metro los datos a enviar, y como segundo par\u00e1metro el c\u00f3digo de estado. Los m\u00e9todos anteriores quedar\u00edan as\u00ed, enviando un c\u00f3digo 200 como respuesta (aunque si se omite el segundo par\u00e1metro, se asume que es 200):</p> <pre><code>public function index()\n{\n  $libros = Libro::get();\n  return response()-&gt;json($libros, 200);;\n}\n// ...\npublic function show(Libro $libro)\n{\n  return response()-&gt;json($libro, 200);\n}\n</code></pre>"},{"location":"ut11/ut1103/#4-resto-de-servicios","title":"4. Resto de servicios","text":"<p>Veamos ahora c\u00f3mo implementar el resto de servicios (POST, PUT y DELETE). En el caso de la inserci\u00f3n (POST), deberemos recibir en la petici\u00f3n los datos del objeto a insertar (un libro, en nuestro ejemplo). Igual que los datos del servidor al cliente se env\u00edan en formato JSON, es de esperar en aplicaciones que siguen la arquitectura REST que los datos del cliente al servidor tambi\u00e9n se env\u00eden en formato JSON.</p> <p>Nuestro m\u00e9todo <code>store</code>, asociado al servicio POST, podr\u00eda quedar de este modo (devolvemos el c\u00f3digo de estado 201, que se utiliza cuando se han insertado elementos nuevos):</p> <pre><code>public function store(Request $request)\n{\n  $libro = new Libro();\n  $libro-&gt;titulo = $request-&gt;titulo;\n  $libro-&gt;editorial = $request-&gt;editorial;\n  $libro-&gt;precio = $request-&gt;precio;\n  $libro-&gt;autor()-&gt;associate(Autor::findOrFail($request-&gt;autor_id));\n  $libro-&gt;save();\n\n  return response()-&gt;json($libro, 201);\n}\n</code></pre> <p>De forma similar implementar\u00edamos el servicio PUT, a trav\u00e9s del m\u00e9todo <code>update</code>. En este caso devolvemos un c\u00f3digo de estado 200:</p> <pre><code>public function update(Request $request, Libro $libro)\n{\n  $libro-&gt;titulo = $request-&gt;titulo;\n  $libro-&gt;editorial = $request-&gt;editorial;\n  $libro-&gt;precio = $request-&gt;precio;\n  $libro-&gt;autor()-&gt;associate(Autor::findOrFail($request-&gt;autor_id));\n  $libro-&gt;save();\n\n  return response()-&gt;json($libro);\n}\n</code></pre> <p>Finalmente, para el servicio DELETE, debemos implementar el m\u00e9todo <code>destroy</code>, que podr\u00eda quedar as\u00ed:</p> <pre><code>public function destroy(Libro $libro)\n{\n  $libro-&gt;delete();\n  return response()-&gt;json(null, 204);\n}\n</code></pre> <p>Notar que devolvemos un c\u00f3digo de estado 204, que indica que no estamos devolviendo contenido (es null). Por otra parte, es habitual en este tipo de operaciones de borrado devolver en formato JSON el objeto que se ha eliminado, por si acaso se quiere deshacer la operaci\u00f3n en un paso posterior. En este caso, el c\u00f3digo del m\u00e9todo de borrado ser\u00eda as\u00ed:</p> <pre><code>public function destroy(Libro $libro)\n{\n  $libro-&gt;delete();\n  return response()-&gt;json($libro);\n}\n</code></pre> <p>Como podemos empezar a intuir, probar estos servicios no es tan sencillo como probar servicios de tipo GET, ya que no podemos simplemente teclear una URL en el navegador. Necesitamos un mecanismo para pasarle los datos al servidor en formato JSON, y tambi\u00e9n el m\u00e9todo (POST, PUT o DELETE). Veremos c\u00f3mo en la siguiente secci\u00f3n.</p>"},{"location":"ut11/ut1103/#validacion-de-datos","title":"Validaci\u00f3n de datos","text":"<p>A la hora de recibir datos en formato JSON para servicios REST, tambi\u00e9n podemos establecer mecanismos de validaci\u00f3n similares a los vistos para los formularios, a trav\u00e9s de los correspondientes requests. De hecho, en el caso de la biblioteca podemos emplear la clase <code>App\\Http\\Requests\\LibroPost</code> que hicimos en sesiones anteriores, para validar que los datos que llegan tanto a <code>store</code> como a <code>update</code> son correctos. Basta con usar un par\u00e1metro de este tipo en estos m\u00e9todos, en lugar del par\u00e1metro <code>Request</code> que viene por defecto:</p> <pre><code>public function store(LibroPost $request)\n{\n  // ...\n}\n...\npublic function update(LibroPost $request, Libro $libro)\n{\n  // ...\n}\n</code></pre>"},{"location":"ut11/ut1103/#respuestas-de-error","title":"Respuestas de error","text":"<p>Por otra parte, debemos asegurarnos de que cualquier error que se produzca en la parte de la API devuelva un cotenido en formato JSON, y no una p\u00e1gina web. Por ejemplo, si solicitamos ver la ficha de un libro cuyo id no existe, no deber\u00eda devolvernos una p\u00e1gina de error 404, sino un c\u00f3digo de estado 404 con un mensaje de error en formato JSON.</p> <p>Esto no se cumple por defecto, ya que Laravel est\u00e1 configurado para renderizar una vista con el error producido. Para modificar este comportamiento en versiones anteriores a Laravel 8, debemos editar el archivo <code>App\\Exceptions\\Handler.php</code>, en concreto su m\u00e9todo <code>render</code>, y hacer algo as\u00ed:</p> <pre><code>public function render($request, Throwable $exception)\n{\n  if ($request-&gt;is('api*'))\n  {\n    if ($exception instanceof ModelNotFoundException)\n      return response()-&gt;json(['error' =&gt; 'Elemento no encontrado'], 404);\n    else if ($exception instanceof ValidationException)\n      return response()-&gt;json(['error' =&gt; 'Datos no v\u00e1lidos'], 400);\n    else if (isset($exception))\n      return response()-&gt;json(['error' =&gt; 'Error en la aplicaci\u00f3n: ' . \n                $exception-&gt;getMessage()], 500);\n  }\n\n  // Esta es la \u00fanica instrucci\u00f3n que hay en la versi\u00f3n original\n  return parent::render($request, $exception);\n}\n</code></pre> <p>Hemos a\u00f1adido sobre el c\u00f3digo original una cl\u00e1usula <code>if</code> que se centra en las peticiones de tipo <code>api</code>. En este caso, podemos distinguir los distintos tipos de excepciones que se producen. Para nuestro ejemplo distinguimos tres: errores de tipo 404, errores de validaci\u00f3n u otros errores. En todos los casos se devuelve un contenido JSON con el c\u00f3digo de estado y campos adecuados. Si todo es correcto y no hay errores, o si no estamos en rutas api, el comportamiento ser\u00e1 el habitual.</p> <p>En el caso de Laravel 8 y posteriores, el m\u00e9todo a modificar se llama <code>register</code>, dentro de la misma clase <code>App\\Exceptions\\Handler.php</code>. Lo podemos dejar de este modo para hacer algo equivalente a lo anterior:</p> <pre><code>public function register()\n{\n  $this-&gt;renderable(function (Throwable $exception) {\n     if (request()-&gt;is('api*'))\n     {\n        if ($exception instanceof ModelNotFoundException)\n            return response()-&gt;json(['error' =&gt; 'Recurso no encontrado'], 404);\n        else if ($exception instanceof ValidationException)\n            return response()-&gt;json(['error' =&gt; 'Datos no v\u00e1lidos'], 400);\n        else if (isset($exception))\n            return response()-&gt;json(['error' =&gt; 'Error: ' . \n                    $exception-&gt;getMessage()], 500);\n     }\n  });\n}\n</code></pre> <p> </p> <p>Relacionado con el c\u00f3digo anterior, las excepciones que se identifican est\u00e1n en <code>Illuminate\\Database\\Eloquent\\ModelNotFoundException</code> e <code>Illuminate\\Validation\\ValidationException</code>, respectivamente.</p> <p>En algunas versiones de Laravel, la clase base <code>ExceptionHandler</code> realiza algunas conversiones de tipos de excepciones. As\u00ed, por ejemplo, la excepci\u00f3n <code>ModelNotFoundException</code> se convierte a <code>NotFoundHttpException</code>. En este caso, el <code>if</code> anterior que detecta la excepci\u00f3n podr\u00eda no funcionar, ya que el operador <code>instanceof</code> est\u00e1 buscando la excepci\u00f3n equivocada. Una forma algo m\u00e1s completa de detectar si no se encuentra el recurso solicitado ser\u00eda esta (incluimos las cl\u00e1usulas <code>using</code> correspondientes tambi\u00e9n):</p> <pre><code>namespace App\\Exceptions;\n\nuse Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nuse Illuminate\\Validation\\ValidationException;\nuse Illuminate\\Database\\Eloquent\\ModelNotFoundException;\nuse Throwable;\n\nclass Handler extends ExceptionHandler\n{\n  // ...\n\n  public function register()\n  {\n    $this-&gt;renderable(function (Throwable $exception) {\n       if (request()-&gt;is('api*'))\n       {\n          if ($exception instanceof ModelNotFoundException ||\n             ($exception instanceof NotFoundHttpException &amp;&amp; \n               $exception-&gt;getPrevious() &amp;&amp;\n               $exception-&gt;getPrevious() instanceof ModelNotFoundException))\n            return response()-&gt;json(['error' =&gt; 'Recurso no encontrado'], 404);\n          else if ($exception instanceof ValidationException)\n            return response()-&gt;json(['error' =&gt; 'Datos no v\u00e1lidos'], 400);\n          else if (isset($exception))\n            return response()-&gt;json(['error' =&gt; 'Error: ' .\n                        $exception-&gt;getMessage()], 500);\n       }\n    });\n  }\n</code></pre> <p>De este modo, detectamos tanto si es una <code>ModelNotFoundException</code> original como si ha sido convertida a <code>NotFoundHttpException</code>.</p>"},{"location":"ut11/ut11ac/","title":"Ejemplo API Rest en tabla productos","text":""},{"location":"ut11/ut11ac/#crear-tabla-productos","title":"Crear tabla productos","text":"<p>Antes de crear nuestra API en tabla <code>Productos</code> deberemos tener dicha tabla migrada en nuestro sistema. Para ello:</p> <p>(1) Crear migraci\u00f3n para la tabla <code>productos</code>:</p> <p>Recuerda</p> <p>El nombre de la migraci\u00f3n contiene palabras reservadas para como son create y table.</p> <pre><code>php artisan make:migration create_productos_table\n</code></pre> Crear migraci\u00f3n. Listado de migraciones en database/migrations. <p>(2) A\u00f1adir al fichero generado (en la carpeta <code>migrations</code> y en el ejemplo anterior 2024_01_08_102832_create_productos_table.php) el resto de campos que se requieran en la tabla <code>productos</code>:</p> <pre><code>public function up(): void\n{\n  Schema::create('productos', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('nombre');\n    $table-&gt;text('descripcion');\n    $table-&gt;decimal('precio', 8, 2);\n    $table-&gt;timestamps();\n });\n}\n</code></pre> <p>(3) Ejecutar migraci\u00f3n:</p> <pre><code>php artisan migrate\n</code></pre> Ejecuci\u00f3n de la migraci\u00f3n.. Tabla en la base de datos despu\u00e9s de la ejecuci\u00f3n de la migraci\u00f3n. <p>(4) Crear un <code>seeder</code> para realizar una carga de datos:</p> <p>Introducimos informaci\u00f3n en esta tabla nueva, creando un fichero en la carpeta <code>database/seeders</code> de nombre <code>ProductoSeeder.php</code>:</p> <pre><code>&lt;?php\n  namespace Database\\Seeders;\n  use Illuminate\\Database\\Seeder;\n  use Illuminate\\Support\\Facades\\DB;\n\n  class ProductoSeeder extends Seeder {\n\n    public function run() {\n      // insertar datos prueba \n      DB::table('productos')-&gt;insert([\n         'nombre' =&gt; 'producto prueba 1',\n         'descripcion' =&gt; 'esta es una descripci\u00f3n para el producto prueba 1',\n         'precio' =&gt; 19.99,\n      ]);\n\n      DB::table('productos')-&gt;insert([\n         'nombre' =&gt; 'producto prueba 2',\n         'descripcion' =&gt; 'esta es una descripci\u00f3n para el producto prueba 2',\n         'precio' =&gt; 29.99,\n      ]);\n    }\n}\n</code></pre> <p>(5) Ejecutar el <code>seeder</code>:</p> <pre><code>php artisan db:seed --class=ProductoSeeder\n</code></pre> Tabla en la base de datos despu\u00e9s de la ejecuci\u00f3n de la migraci\u00f3n. Tabla en la base de datos despu\u00e9s de la ejecuci\u00f3n de la migraci\u00f3n."},{"location":"ut11/ut11ac/#crear-controlador-productocontroller","title":"Crear controlador ProductoController","text":"<p>Crear un controlador donde establezcamos los m\u00e9todos que nosotros queramos realizar a la hora de trabajar con los datos.</p> <p>(1) Crear desde consola un controlador para la tabla <code>productos</code>:</p> <pre><code>php artisan make:controller ProductoController\n</code></pre> Creaci\u00f3n del controlador del modelo Producto (ProductoController). Listado de controladores en app/Http/Controllers. <p>La estructura de este archivo es un poco diferente a los controladores que ya hemos visto anteriormente. Ahora tenemos los siguientes m\u00e9todos creados de manera autom\u00e1tica:</p> <ul> <li><code>index()</code> normalmente para listar (en nuestro caso los chollos).</li> <li><code>create()</code> para crear plantillas (no lo vamos a usar).</li> <li><code>store()</code> para guardar los datos que pasemos a la API.</li> <li><code>update()</code> para actualizar un dato ya existente en la BD.</li> <li><code>delete()</code> para eliminar un dato ya existente en la BD.</li> </ul> <p>(2) Como vamos a conectarnos a un modelo para traer la informaci\u00f3n de dicho modelo a\u00f1adimos mediante <code>use</code>. Tambi\u00e9n creamos la funci\u00f3n <code>index</code> para listar todos los elementos de la tabla (en este caso <code>productos</code>):</p> <pre><code>&lt;?php\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Producto; // &lt;-- esta linea\n\nclass ProductoController extends Controller\n{\n    public function index(){\n        return response()-&gt;json(Producto::all());\n    }\n}\n</code></pre> <p>Cuidado con el return</p> <p>Porque ahora no estamos devolviendo una vista sino un array de datos en formato JSON.</p> <p>(3) Crear un modelo en la carpeta <code>Models</code> de nombre <code>Producto.php</code>:</p> <pre><code>&lt;?php\n    namespace App\\Models;\n\n    use Illuminate\\Database\\Eloquent\\Model;\n\n    class Producto extends Model {\n        protected $fillable = ['nombre', 'descripcion', 'precio'];\n    }\n</code></pre> <p>(4) Ir a fichero <code>web.php</code> (en la carpeta <code>routes</code>) y colocar nuestras rutas:</p> <pre><code>// cargar el recurso del controlador ProductoController\nuse App\\Http\\Controllers\\ProductoController\n\n\nRoute::prefix('productos')-&gt;group(function(){\n  Route::get('/',[ProductoController::class, 'index']);\n});\n</code></pre> <p>La funci\u00f3n anterior <code>index</code> nos devuelve todos los productos. Pero, qu\u00e9 pasa si queremos un producto en cuesti\u00f3n:</p> <p>(1) En <code>ProductoController.php</code> a\u00f1adimos otra funci\u00f3n (show) en la que se le pasa por par\u00e1materos el <code>id</code> :</p> <pre><code>&lt;?php\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Producto; // &lt;-- esta linea\n\nclass ProductoController extends Controller\n{\n    public function index(){\n        return response()-&gt;json(Producto::all());\n    }\n    public function show($id){\n        return response()-&gt;json(Producto::find($id));\n    }\n}\n</code></pre> <p>(2) En <code>web.php</code> a\u00f1adimos otra ruta en nuestro grupo:</p> <pre><code>Route::prefix('productos')-&gt;group(function(){\n    Route::get('/',[ProductoController::class, 'index']);\n    Route::get('/{id}',[ProductoController::class, 'show']);\n});\n</code></pre> Resultado del m\u00e9todo show en el controlador ProductoController. <p>(3) Para introducir datos utilizaremos el m\u00e9todo <code>store</code>:</p> <p>\u200b   a) en <code>ProductoController.php</code>:</p> <pre><code>    public function store(Request $request){\n        $producto = Producto::create($request-&gt;all());\n        return response()-&gt;json($producto, 201);\n    }\n</code></pre> <p>\u200b   b) en <code>web.php</code>:</p> <pre><code>Route::prefix('productos')-&gt;group(function(){\n    Route::get('/',[ProductoController::class, 'index']);\n    Route::get('/{id}',[ProductoController::class, 'show']);\n    Route::post('/',[ProductoController::class, 'store']);\n});\n</code></pre> <p>(4) Para actualizar datos de un producto, utilizaremos el m\u00e9todo <code>update</code>:</p> <p>\u200b   a) en <code>ProductoController.php</code>:</p> <pre><code>    public function update(Request $request, $id){\n        $producto = Producto::findOrFail($id);\n        $producto -&gt; update($request-&gt;all());\n\n        return response()-&gt;json($producto, 200);\n    }\n</code></pre> <p>b) en <code>web.php</code>:</p> <pre><code>Route::prefix('productos')-&gt;group(function(){\n    Route::get('/',[ProductoController::class, 'index']);\n    Route::get('/{id}',[ProductoController::class, 'show']);\n    Route::post('/',[ProductoController::class, 'store']);\n    Route::put('/{id}',[ProductoController::class, 'update']);\n});\n</code></pre> <p>(5) Y para eliminar un producto, el m\u00e9todo <code>delete</code>:</p> <p>\u200b   a) en <code>ProductoController.php</code>:</p> <pre><code>    public function destroy($id){\n        Producto::findOrFail($id)-&gt;delete();\n\n        return response()-&gt;json(null, 204);\n    }\n</code></pre> <p>\u200b   b) en <code>web.php</code>:</p> <pre><code>Route::prefix('productos')-&gt;group(function(){\n    Route::get('/',[ProductoController::class, 'index']);\n    Route::get('/{id}',[ProductoController::class, 'show']);\n    Route::post('/',[ProductoController::class, 'store']);\n    Route::put('/{id}',[ProductoController::class, 'update']);\n    Route::delete('/{id}',[ProductoController::class, 'destroy']);\n});\n</code></pre>"},{"location":"ut11/ut11ac/#como-funciona-la-api-rest","title":"C\u00f3mo funciona la API REST","text":"<p>Para ello vamos a utilizar un software que es una extensi\u00f3n de Visual Studio Code, de nombre <code>Thunder Client</code>:</p> Extension Thunder Client en Visual Studio Code. Nueva consulta a la API desde la extensi\u00f3n Thunder Client."},{"location":"ut11/ut11ac/#listar-todos-los-productos","title":"Listar todos los productos","text":"Petici\u00f3n listar todos los elementos (m\u00e9todo index)."},{"location":"ut11/ut11ac/#listar-un-producto-en-concreto","title":"Listar un producto en concreto","text":"Petici\u00f3n listar un elemento (m\u00e9todo show)."},{"location":"ut11/ut11ac/#introducir-producto-nuevo","title":"Introducir producto nuevo","text":"<p>Si realizamos una nueva petici\u00f3n (new request) con m\u00e9todo <code>post</code> y pasando (desde <code>body</code> y en <code>json</code>) un nuevo producto, va a mostrarnos un error.  Esto se debe a que Laravel, por sus m\u00e9todos de seguridad, necesita un token llamado <code>csrf</code>.  Ya que, ahora mismo, estamos realizando pruebas, vamos a indicarle a Laravel que excluya la URL en cuesti\u00f3n de la verificaci\u00f3n. Para ello accedemos al fichero <code>VerifyCsrfToken.php</code> de la carpeta <code>app\\Http\\Middleware</code>: ```php &lt;?php namespace App\\Http\\Middleware; use Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as Middleware;</p> <p>class VerifyCsrfToken extends Middleware {     /*      * The URIs that should be excluded from CSRF verification.      *      * @var array /     protected $except = [         \"http://0.0.0.0:8000/productos\",  // &lt;-- esta excepci\u00f3n     ]; } <p>\u200b   </p> Petici\u00f3n insertar un elemento (m\u00e9todo create). Resultado final en la tabla (mediante phpMyAdmin)."},{"location":"ut11/ut11ac/#actualizar-un-producto-existente","title":"Actualizar un producto existente","text":"<p>Recuerda</p> <p>A\u00f1adir al fichero <code>VerifyCsrfToken.php</code> de la carpeta <code>app\\Http\\Middleware</code> la excepci\u00f3n:  <code>php &lt;?php     // [..]     protected $except = [         \"http://0.0.0.0:8000/productos\",          \"http://0.0.0.0:8000/productos/3\",  // &lt;-- esta nueva excepci\u00f3n         ];     }</code></p> Petici\u00f3n modificar un elemento (m\u00e9todo update). Resultado final en la tabla (mediante phpMyAdmin)."},{"location":"ut11/ut11ac/#eliminar-un-producto","title":"Eliminar un producto","text":"Petici\u00f3n eliminar un elemento (m\u00e9todo delete). Resultado final en la tabla (mediante phpMyAdmin)."},{"location":"ut11/ut11ac/#ejercicios-propuestos","title":"Ejercicios propuestos","text":""},{"location":"ut11/ut11ac/#ejercicio-1","title":"Ejercicio 1","text":"<p>Sobre el proyecto blog de la sesi\u00f3n anterior, vamos a a\u00f1adir estos cambios:</p> <ul> <li>Crea un controlador de tipo api llamado <code>PostController</code> en la carpeta <code>App\\Http\\Controllers\\Api</code>, asociado al modelo <code>Post</code> que ya tenemos de sesiones previas. Rellena los m\u00e9todos <code>index</code>, <code>show</code>, <code>store</code>, <code>update</code> y <code>destroy</code> para que, respectivamente, hagan lo siguiente:</li> <li><code>index</code> deber\u00e1 devolver en formato JSON el listado de todos los posts, con un c\u00f3digo 200</li> <li><code>show</code> deber\u00e1 devolver la informaci\u00f3n del post que recibe, con un c\u00f3digo 200</li> <li><code>store</code> deber\u00e1 insertar un nuevo post con los datos recibidos, con un c\u00f3digo 201, y utilizando el validador de posts que hiciste en la sesi\u00f3n 6. Para el usuario creador del post, p\u00e1sale como par\u00e1metro JSON un usuario cualquiera de la base de datos.</li> <li><code>update</code> deber\u00e1 modificar los campos del post recibidos, con un c\u00f3digo 200, y empleando tambi\u00e9n el validador de posts que hiciste en la sesi\u00f3n 6.</li> <li><code>destroy</code> deber\u00e1 eliminar el post recibido, devolviendo null con un c\u00f3digo 204</li> <li>Crea una colecci\u00f3n en Thunder Client llamada <code>Blog</code> que defina una petici\u00f3n para cada uno de los cinco servicios implementados. Comprueba que funcionan correctamente y exporta la colecci\u00f3n a un archivo.</li> </ul> <p>\u00bfQu\u00e9 entregar en estos ejercicios?</p> <p>Como entrega de esta sesi\u00f3n deber\u00e1s comprimir el proyecto blog con los cambios incorporados, y eliminando las carpetas <code>vendor</code> y <code>node_modules</code> como se explic\u00f3 en las sesiones anteriores. A\u00f1ade dentro tambi\u00e9n la colecci\u00f3n Thunder Client para probar los servicios. Renombra el archivo comprimido a <code>blog_11b.zip</code>.</p>"},{"location":"ut12/ut1201/","title":"UT 12. Autenticaci\u00f3n de usuarios","text":""},{"location":"ut12/ut1202/","title":"Ut1202","text":"<p>En esta sesi\u00f3n veremos c\u00f3mo incluir mecanismos de autenticaci\u00f3n en nuestros proyectos Laravel. Partiremos de la base de un proyecto ya creado (como el ejemplo de la biblioteca que venimos haciendo de sesiones anteriores) e incorporaremos paso a paso los elementos necesarios para autenticar usuarios.</p>"},{"location":"ut12/ut1202/#1-configuracion-general-de-la-autenticacion","title":"1. Configuraci\u00f3n general de la autenticaci\u00f3n","text":"<p>En el archivo <code>config/auth.php</code> se dispone de algunas opciones de configuraci\u00f3n generales de autenticaci\u00f3n. Esta autenticaci\u00f3n en Laravel se apoya en dos elementos: los guards y los providers.</p> <ul> <li>Los guards son mecanismos que definen c\u00f3mo se van a autenticar los usuarios para cada petici\u00f3n. El mecanismo m\u00e1s habitual es mediante sesiones, donde se guarda la informaci\u00f3n del usuario autenticado en la sesi\u00f3n, aunque por defecto tambi\u00e9n se habilita la autenticaci\u00f3n mediante tokens.</li> <li>Los providers indican c\u00f3mo se van a obtener los usuarios de la base de datos para comprobar la autenticaci\u00f3n. Las opciones habilitadas por defecto son mediante Eloquent (y el modelo de usuarios que tengamos definido), o mediante query builder, consultando directamente la tabla correspondiente de usuarios.</li> </ul> <p>Deberemos modificar en el archivo la referencia a la tabla donde almacenaremos los usuarios (por defecto se hace referencia a una tabla llamada <code>users</code>) y/o al modelo asociado (por defecto, la clase <code>User</code>). As\u00ed que convendr\u00e1 modificar los nombres de estos dos elementos en la secci\u00f3n <code>providers</code>, as\u00ed como la ubicaci\u00f3n (namespace) del modelo de usuario, si procede. Por ejemplo:</p> <pre><code>// ...\n\n'providers' =&gt; [\n    'users' =&gt; [\n        'driver' =&gt; 'eloquent',\n        'model' =&gt; App\\Models\\Usuario::class,\n    ],\n\n    // 'users' =&gt; [\n    //     'driver' =&gt; 'database',\n    //     'table' =&gt; 'usuarios',\n    // ],\n],\n</code></pre> <p>Notar que la secci\u00f3n <code>providers</code> dispone de dos proveedores de autenticaci\u00f3n: uno (el que est\u00e1 habilitado) est\u00e1 basado en Eloquent, y hace uso del modelo de usuarios que hayamos definido. El otro (que aparece comentado) no utiliza Eloquent, sino el query builder contra la propia base de datos. Si preferimos esta segunda opci\u00f3n, deberemos comentar la primera y dejar habilitada la segunda. Tambi\u00e9n es posible dejar habilitados m\u00faltiples providers, cada uno con un nombre diferente, y asignarlo a m\u00faltiples guards.</p>"},{"location":"ut12/ut1202/#11-el-modelo-o-la-tabla-de-usuarios","title":"1.1. El modelo o la tabla de usuarios","text":"<p>Si elegimos el provider basado en Eloquent, deberemos tener un modelo de usuarios al que acceder. En el caso de nuestra aplicaci\u00f3n de biblioteca (o el ejercicio del blog), disponemos ya de un modelo creado en <code>App\\Models\\Usuario</code>, por lo que el ejemplo anterior nos servir\u00eda para establecer este modelo como el modelo de usuarios por defecto.</p> <p>Si optamos por utilizar el query builder en lugar de Eloquent, deberemos tener una tabla en la base de datos donde est\u00e9n los datos de los usuarios. En nuestro caso, tambi\u00e9n disponemos de esa tabla usuarios, por lo que podr\u00edamos emplear esta otra opci\u00f3n para autenticar usuarios si quisi\u00e9ramos. No obstante, nos valdremos de Eloquent para la autenticaci\u00f3n.</p> <p>En cualquier caso, como veremos a continuaci\u00f3n, ser\u00e1 conveniente que los passwords de los usuarios est\u00e9n encriptados mediante bcrypt, que es el mecanismo de encriptaci\u00f3n por defecto que utiliza Laravel. Vamos a crear un nuevo seeder en nuestra aplicaci\u00f3n de biblioteca para crear un usuario con un login y password predefinidos. Llamamos al seeder <code>UsuariosSeeder</code>:</p> <pre><code>php artisan make:seeder UsuariosSeeder\n</code></pre> <p>En el m\u00e9todo <code>run</code> del nuevo seeder a\u00f1adiremos un nuevo usuario con login admin y password admin (encriptado usando bcrypt):</p> <pre><code>public function run()\n{\n  $usuario = new Usuario();\n  $usuario-&gt;login = 'admin';\n  $usuario-&gt;password = bcrypt('admin');\n  $usuario-&gt;save();\n}\n</code></pre> <p>Finalmente, cargamos este nuevo seeder en la base de datos, o bien con una migraci\u00f3n completa nueva (<code>php artisan migrate:fresh --seed</code>), o bien ejecutando s\u00f3lo el seeder con esto:</p> <pre><code>php artisan db:seed --class=UsuariosSeeder\n</code></pre>"},{"location":"ut12/ut1202/#2-anadir-autenticacion-a-un-proyecto","title":"2. A\u00f1adir autenticaci\u00f3n a un proyecto","text":"<p>Para a\u00f1adir autenticaci\u00f3n a un proyecto Laravel ya existente que no disponga de estos mecanismos, seguiremos estos pasos:</p> <ol> <li>Definiremos un formulario de login.</li> <li>Definiremos un nuevo controlador que se encargue de gestionar el login: tanto de mostrar el formulario cuando el usuario no est\u00e9 autenticado como de validar sus credenciales cuando las env\u00ede.</li> <li>A\u00f1adiremos las rutas pertinentes en el archivo <code>routes/web.php</code> tanto para el formulario de login como para la autenticaci\u00f3n posterior.</li> <li>Protegeremos las rutas que sean de acceso restringido.</li> <li>Opcionalmente, podemos a\u00f1adir tambi\u00e9n una opci\u00f3n de logout.</li> </ol>"},{"location":"ut12/ut1202/#21-el-formulario-de-login","title":"2.1. El formulario de login","text":"<p>Vamos a definir un formulario de login en la vista <code>resources/views/auth/login.blade.php</code>, para que el usuario especifique su login y su password. Tambi\u00e9n dejaremos una zona para mostrar un posible mensaje de error si la autenticaci\u00f3n no ha sido exitosa:</p> <pre><code>@extends('plantilla')\n\n@section('titulo', 'Login')\n\n@section('contenido')\n\n  &lt;h1&gt;Login&lt;/h1&gt;\n\n  @if (!empty($error))\n  &lt;div class=\"text-danger\"&gt;\n     {{ $error }}\n  &lt;/div&gt;\n  @endif\n\n  &lt;form action=\"{{ route('login') }}\" method=\"POST\"&gt;\n     @csrf\n\n     &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"login\"&gt;Login:&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" \n               name=\"login\" id=\"login\" /&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n        &lt;input type=\"password\" class=\"form-control\" \n               name=\"password\" id=\"password\" /&gt;\n      &lt;/div&gt;\n\n      &lt;input type=\"submit\" class=\"btn btn-dark btn-block\" \n             name=\"enviar\" value=\"Enviar\" /&gt;\n\n  &lt;/form&gt;\n\n@endsection\n</code></pre>"},{"location":"ut12/ut1202/#22-el-controlador-de-login","title":"2.2. El controlador de login","text":"<p>Crearemos un nuevo controlador que se encargue de gestionar toda la autenticaci\u00f3n:</p> <pre><code>php artisan make:controller LoginController\n</code></pre> <p>Dentro, definimos una funci\u00f3n que se encargar\u00e1 de mostrar el formulario anterior:</p> <pre><code>public function loginForm()\n{\n  return view('auth.login');\n}\n</code></pre> <p>Y a\u00f1adiremos una segunda funci\u00f3n que se encargue de validar las credenciales enviadas por el usuario. Para esto, haremos uso del facade de autenticaci\u00f3n, existente en <code>Illuminate\\Support\\Facades\\Auth</code>. Recuerda de sesiones previas que un facade es b\u00e1sicamente un elemento que proporciona acceso a una serie de m\u00e9todos est\u00e1ticos de utilidad, en este caso para autenticar usuarios.</p> <pre><code>namespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass LoginController extends Controller\n{\n  // ...\n\n  public function login(Request $request)\n  {\n     $credenciales = $request-&gt;only('login', 'password');\n\n     if (Auth::attempt($credenciales)) \n     {\n        // Autenticaci\u00f3n exitosa\n        return redirect()-&gt;intended(route('libros.index'));\n     } else {\n        $error = 'Usuario incorrecto';\n        return view('auth.login', compact('error'));\n     }\n  }\n}\n</code></pre> <p>El m\u00e9todo <code>attempt</code> acepta una serie de pares clave-valor como primer par\u00e1metro. En este caso, le pasamos un s\u00f3lo par formado por el login (o el e-mail, dependiendo del campo que usemos para autenticar) y el password recibidos en la petici\u00f3n. Esto servir\u00e1 para localizar al usuario por la clave (login), y comprobar si tiene el valor asociado (el password). En el caso de los passwords, Laravel autom\u00e1ticamente los encripta en formato bcrypt, por lo que debemos cerciorarnos de que el password est\u00e1 encriptado en ese formato en la base de datos.</p> <p>Por otra parte, el m\u00e9todo <code>intended</code> trata de enviar al usuario a la ruta a la que intentaba acceder antes de que se le solicitara autenticaci\u00f3n. Le pasamos como par\u00e1metro una ruta por defecto en el caso de que el destino previsto no est\u00e9 disponible.</p>"},{"location":"ut12/ut1202/#23-las-rutas-asociadas","title":"2.3. Las rutas asociadas","text":"<p>Finalmente, debemos definir las rutas tanto para mostrar el formulario (por get) como para recoger las credenciales y validar al usuario (por post).</p> <pre><code>Route::get('login', [LoginController::class, 'loginForm'])-&gt;name('login');\nRoute::post('login', [LoginController::class, 'login']);\n</code></pre>"},{"location":"ut12/ut1202/#redireccion-en-caso-de-error","title":"Redirecci\u00f3n en caso de error","text":"<p>Cuando se detecta que un usuario no autenticado intenta acceder a una ruta protegida, autom\u00e1ticamente se le redirige a la ruta nombrada como login (como la que hemos definido previamente), donde ver\u00e1 el formulario de acceso. Si queremos cambiar el nombre de la ruta a la que redirigir (en el caso de que no queramos que sea login), debemos modificar el m\u00e9todo <code>redirectTo</code> en el middleware de autenticaci\u00f3n <code>app/Http/Middleware/Authenticate.php</code>:</p> <pre><code>protected function redirectTo($request)\n{\n  // ...\n  return route('login');\n}\n</code></pre>"},{"location":"ut12/ut1202/#24-proteger-las-rutas-de-acceso-restringido","title":"2.4. Proteger las rutas de acceso restringido","text":"<p>Ahora que ya tenemos definido el mecanismo de login (controlador con m\u00e9todo de autenticaci\u00f3n, formulario de login y ruta asociada), podemos proteger aquellas rutas o enlaces que queramos que sean de acceso restringido. Por ejemplo, podemos hacer que las operaciones de creaci\u00f3n, borrado y edici\u00f3n de libros (funciones <code>create</code>, <code>store</code>, <code>edit</code>, <code>update</code> y <code>destroy</code>) s\u00f3lo est\u00e9n disponibles para usuarios autenticados. Esto puede hacerse de varias formas.</p> <ul> <li>Si tenemos una ruta de recursos (<code>Route::resource</code>) en el archivo <code>routes/web.php</code>, entonces la opci\u00f3n m\u00e1s c\u00f3moda es definir un constructor en el controlador asociado (en este caso, <code>LibroController</code>), y especificar qu\u00e9 funciones queremos proteger, bien con <code>only</code> o con <code>except</code> (en este \u00faltimo caso, se proteger\u00e1n todas las rutas salvo las indicadas en la lista):</li> </ul> <pre><code>class LibroController extends Controller\n{\n  public function __construct()\n  {\n     $this-&gt;middleware('auth', \n        ['only' =&gt; ['create', 'store', 'edit', 'update', 'destroy']]);\n }\n\n  // ...\n</code></pre> <ul> <li>Si definimos las rutas sueltas, podemos emplear el m\u00e9todo <code>middleware</code> para indicar en cada una si queremos que se aplique el middleware de autenticaci\u00f3n:</li> </ul> <pre><code>Route::get('prueba', [PruebaController::class, 'create'])-&gt;middleware('auth');\n</code></pre>"},{"location":"ut12/ut1202/#25-detectar-en-las-vistas-al-usuario-autenticado","title":"2.5. Detectar en las vistas al usuario autenticado","text":"<p>Puede ser muy necesario detectar en una vista si el usuario se ha autenticado o no, bien para mostrar ciertos controles (por ejemplo, enlaces para crear libros), o para cargar informaci\u00f3n propia del usuario (por ejemplo, posts creados por el usuario que ha entrado en un blog).</p> <p>Por ejemplo, de este modo podemos modificar el men\u00fa de navegaci\u00f3n (<code>resources/views/partials/nav.blade.php</code>) para que muestre el enlace de crear nuevo libro s\u00f3lo si el usuario se ha autenticado:</p> <pre><code>@if(auth()-&gt;check())\n  &lt;li class=\"{{ setActivo('libros.create') }} nav-item\"&gt;\n      &lt;a class=\"nav-link\" href=\"{{ route('libros.create') }}\"&gt;Nuevo libro&lt;/a&gt;\n  &lt;/li&gt;\n@endif\n</code></pre> <p>Podemos emplear el m\u00e9todo <code>auth()-&gt;guest()</code> si queremos comprobar si el usuario a\u00fan NO se ha autenticado (por ejemplo, para mostrarle el enlace a login), y el m\u00e9todo <code>auth()-&gt;check()</code> para comprobar si S\u00cd est\u00e1 autenticado (para mostrarle, por ejemplo, las opciones restringidas). De forma an\u00e1loga, el m\u00e9todo <code>auth()-&gt;user()</code> obtiene el objeto del usuario autenticado, con lo que podemos acceder a sus atributos:</p> <pre><code>Bienvenido/a {{ auth()-&gt;user()-&gt;login }}\n</code></pre>"},{"location":"ut12/ut1202/#26-implementacion-del-logout","title":"2.6. Implementaci\u00f3n del logout","text":"<p>Para implementar el logout, basta con llamar al m\u00e9todo <code>logout</code> del facade <code>Auth</code> utilizado anteriormente, en el m\u00e9todo que se vaya a encargar de esa tarea. Lo podemos a\u00f1adir en el mismo controlador anterior:</p> <pre><code>namespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass LoginController extends Controller\n{\n  // ...\n\n  public function logout()\n  {\n     Auth::logout();\n     // ... renderizar la vista deseada\n  }\n</code></pre> <p>Tambi\u00e9n har\u00e1 falta definir la ruta asociada en <code>routes/web.php</code>:</p> <pre><code>Route::get('logout', [LoginController::class, 'logout'])-&gt;name('logout');\n</code></pre> <p>Obviamente, tambi\u00e9n ser\u00e1 necesario a\u00f1adir un enlace para hacer logout en alguna parte. Podemos ponerlo en el men\u00fa de navegaci\u00f3n (archivo <code>resources/views/partials/nav.blade.php</code>, cuando detectemos que el usuario est\u00e1 autenticado):</p> <pre><code>@if(auth()-&gt;check())\n  &lt;li class=\"{{ setActivo('libros.create') }} nav-item\"&gt;\n     &lt;a class=\"nav-link\" href=\"{{ route('libros.create') }}\"&gt;Nuevo libro&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li class=\"nav-item\"&gt;\n     &lt;a class=\"nav-link\" href=\"{{ route('logout') }}\"&gt;Logout&lt;/a&gt;\n  &lt;/li&gt;\n@endif\n</code></pre>"},{"location":"ut12/ut1202/#3-definir-roles-uso-de-middleware","title":"3. Definir roles. Uso de middleware","text":"<p>Para poder definir roles para los distintos usuarios de nuestra aplicaci\u00f3n, obviamente debemos comenzar por definir un nuevo campo en la tabla de usuarios para almacenar dicho rol. Deberemos crear la migraci\u00f3n correspondiente y lanzarla.</p> <p>Despu\u00e9s, para proteger ciertas rutas en funci\u00f3n de los roles, podemos ocultar el enlace en las vistas con una simple comprobaci\u00f3n. Por ejemplo, asumiendo que el campo de los roles se llama <code>rol</code>:</p> <pre><code>@if (auth()-&gt;user()-&gt;rol === 'admin')\n  // mostrar contenido\n@endif\n</code></pre> <p>Sin embargo, si accedemos a la URL sin pasar por el enlace, podremos ver el contenido. Debemos nuevamente incorporar el middleware <code>auth</code> al controlador que corresponda (si no lo est\u00e1 ya), para proteger el acceso general para usuarios autenticados.</p> <p>Adem\u00e1s, debemos definir un middleware propio que verifique el rol del usuario logueado. Podemos crearlo con este comando:</p> <pre><code>php artisan make:middleware RolCheck\n</code></pre> <p>En este caso hemos llamado al middleware <code>RolCheck</code>, pero el nombre puede ser el que queramos. Este middleware se crear\u00e1 en la carpeta <code>App\\Http\\Middleware</code>. Debemos editar su m\u00e9todo <code>handle</code> para verificar que los usuarios son de tipo \u201cadmin\u201d:</p> <pre><code>public function handle($request, Closure $next, $rol)\n{\n  if (auth()-&gt;user()-&gt;rol === $rol)\n     return $next($request);\n  else\n     return redirect('/');\n}\n</code></pre> <p>Tras definir el middleware, lo registramos en el archivo <code>App/Http/Kernel.php</code> (en el apartado de routeMiddleware):</p> <pre><code>protected $routeMiddleware = [\n  // ...\n  'roles' =&gt; \\App\\Http\\Middleware\\RolCheck::class\n</code></pre> <p>Finalmente, lo cargamos en el constructor de nuestro controlador. Podemos incluir con <code>except</code> y <code>only</code> restricciones sobre qu\u00e9 m\u00e9todos del controlador se ver\u00e1n afectados o no por el middleware.</p> <pre><code>public function __construct()\n{\n  $this-&gt;middleware(['auth', 'roles:admin']);\n}\n</code></pre> <p>En este ejemplo, hemos mapeado el middleware con el alias roles en el archivo <code>Kernel.php</code>, y lo que hay tras los dos puntos es el par\u00e1metro extra que tiene el m\u00e9todo <code>handle</code> del middleware (el rol a comprobar).</p>"},{"location":"ut12/ut1202/#31-middleware-con-mas-de-un-parametro","title":"3.1. Middleware con m\u00e1s de un par\u00e1metro","text":"<p>En el caso de querer poder definir m\u00e1s de un rol en nuestro m\u00e9todo del middleware, necesitamos definir la funci\u00f3n con un n\u00famero de par\u00e1metros variable, de este modo:</p> <pre><code>public function handle($request, Closure $next, ...$roles)\n{\n  if (in_array(auth()-&gt;user()-&gt;rol, $roles))\n     return $next($request);\n  else\n     return redirect('/');\n}\n</code></pre> <p>Notar que, en este caso, lo que obtenemos en el par\u00e1metro <code>$roles</code> es un array, y debemos comprobar si el rol del usuario es uno de los que hay en el array. Ahora podemos cargar un middleware basado en m\u00faltiples roles, separados por comas, o incluso varios middleware para funciones diferentes, en el constructor.</p> <p>Por ejemplo, este constructor permitir\u00eda listar (index) a usuarios con rol editor, y permitir\u00eda ver la ficha (show) a editores y administradores.</p> <pre><code>public function __construct()\n{\n  $this-&gt;middleware(['auth', 'roles:editor'], ['only' =&gt; ['index']]);\n  $this-&gt;middleware(['auth', 'roles:editor,admin'], ['only' =&gt; ['show']]);\n}\n</code></pre>"},{"location":"ut12/ut1202/#32-sobre-el-concepto-de-middleware","title":"3.2. Sobre el concepto de middleware","text":"<p>Hemos comentado brevemente el concepto de middleware asociado tanto al mecanismo de autenticaci\u00f3n como a la clase \u201cextra\u201d que podemos crear para comprobar roles. En general, un middleware es un fragmento de c\u00f3digo (normalmente una funci\u00f3n) que se ejecuta en medio de un proceso. En este caso, se ejecuta desde que se recibe la petici\u00f3n hasta que se emite la respuesta, y permite alterar ese flujo normal, haciendo ciertas comprobaciones sobre la petici\u00f3n. Por ejemplo, como es el caso, verificar que el usuario tiene los permisos adecuados antes de emitir una respuesta u otra.</p>"},{"location":"ut12/ut1202/#4-mas-informacion","title":"4. M\u00e1s informaci\u00f3n","text":"<p>Los mecanismos de autenticaci\u00f3n de Laravel son muy variados y flexibles. Aqu\u00ed hemos pretendido ofrecer s\u00f3lo una parte, quiz\u00e1 la m\u00e1s habitual o est\u00e1ndar. Para m\u00e1s informaci\u00f3n, pod\u00e9is consultar la documentaci\u00f3n oficial:</p> <ul> <li>Autenticaci\u00f3n con Laravel</li> <li>Uso de middleware</li> </ul> Ejercicios a realizar <ul> <li><code>Ejercicio 1</code>.</li> <li><code>Ejercicio 2</code>.</li> </ul>"},{"location":"ut12/ut1203/","title":"Ut1203","text":"<p>En una API REST tambi\u00e9n puede ser necesario proteger ciertos servicios, de forma que s\u00f3lo puedan acceder a ellos los usuarios autenticados. Sin embargo, en este caso no tenemos disponible el mecanismo de autenticaci\u00f3n basado en sesiones que vimos antes, ya que la parte cliente que consulta la API REST no tiene por qu\u00e9 estar basada en un navegador. Podr\u00edamos acceder desde una aplicaci\u00f3n de escritorio hecha en Java, por ejemplo, o desde una aplicaci\u00f3n m\u00f3vil, y en estos casos no podr\u00edamos disponer de las sesiones, propias de clientes web o navegadores. En su lugar, emplearemos un mecanismo de autenticaci\u00f3n basado en tokens.</p>"},{"location":"ut12/ut1203/#1-fundamentos-de-la-autenticacion-basada-en-tokens","title":"1. Fundamentos de la autenticaci\u00f3n basada en tokens","text":"<p>La autenticaci\u00f3n basada en tokens es un mecanismo de validaci\u00f3n de usuarios en aplicaciones cliente-servidor que podr\u00edamos decir que es m\u00e1s universal que la autenticaci\u00f3n basada en sesiones, ya que permite autenticar usuarios provenientes de distintos tipos de clientes. Lo que se hace es lo siguiente:</p> <ul> <li>El usuario necesita enviar sus credenciales (login y password), de forma similar a como se hace en una aplicaci\u00f3n web normal, aunque esta vez los datos se env\u00edan normalmente en formato JSON.</li> <li>El servidor valida esas credenciales y, si son correctas, genera una cadena de texto llamada token, de una cierta longitud, y que servir\u00e1 para identificar un\u00edvocamente al usuario a partir de ese momento. Dicho token debe ser enviado de vuelta (tambi\u00e9n en formato JSON) al cliente que se valid\u00f3</li> <li>A partir de este punto, el cliente debe adjuntar el token como parte de la informaci\u00f3n en cada petici\u00f3n que realiza a una zona de acceso restringido, de forma que el servidor pueda consultar el token y comprobar si corresponde con el de alg\u00fan usuario autorizado. Este token normalmente se env\u00eda en una cabecera de la petici\u00f3n llamada Authorization, como veremos despu\u00e9s, y el servidor puede consultar el valor de dicha cabecera para verificar el acceso del cliente.</li> </ul>"},{"location":"ut12/ut1203/#2-alternativas-para-la-implementacion-de-la-autenticacion-basada-en-tokens","title":"2. Alternativas para la implementaci\u00f3n de la autenticaci\u00f3n basada en tokens","text":"<p>Podemos emplear distintas alternativas para la autenticaci\u00f3n basada en tokens bajo Laravel. Comentaremos en esta sesi\u00f3n dos de ellas.</p> <ul> <li>Por un lado, podemos emplear el mecanismo nativo de Laravel para autenticaci\u00f3n basada en tokens. Como ventajas principales, no se necesita instalar ninguna dependencia adicional, y es relativamente sencillo de utilizar. Como inconvenientes, requiere a\u00f1adir un campo m\u00e1s a la tabla de usuarios, para almacenar el token generado para cada usuario, y requiere tambi\u00e9n de una gesti\u00f3n manual del token, aunque es sencilla.</li> <li>Por otro lado podemos valernos de la librer\u00eda Laravel Sanctum, que proporciona mecanismos de autenticaci\u00f3n para APIs y para SPAs (Single Page Applications, aplicaciones de p\u00e1gina \u00fanica). Entre sus ventajas podemos destacar que es sencilla de integrar en la aplicaci\u00f3n y automatiza algunos aspectos de la gesti\u00f3n de tokens, adem\u00e1s de contar con el soporte oficial de Laravel. Como inconvenientes, es una librer\u00eda m\u00e1s intrusiva que la anterior, ya que requiere crear una tabla adicional donde almacenar los tokens.</li> </ul> <p>En los siguientes apartados veremos c\u00f3mo proteger mediante tokens un proyecto sencillo en Laravel empleando cada uno de estos mecanismos. Como ejercicio de este apartado se pide que elij\u00e1is cualquiera de ellos y sig\u00e1is paso a paso el ejemplo para configurar la protecci\u00f3n mediante tokens en \u00e9l.</p>"},{"location":"ut12/ut1203/#21-preparando-el-ejemplo-base","title":"2.1. Preparando el ejemplo base","text":"<p>Partiremos de un mismo proyecto base, que luego adaptaremos en funci\u00f3n del mecanismo de autenticaci\u00f3n elegido. Comenzaremos creando un proyecto llamado <code>pruebaToken</code>, en nuestra carpeta de proyectos:</p> <pre><code>laravel new pruebaToken\n</code></pre> <p>Despu\u00e9s, eliminaremos las migraciones que no vamos a utilizar de la carpeta <code>database/migrations</code>: en concreto, eliminaremos los archivos sobre create_password_resets_table y create_failed_jobs_table, y dejaremos el resto. Sobre la migraci\u00f3n de usuarios, editaremos los m\u00e9todos <code>up</code> y <code>down</code> para dejar s\u00f3lo los campos que nos interesen, y renombrar la tabla a usuarios, de este modo:</p> <pre><code>public function up()\n{\n    Schema::create('usuarios', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('login')-&gt;unique;\n        $table-&gt;string('password');\n        $table-&gt;timestamps();\n    });\n}\n...\npublic function down()\n{\n    Schema::dropIfExists('usuarios');\n}\n</code></pre> <p>A continuaci\u00f3n, renombramos el modelo <code>App\\Models\\User.php</code> a <code>App\\Models\\Usuario.php</code>, cambiando tambi\u00e9n el nombre de la clase interior:</p> <pre><code>class Usuario extends Authenticatable\n{\n    ...\n</code></pre> <p>Y hacemos lo mismo con el factory y el seeder correspondiente (modificamos directamente el <code>DatabaseSeeder</code> para no crear un seeder espec\u00edfico, en este caso):</p> <pre><code>namespace Database\\Factories;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\n/**\n * @extends \\Illuminate\\Database\\Eloquent\\Factories\\Factory&lt;\\App\\Models\\Usuario&gt;\n */ \nclass UsuarioFactory extends Factory\n{\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'login' =&gt; $this-&gt;faker-&gt;word,\n            'password' =&gt; bcrypt('1234')\n        ];\n    }\n}\nclass DatabaseSeeder extends Seeder\n{\n    /**\n     * Seed the application's database.\n     *\n     * @return void\n     */\n    public function run()\n    {\n         \\App\\Models\\Usuario::factory(2)-&gt;create();\n    }\n}\n</code></pre> <p>Vamos a modificar tambi\u00e9n el archivo <code>.env</code> del proyecto para acceder a una base de datos llamada <code>pruebaToken</code>, que deberemos crear a trav\u00e9s de phpMyAdmin:</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=pruebaToken\nDB_USERNAME=root\nDB_PASSWORD=\n</code></pre> <p>Necesitamos tambi\u00e9n editar el archivo <code>App\\Http\\Middleware\\Authenticate.php</code> para indicar en el m\u00e9todo <code>redirectTo</code> que s\u00f3lo queremos redirigir al formulario de login cuando la petici\u00f3n no espere una respuesta en formato JSON. En caso contrario, no hay que mostrar dicho formulario, sino enviar una respuesta JSON adecuada. De hecho, si la aplicaci\u00f3n s\u00f3lo va a tener servicios REST podr\u00edamos eliminar o dejar comentado el c\u00f3digo de este m\u00e9todo para que no trate de redirigir a ning\u00fan formulario.</p> <pre><code>class Authenticate extends Middleware\n{\n    protected function redirectTo($request)\n    {\n        /*\n        if (! $request-&gt;expectsJson()) {\n            return route('login');\n        }\n        */\n    }\n}\n</code></pre> <p>Por otra parte, debemos editar el archivo <code>App\\Exceptions\\Handler.php</code>, en concreto su m\u00e9todo <code>register</code> para definir los diferentes errores que pueden producirse y los mensajes que hay que devolver en cada caso:</p> <pre><code>use Illuminate\\Auth\\AuthenticationException;\nuse Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\nuse Illuminate\\Database\\Eloquent\\ModelNotFoundException;\nuse Illuminate\\Validation\\ValidationException;\nuse Throwable;\n\nclass Handler extends ExceptionHandler\n{\n    ...\n    public function register()\n    {\n        $this-&gt;renderable(function (Throwable $exception) {\n            if (request()-&gt;is('api*'))\n            {\n                if ($exception instanceof ModelNotFoundException)\n                    return response()-&gt;json(\n                        ['error' =&gt; 'Elemento no encontrado'], 404);\n                else if ($exception instanceof AuthenticationException)\n                    return response()-&gt;json(\n                        ['error' =&gt; 'Usuario no autenticado'], 401);\n                else if ($exception instanceof ValidationException)\n                    return response()-&gt;json(\n                        ['error' =&gt; 'Datos no v\u00e1lidos'], 400);\n                else if (isset($exception))\n                    return response()-&gt;json(\n                        ['error' =&gt; 'Error en la aplicaci\u00f3n (' .\n                        get_class($exception) . '):' . \n                        $exception-&gt;getMessage()], 500);\n            }\n        });\n    }\n}\n</code></pre> <p>Finalmente, vamos a definir un controlador de API con una serie de m\u00e9todos de prueba. No lo vamos a vincular a ning\u00fan modelo, porque generaremos unos datos a mano en cada m\u00e9todo para simplificar el c\u00f3digo. Escribimos este comando:</p> <pre><code>php artisan make:controller Api/PruebaController --api\n</code></pre> <p>Rellenamos el c\u00f3digo de los m\u00e9todos del controlador con alguna respuesta sencilla para cada caso:</p> <pre><code>class PruebaController extends Controller\n{\n    public function index()\n    {\n        return response()-&gt;json(['mensaje' =&gt; 'Accediendo a index']);\n    }\n\n    public function store(Request $request)\n    {\n        return response()-&gt;json(['mensaje' =&gt; 'Insertando'], 201);\n    }\n\n    public function show($id)\n    {\n        return response()-&gt;json(['mensaje' =&gt; 'Ficha de ' . $id]);\n    }\n\n    public function update(Request $request, $id)\n    {\n        return response()-&gt;json(['mensaje' =&gt; 'Actualizando elemento']);\n    }\n\n    public function destroy($id)\n    {\n        return response()-&gt;json(['mensaje' =&gt; 'Borrando elemento']);\n    }\n}\n</code></pre> <p>Y a\u00f1adimos las rutas correspondientes en el archivo <code>routes/api.php</code>:</p> <pre><code>Route::apiResource('prueba', PruebaController::class);\n</code></pre> <p>A partir de este punto, vamos a proteger el acceso a alguno de estos m\u00e9todos. Escoge uno de los siguientes apartados (3 o 4) para definir el mecanismo de autenticaci\u00f3n basado en tokens correspondiente. Tambi\u00e9n puedes intentar hacerlos todos; en este caso, copia y pega otra vez el proyecto Laravel, para trabajar por separado en cada carpeta con un mecanismo diferente.</p>"},{"location":"ut12/ut1203/#3-autenticacion-basada-en-tokens-nativa","title":"3. Autenticaci\u00f3n basada en tokens nativa","text":"<p>Vamos a emplear en esta secci\u00f3n la autenticaci\u00f3n nativa por tokens que ofrece Laravel. Los pasos a seguir los indicamos a continuaci\u00f3n.</p>"},{"location":"ut12/ut1203/#31-configuracion-basica","title":"3.1. Configuraci\u00f3n b\u00e1sica","text":"<p>En primer lugar, modificamos la migraci\u00f3n de la tabla de usuarios para a\u00f1adir un nuevo campo donde almacenar el token. Dicho campo basta con que tenga 60 caracteres de longitud, y ser\u00e1 necesario tambi\u00e9n que sea \u00fanico para cada usuario:</p> <pre><code>public function up()\n{\n    Schema::create('usuarios', function (Blueprint $table) {\n        $table-&gt;id();\n        $table-&gt;string('login')-&gt;unique;\n        $table-&gt;string('password');\n        $table-&gt;string('api_token', 60)-&gt;unique()-&gt;nullable();\n        $table-&gt;timestamps();\n    });\n}\n</code></pre> <p>Podemos lanzar ya la migraci\u00f3n para que se cree la tabla y se rellene con los usuarios que hayamos indicado en el seeder.</p> <pre><code>php artisan migrate:fresh --seed\n</code></pre> <p>Tambi\u00e9n debemos modificar el archivo <code>config/auth.php</code> para indicar cu\u00e1l es el modelo de usuarios que vamos a utilizar:</p> <pre><code>'providers' =&gt; [\n    'users' =&gt; [\n        'driver' =&gt; 'eloquent',\n        'model' =&gt; App\\Models\\Usuario::class,\n    ],\n</code></pre> <p>En este mismo fichero, tambi\u00e9n podemos modificar el guard por defecto, que es web, para que sea api, si nuestra aplicaci\u00f3n no va a tener autenticaci\u00f3n web:</p> <pre><code>'defaults' =&gt; [\n    'guard' =&gt; 'api',\n    ...\n],\n</code></pre> <p>En la secci\u00f3n de <code>guards</code>, a\u00f1adimos el nuevo guard <code>api</code>, si no est\u00e1 ya definido:</p> <pre><code>'guards' =&gt; [\n    'web' =&gt; [\n        ... \n    ],\n    'api' =&gt; [\n        'driver' =&gt; 'token',\n        'provider' =&gt; 'users'\n    ]\n]\n</code></pre>"},{"location":"ut12/ut1203/#32-proteccion-de-rutas","title":"3.2. Protecci\u00f3n de rutas","text":"<p>Para proteger las rutas de acceso restringido, primero crearemos un controlador que se encargue de validar las credenciales del usuario:</p> <pre><code>php artisan make:controller Api/LoginController\n</code></pre> <p>Definimos un m\u00e9todo <code>login</code>, por ejemplo, que validar\u00e1 las credenciales que le lleguen (login y password). Si son correctas, generar\u00e1 una cadena de texto aleatoria de 60 caracteres y la almacenar\u00e1 en el campo <code>api_token</code> del usuario validado. Tambi\u00e9n devolver\u00e1 dicho token como respuesta en formato JSON. En caso de que haya un error en la autenticaci\u00f3n, enviar\u00e1 de vuelta un mensaje de error, con el c\u00f3digo 401 de acceso no autorizado.</p> <pre><code>use App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Models\\Usuario;\n\nclass LoginController extends Controller\n{\n    public function login(Request $request)\n    {\n        $usuario = Usuario::where('login', $request-&gt;login)-&gt;first();\n\n        if (!$usuario || \n            !Hash::check($request-&gt;password, $usuario-&gt;password))\n        {\n            return response()-&gt;json(\n                ['error' =&gt; 'Credenciales no v\u00e1lidas'], 401);\n        }\n        else\n        {\n            $usuario-&gt;api_token = Str::random(60);\n            $usuario-&gt;save();\n            return response()-&gt;json(['token' =&gt; $usuario-&gt;api_token]);\n        }\n    }\n}\n</code></pre> <p>Definimos en el archivo <code>routes/api.php</code> una ruta que redirija a este m\u00e9todo, para cuando el usuario quiera autenticarse (recuerda a\u00f1adir con <code>use</code> la correspondiente clase):</p> <pre><code>Route::post('login', [LoginController::class, 'login']);\n</code></pre> <p>Tambi\u00e9n podemos eliminar en este caso la ruta predefinida de este archivo:</p> <pre><code>// Eliminar esta ruta:\nRoute::middleware('auth:sanctum')-&gt;get('/user', function (Request $request) {\n    return $request-&gt;user();\n});\n</code></pre> <p>Para proteger las rutas que necesitemos en los controladores API, las especificamos en el constructor del controlador. Por ejemplo, as\u00ed proteger\u00edamos todas las rutas de nuestro controlador <code>PruebaController</code>, salvo <code>index</code> y <code>show</code>:</p> <pre><code>class PruebaController extends Controller\n{\n    public function __construct()\n    {\n        $this-&gt;middleware('auth:api',\n            ['except' =&gt; ['index', 'show']]);\n    }\n    ...\n</code></pre> <p>Alternativamente, tambi\u00e9n podemos emplear el modificador <code>only</code> en lugar de <code>except</code> para indicar las rutas concretas que queremos proteger.</p> <p>Con esto ya tenemos el mecanismo de autenticaci\u00f3n por token establecido, y las rutas protegidas. Echa un vistazo al apartado 5 para ver c\u00f3mo probarlo todo desde Thunder Client o Postman.</p>"},{"location":"ut12/ut1203/#4-autenticacion-basada-en-tokens-usando-laravel-sanctum","title":"4. Autenticaci\u00f3n basada en tokens usando Laravel Sanctum","text":"<p>Como hemos comentado anteriormente, Laravel Sanctum es una librer\u00eda que proporciona mecanismos de autenticaci\u00f3n para SPAs (Single Page Applications, aplicaciones de p\u00e1gina \u00fanica), y APIs. En nuestro caso, la emplearemos para autenticarnos mediante tokens en nuestras APIs. Los pasos a seguir para la configuraci\u00f3n son los siguientes\u2026</p>"},{"location":"ut12/ut1203/#41-configuracion-de-sanctum","title":"4.1. Configuraci\u00f3n de Sanctum","text":"<p>En primer lugar, debemos incorporar Laravel Sanctum a nuestro proyecto. En las \u00faltimas versiones de Laravel aparece incorporado por defecto (lo podemos comprobar en el archivo <code>composer.json</code>, en la secci\u00f3n de require). Si no es as\u00ed, podemos instalarlo escribiendo este comando desde la ra\u00edz del proyecto:</p> <pre><code>composer require laravel/sanctum\n</code></pre> <p>Si nos diera alg\u00fan problema de incompatibilidad con la versi\u00f3n de proyecto que tengamos, podemos probar a ejecutar <code>composer require laravel/sanctum:*</code> para solucionarlo, e instalar la \u00faltima versi\u00f3n compatible.</p> <p>Despu\u00e9s, debemos publicar la configuraci\u00f3n de Sanctum y su fichero de migraci\u00f3n, que generar\u00e1 una tabla adicional donde almacenar los tokens. Escribimos el siguiente comando (todo en una l\u00ednea, aunque aqu\u00ed se divide en dos para poderlo ver completo):</p> <pre><code>php artisan vendor:publish \n--provider=\"Laravel\\Sanctum\\SanctumServiceProvider\"\n</code></pre> <p>Al finalizar este paso, tendremos la migraci\u00f3n creada y un archivo de configuraci\u00f3n <code>config/sanctum.php</code> disponible, para editar la configuraci\u00f3n por defecto de la librer\u00eda. Por ejemplo, podemos editarlo para especificar el tiempo de vida (TTL) de los tokens. El siguiente ejemplo establece un tiempo de vida de 5 minutos, por ejemplo, aunque en el caso de aplicaciones basadas en tokens es habitual dejar tiempos mucho mayores (o indefinidos, seg\u00fan el caso, dejando esta propiedad a <code>null</code>):</p> <pre><code>'expiration' =&gt; 5,\n</code></pre> <p>Despu\u00e9s, debemos lanzar la migraci\u00f3n que se ha creado, junto con las que tengamos pendientes (la de la tabla de usuarios, por ejemplo). Se a\u00f1adir\u00e1 una tabla llamada personal_access_tokens a nuestra base de datos.</p> <pre><code>php artisan migrate:fresh --seed\n</code></pre> <p>Finalmente, debemos verificar que el modelo de usuarios (<code>App\\Models\\Usuario</code>) incluya el trait <code>HasApiTokens</code>. De este modo se vincula el modelo de usuario con los tokens que se vayan a generar para los mismos.</p> <pre><code>...\nuse Laravel\\Sanctum\\HasApiTokens;\n\nclass Usuario extends Authenticatable\n{\n    use HasApiTokens, HasFactory, Notifiable;\n    ...\n</code></pre>"},{"location":"ut12/ut1203/#42-proteccion-de-rutas","title":"4.2. Protecci\u00f3n de rutas","text":"<p>Para proteger las rutas de acceso restringido, primero crearemos un controlador que se encargue de validar las credenciales del usuario:</p> <pre><code>php artisan make:controller Api/LoginController\n</code></pre> <p>Definimos un m\u00e9todo <code>login</code>, por ejemplo, que validar\u00e1 las credenciales que le lleguen (login y password). Si son correctas, llamar\u00e1 al m\u00e9todo <code>createToken</code> de Sanctum (incorporado al usuario a trav\u00e9s del trait <code>HasApiTokens</code>), asoci\u00e1ndolo al login del usuario entrante, y le devolver\u00e1 el token en formato texto plano, como un objeto JSON. En caso de que haya un error en la autenticaci\u00f3n, enviar\u00e1 de vuelta un mensaje de error, con el c\u00f3digo 401 de acceso no autorizado.</p> <pre><code>use App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Models\\Usuario;\n\nclass LoginController extends Controller\n{\n    public function login(Request $request)\n    {\n        $usuario = Usuario::where('login', $request-&gt;login)-&gt;first();\n\n        if (!$usuario || \n            !Hash::check($request-&gt;password, $usuario-&gt;password))\n        {\n            return response()-&gt;json(\n                ['error' =&gt; 'Credenciales no v\u00e1lidas'], 401);\n        }\n        else\n        {\n            return response()-&gt;json(['token' =&gt;\n                $usuario-&gt;createToken($usuario-&gt;login)-&gt;plainTextToken]);\n        }\n    }\n}\n</code></pre> <p>Definimos en el archivo <code>routes/api.php</code> una ruta que redirija a este m\u00e9todo, para cuando el usuario quiera autenticarse (recuerda a\u00f1adir con <code>use</code> la correspondiente clase):</p> <pre><code>Route::post('login', [LoginController::class, 'login']);\n</code></pre> <p>Tambi\u00e9n podemos eliminar en este caso la ruta predefinida de este archivo:</p> <pre><code>// Eliminar esta ruta:\nRoute::middleware('auth:sanctum')-&gt;get('/user', function (Request $request) {\n    return $request-&gt;user();\n});\n</code></pre> <p>Para proteger las rutas que necesitemos en los controladores API, las especificamos en el constructor del controlador. Por ejemplo, as\u00ed proteger\u00edamos todas las rutas de nuestro controlador <code>PruebaController</code>, salvo <code>index</code> y <code>show</code>:</p> <pre><code>class PruebaController extends Controller\n{\n    public function __construct()\n    {\n        $this-&gt;middleware('auth:sanctum',\n            ['except' =&gt; ['index', 'show']]);\n    }\n    ...\n</code></pre> <p> </p> <p>Oserva c\u00f3mo se invoca al middleware <code>auth:sanctum</code>, que es un mecanismo de autenticaci\u00f3n por defecto incorporado en Laravel. Esto hace que no tengamos que tocar la configuraci\u00f3n de <code>config/auth.php</code> para nada en este caso. Al usar Sanctum ya se sabe en qu\u00e9 tabla est\u00e1n los tokens almacenados, y vinculados a qu\u00e9 login.</p> <p>Alternativamente, tambi\u00e9n podemos emplear el modificador <code>only</code> en lugar de <code>except</code> para indicar las rutas concretas que queremos proteger.</p> <p>En el caso de Sanctum, cada vez que validemos un usuario a trav\u00e9s de la ruta de login, se guardar\u00e1 su token (encriptado) en la tabla personal_access_tokens de nuestra base de datos MySQL. Podemos comprobarlo con phpMyAdmin.</p> <p>Echa ahora un vistazo al apartado 5 para ver c\u00f3mo probarlo todo desde Thunder Client o Postman.</p>"},{"location":"ut12/ut1203/#5-prueba-de-autenticacion-basada-en-tokens","title":"5. Prueba de autenticaci\u00f3n basada en tokens","text":"<p>Veamos ahora c\u00f3mo probar la autenticaci\u00f3n basada en tokens desde una herramienta como ThunderClient, para lo que veremos c\u00f3mo obtener y enviar el token de acceso desde esta herramienta. Lo primero que deberemos hacer es una petici\u00f3n POST para loguearnos. Recibiremos como respuesta el token que se haya generado:</p> Prueba de autenticaci\u00f3n basada en tokens (con Thunder Client) <p> </p> <p>En el ejemplo que hemos estado haciendo, los campos a enviar ser\u00edan login y password. Echa un vistazo a phpMyAdmin para ver qu\u00e9 logins se han generado, y el password, siguiendo el ejemplo, deber\u00eda ser 1234.</p> <p>Ahora, s\u00f3lo nos queda adjuntar este token en la cabecera Authorization de las peticiones que lo necesiten. Para ello, vamos a la secci\u00f3n Authorization bajo la URL de la petici\u00f3n, y elegimos que queremos enviar un Bearer token. En el cuadro inferior nos dejar\u00e1 copiar dicho token:</p> Pasar Bearer token desde Auth-Bearer (con Thunder Client) Ejercicios a realizar <ul> <li><code>Ejercicio 3</code>.</li> </ul>"},{"location":"ut12/ut12ac/","title":"Ejercicios propuestos","text":""},{"location":"ut12/ut12ac/#parte-i","title":"Parte I","text":""},{"location":"ut12/ut12ac/#ejercicio-1","title":"Ejercicio 1","text":"<p>Sobre el proyecto blog de la sesi\u00f3n anterior, vamos a a\u00f1adir estos cambios:</p> <ul> <li>Modifica el archivo <code>config/auth.php</code> para que el provider acuda al modelo correcto de usuario.</li> <li>Modifica el factory de usuarios para que los passwords se encripten con bcrypt. Para que sea f\u00e1cil de recordar, haz que cada usuario tenga como password su mismo login encriptado. Ejecuta despu\u00e9s <code>php artisan migrate:fresh --seed</code> para actualizar toda la base de datos.</li> <li>Crea un formulario de login junto con un controlador asociado, y las rutas pertinentes para mostrar el formulario o autenticar, como hemos hecho en el ejemplo para la biblioteca. Recuerda llamar \u201clogin\u201d a la ruta que muestra el formulario de login.</li> <li>En el controlador de posts, protege todas las opciones menos las de <code>index</code> y <code>show</code>.</li> <li>A\u00f1ade una opci\u00f3n de Login en el men\u00fa de navegaci\u00f3n superior, que s\u00f3lo est\u00e9 visible si el usuario no se ha autenticado a\u00fan</li> <li>Haz que s\u00f3lo se muestren los enlaces y botones de crear, editar o borrar posts cuando el usuario est\u00e9 autenticado. En ese mismo caso, haz que tambi\u00e9n se muestre una opci\u00f3n de logout en el men\u00fa superior, que deber\u00e1s implementar.</li> <li>Finalmente, a\u00f1ade la funcionalidad de que el usuario autenticado s\u00f3lo puede editar y borrar sus propios posts, pero no los de los dem\u00e1s usuarios.</li> </ul>"},{"location":"ut12/ut12ac/#ejercicio-2","title":"Ejercicio 2","text":"<p>Opcional</p> <p>Continuamos con el proyecto blog anterior. Sigue estos pasos para definir una autenticaci\u00f3n basada en roles:</p> <ul> <li>Crea una nueva migraci\u00f3n que modifique la tabla de usuarios para a\u00f1adir un nuevo campo llamado rol, de tipo string. Aseg\u00farate de que la migraci\u00f3n sea de modificaci\u00f3n, y no de creaci\u00f3n de tabla. Despu\u00e9s, ejec\u00fatala para crear el nuevo campo.</li> <li>Haz que alguno de los usuarios de la tabla tenga un rol de admin (ed\u00edtalo a mano desde phpMyAdmin), y el resto ser\u00e1n de tipo editor.</li> <li>Crea un nuevo middleware llamado <code>RolCheck</code>, con una funci\u00f3n que compruebe si el usuario tiene el rol indicado, como en el ejemplo visto antes en los apuntes. Reg\u00edstralo adecuadamente en el archivo <code>App/Http/Kernel.php</code>, como se ha explicado.</li> <li>Modifica las vistas necesarias para que, si el usuario es de tipo admin pueda ver los botones de edici\u00f3n y borrado de cualquier post, aunque no sean suyos.</li> <li>Modifica los m\u00e9todos <code>edit</code>, <code>update</code> y <code>destroy</code> de <code>PostController</code> para que redirijan a <code>posts.index</code> si el usuario no es administrador, o si no es el propietario del post a editar o borrar.</li> </ul> <p>\u00bfQu\u00e9 entregar?</p> <p>Como entrega de esta sesi\u00f3n deber\u00e1s comprimir el proyecto blog con todos los cambios incorporados, y eliminando las carpetas <code>vendor</code> y <code>node_modules</code> como se explic\u00f3 en las sesiones anteriores. Renombra el archivo comprimido a <code>blog_12a.zip</code>.</p>"},{"location":"ut12/ut12ac/#parte-ii","title":"Parte II","text":""},{"location":"ut12/ut12ac/#ejercicio-3","title":"Ejercicio 3","text":"<p>Como ejercicio para practicar la autenticaci\u00f3n basada en tokens, se pide que sigas los pasos indicados en el punto 12.3 Autenticaci\u00f3n basada en tokens, donde se explica c\u00f3mo proteger aplicaciones basadas en servicios REST mediante tokens. En el punto 2 se indica que existen distintas formas de hacerlo, y en los puntos 3 y 4 se detallan dos de ellas. Lo que se pide como ejercicio es que sig\u00e1is los pasos detallados en cualquiera de las dos opciones (3 o 4) para proteger el proyecto de ejemplo que se crea en ese apartado.</p> <p>Debes adjuntar como resultado de este ejercicio el proyecto pruebaToken con el c\u00f3digo completo para proteger mediante tokens las rutas restringidas del controlador <code>PruebaController</code> que habremos definido. Tambi\u00e9n debes adjuntar la colecci\u00f3n de pruebas de Postman que habr\u00e1s empleado para probar la seguridad de la aplicaci\u00f3n.</p> <p>\u00bfQu\u00e9 entregar?</p> <p>Como entrega de esta parte deber\u00e1s comprimir el proyecto <code>pruebaToken</code> finalizado. Elimina tambi\u00e9n la carpeta <code>vendor</code>, y a\u00f1ade dentro del ZIP <code>blog_12b.zip</code> la colecci\u00f3n Postman para probar los servicios.</p>"}]}