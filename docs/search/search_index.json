{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":"\u00cdndice de unidades tem\u00e1ticas bloque unidad tem\u00e1tica bloque IPHP UT 01 Arquitectura Web UT 02 Lenguaje PHP UT 03 PHP Orientado a Objetos UT 04 Programaci\u00f3n Web UT 05 Acceso a base de datos bloque IILaravel UT 06 Herramientas Web UT 07 Framework Laravel UT 08 Laravel: controladores UT 09 Laravel: modelo de datos UT 10 Laravel: formularios y validaciones UT 11 Laravel: servicios REST UT 12 Laravel: autenticaci\u00f3n de usuarios <p>Licencia</p> <p>Uso de estos materiales sujeto a una licencia Creative Commons CC BY-NC-SA.Derivado a partir de materiales: \u00a0\u00a0\u00a0\u00a0- Curso Desarrollo Web en Entorno Servido, de Aitor Medrano y Luis Alema\u00f1. \u00a0\u00a0\u00a0\u00a0- Curso de Laravel, de Nacho Iborra.</p>"},{"location":"ut00/portfolio1/","title":"Portfolio 1","text":""},{"location":"ut00/portfolio1/#1-instalacion-de-docker","title":"1. Instalaci\u00f3n de Docker","text":"<p>El primer paso para configurar el entorno de desarrollo es la instalaci\u00f3n de Docker.</p> <p>En realidad podr\u00edamos preparar el entorno de diferentes formas (directamente instalando en la m\u00e1quina local, mediante m\u00e1quina virtual...); pero la utilizaci\u00f3n de Docker se ve justificada por su f\u00e1cil utilizaci\u00f3n, la profundizaci\u00f3n en esta tecnolog\u00eda en otros m\u00f3dulos de este curso (Despliegue de aplicaciones web), y su extensa utilizaci\u00f3n en la industria (en todo tipo de entornos).</p> <p>Para la Instalaci\u00f3n de Docker es recomendable seguir la documentaci\u00f3n oficial:</p> <ul> <li>Docker for Windows</li> <li>Docker for Ubuntu</li> <li>Docker for Mac</li> </ul> <p>Si a\u00fan no tienes instalado Docker en tu m\u00e1quina, \u00a1es el momento de hacerlo!</p>"},{"location":"ut00/portfolio1/#2-estructura-de-directorios","title":"2. Estructura de directorios","text":"<p>Una vez tengas instalado Docker, crea la siguiente estructura de directorios en la ruta en la que vayas a crear el proyecto:</p> Estructura de directorios <p>Por el momento la carpeta src est\u00e1 vac\u00eda. Vamos a crear el fichero docker-compose.yml (est\u00e1 a la misma altura que la carpeta src) con el siguiente contenido:</p> Contenido del fichero docker-compose.yml <p>Para crear la indentaci\u00f3n (espacios a la izquierda) pulsa el tabulador tantas veces como sea necesario (la indentaci\u00f3n es importante en el fichero docker-compose.yml).</p> <p>Pues ya lo tendr\u00edamos todo para poder ejecutar nuestro c\u00f3digo, pero... \u00bfc\u00f3mo es posible? Este fichero docker-compose.yml va a lanzar un contenedor preconfigurado (como si fuese una peque\u00f1a m\u00e1quina virtual) con PHP 8.2 y el servidor web Apache. Adem\u00e1s, va a exponer el puerto 8081 y lo va a hacer corresponder con el puerto 80 del host (nuestra m\u00e1quina local); por \u00faltimo, todo lo que haya en el directorio src va a estar montado en la ruta /var/www/html (donde recoge Apache el c\u00f3digo a ejecutar) del sistema de archivos del contenedor, con lo cual lo \u00fanico que vamos a tener que hacer es incluir todo nuestro c\u00f3digo en la carpeta \u200bsrc\u200b, y el contenedor se encargar\u00e1 del resto.</p> <p>Prueba:</p> <p>Vamos a hacer un prueba. Vamos a la ruta donde est\u00e9 el fichero docker-compose.yml y ejecutamos el siguiente comando:</p> <pre><code>docker-compose up\n</code></pre> <p></p> <p>En primer lugar vemos que se han realizado una serie de descargas para conformar el contenedor (estas descargas solo se van a realizar la primera vez, a no ser que hagamos un purgado de Docker). Una vez hecho esto se lanza el contenedor (web_1) y se empiezan a mostrar las l\u00edneas de log de Apache. Si ahora consultamos en el navegador la direcci\u00f3n 127.0.0.1:80 (equivalente a introducir \u200blocalhost\u200b, que es un alias configurado en el fichero /etc/hosts), vemos el resultado:</p> <p></p> <p>Si consultamos en log de Apache en la consola:</p> <p></p> <p>Vemos que s\u00ed se ha registrado actividad, pero: \u00bfpor qu\u00e9 no se muestra nada en el navegador? La raz\u00f3n es que a\u00fan no hemos introducido ning\u00fan fichero en src que Apache pueda tomar para interpretar. En el propio log lo dice:</p> <p>\u200bCannot serve directory /var/www/html/: No matching DirectoryIndex (\u200b\u200b\u200bindex.php,index.html\u200b) found, and server-generated directory index forbidden by Options directive</p> <p>Por tanto vamos a introducir un fichero index.php con el t\u00edpico \"Hola mundo\":</p> <p></p> <p>Refrescamos el navegador y vemos la salida:</p> <p></p> <p>Borramos el fichero index.php, y src vuelve a estar vac\u00edo.</p> <p>Podemos decir que estamos preparados para empezar nuestro proyecto.</p>"},{"location":"ut00/portfolio1/#proyecto-preparacion-de-la-interfaz","title":"PROYECTO - PREPARACI\u00d3N DE LA INTERFAZ","text":"<p>Junto con el presente documento se proporciona tambi\u00e9n el punto de partida del proyecto, que va a consistir en un documento HTML, llamado index.html (pincha para descargarlo). Se han utilizado las siguientes librer\u00edas para conformar la interfaz de usuario:</p> <ul> <li>Bootstrap 5.2, para el dise\u00f1o de interfaces responsivas.</li> <li>Tema Flatly basado en bootstrap, que proporciona la hoja de estilos de la interfaz.</li> <li>Font awesome 6.2, para la utilizaci\u00f3n de iconos.</li> </ul> <p>Si nos fijamos en el contenido del fichero index.html proporcionado no se diferencia en nada (salvo en la utilizaci\u00f3n de las librer\u00edas anteriores) de una de las p\u00e1ginas est\u00e1ticas programadas durante el primer curso del ciclo:</p> <p></p> <p>Vamos a empezar a incrustar PHP en el c\u00f3digo HTML.</p>"},{"location":"ut00/portfolio1/#utilizacion-de-plantillas","title":"Utilizaci\u00f3n de plantillas","text":"<p>El primer paso que vamos a realizar es trocear el c\u00f3digo HTML proporcionado. \u00bfPor qu\u00e9? porque hay determinadas partes que siempre se repiten en cada una de las p\u00e1ginas: la cabecera y el pi\u00e9 de p\u00e1gina.</p> <p>As\u00ed, vamos a crear una carpeta \"templates\" (plantillas, en ingl\u00e9s) dentro de \"src\", para almacenar todos aquellos fragmentos de c\u00f3digo HTML que podemos reutilizar de una p\u00e1gina a otra.</p> <p>Dentro de templates vamos a crear dos archivos: header.php y footer.php. Tambi\u00e9n vamos a crear un archivo \"index.php\", pero esta vez dentro de \"src\" (\u200bNO dentro de \"templates\"!\u200b). La estructura, por el momento, queda del siguiente modo:</p> <p></p> <p>\u200bACTIVIDAD\u200b: En clase, vamos a analizar index.html y debatir c\u00f3mo segmentar el c\u00f3digo. A continuaci\u00f3n reorganizamos el c\u00f3digo de index.html entre footer.php y header.php.</p> <p>Una vez configuradas las plantillas, queda muy poco c\u00f3digo HTML en index.html. Vamos ahora a poner el restante del c\u00f3digo HTML en index.php y vaciar por completo index.html (tras lo cual eliminamos este fichero). index.php queda del siguiente modo:</p> <p></p> <p>\u00bfC\u00f3mo podemos ahora volver a estructurar la p\u00e1gina de inicio con las plantillas? Esto se ver\u00e1 en el siguiente apartado.</p>"},{"location":"ut00/portfolio1/#conformacion-de-las-paginas-de-la-aplicacion","title":"Conformaci\u00f3n de las p\u00e1ginas de la aplicaci\u00f3n","text":"<p>Para poder estructurar las p\u00e1ginas de la aplicaci\u00f3n bas\u00e1ndonos en las plantillas, podemos utilizar la instrucci\u00f3n include. Modificando el fichero index.php, quedar\u00eda del siguiente modo:</p> <p></p> <p>Ahora, con el contenedor Docker iniciado, si refrescamos la p\u00e1gina, volveremos a obtener el mismo resultado que con la p\u00e1gina web est\u00e1tica:</p> <p></p> <p>Parece que no haya cambiado nada, pero PHP ya est\u00e1 trabajando para nosotros. Hemos pasado de una p\u00e1gina web est\u00e1tica, recogida en un solo documento, a una p\u00e1gina modular generada con PHP. En un sitio web con multitud de p\u00e1ginas esto puede ser una gran ventaja.</p> <p>ATENCI\u00d3N: el orden en que han sido cargados los ficheros es importante. Si escribi\u00e9semos el siguiente fichero index.php:</p> <p></p> <p>Obtendr\u00edamos el siguiente resultado:</p> <p></p> <p>El HTML generado ni siguiera ser\u00eda correcto, pero los navegadores web modernos son capaces de tomar un documento HTML incorrecto sint\u00e1cticamente y representar la mejor aproximaci\u00f3n.</p> <p>Volvemos a la versi\u00f3n anterior de index.php tras esta peque\u00f1a prueba.</p> <p>Ya tendr\u00edamos lo b\u00e1sico del proyecto hecho. Hemos visto la funci\u00f3n include, pero somos programadores con mucha curiosidad, y nos preguntamos si \"include\" nos sirve para todos los casos o existen otras posibilidades para incluir ficheros en PHP. En el pr\u00f3ximo apartado vamos a profundizar en esto.</p>"},{"location":"ut00/portfolio1/#inclusion-de-ficheros-en-php","title":"Inclusi\u00f3n de ficheros en PHP","text":"<p>La idea de utilizar diferentes ficheros es la reutilizaci\u00f3n del c\u00f3digo, lo que conlleva una mayor modularidad y un mejor mantenimiento del mismo. Un fichero no tiene por qu\u00e9 ser una plantilla, como hemos visto hasta ahora, sino que tambi\u00e9n podr\u00eda ser c\u00f3digo PHP que pudi\u00e9semos llegar a utilizar en diferentes partes de la aplicaci\u00f3n. Tambi\u00e9n se pueden dar diferentes circunstancias, y es por ello que disponemos de varias opciones:</p> <ul> <li>include(ruta/archivo); include_once(ruta/archivo);</li> <li>require(ruta/archivo); require_once(ruta/archivo);</li> </ul> <p>NOTA: Si el archivo se encuentra a la misma altura (en el sistema de archivos) que el fichero en el cual se incluye, entonces solo es necesario especificar el nombre del archivo a incluir; si los dos archivos no se encuentran a la misma altura, entonces es posible especificar la ruta (absoluta o relativa) del fichero a incluir.</p> <p>Las particularidades de cada instrucci\u00f3n son:</p> <ul> <li>require: lanza un error fatal si no encuentra el archivo.</li> <li>include: si no encuentra el archivo, emite una advertencia (warning)</li> <li>Las funciones _once s\u00f3lo se cargan una vez, si ya ha sido incluida previamente, no lo vuelve a hacer, evitando bucles.</li> </ul> <p>Por ejemplo, colocamos las siguientes funciones en el archivo biblioteca.php:</p> <pre><code>&lt;?php\nfunction suma(int $a, int $b) : int {\n    return $a + $b;\n}\n\nfunction resta(int $a, int $b) : int {\n    return $a - $b;\n}\n?&gt;\n</code></pre> <p>Y posteriormente en otro archivo incluimos el anterior:</p> <pre><code>&lt;?php\n\ninclude_once(\"biblioteca.php\");\n\necho suma(10,20);\n\necho resta(40,20);\n\n?&gt;\n</code></pre>"},{"location":"ut00/portfolio1/#completamos-el-resto-de-paginas","title":"Completamos el resto de p\u00e1ginas","text":"<p>En este apartado vamos a completar las p\u00e1ginas y las plantillas de la aplicaci\u00f3n para poder a\u00f1adirles posteriormente c\u00f3digo PHP.</p> <p>index.php</p> <p>Vamos a introducir un proyecto de prueba para que se pueda visualizar en la p\u00e1gina de inicio, quedar\u00eda del siguiente modo:</p> <p></p> <p>Vamos a utilizar una imagen para cada proyecto. Para poder hacer esto hemos de almacenar las im\u00e1genes en la estructura de directorios, por eso creamos una carpeta \"static\" dentro de src, y dentro de static crearemos otra llamada \"images\":</p> <p></p> <p>NOTA: si has de descargar im\u00e1genes de Internet, aseg\u00farate que la licencia de dichas im\u00e1genes te lo permite. Utiliza, si es necesario, un sitio como pixabay.com para descargar im\u00e1genes con licencia libre.</p> <p>Desc\u00e1rgate una imagen en la carpeta \"images\", ren\u00f3mbrala a \"proyecto1.jpg\" y completa el fichero \"index.php\" con el siguiente c\u00f3digo:</p> <pre><code>&lt;?php include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;a href=\"#\"&gt;\n        &lt;div class=\"card\" style=\"width: 18rem;\"&gt;\n            &lt;img class=\"card-img-top\" src=\"static/images/proyecto1.jpg\" alt=\"Proyecto 1\"&gt;\n            &lt;div class=\"card-body\"&gt;\n                &lt;h5 class=\"card-title\"&gt;Proyecto 1&lt;/h5&gt;\n                &lt;p class=\"card-text\"&gt;Descripci\u00f3n del proyecto 1.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/a&gt;\n&lt;/div&gt;\n\n&lt;?php include(\"templates/footer.php\"); ?&gt;\n</code></pre> <p>Ahora deber\u00eda aparecer un proyecto en la p\u00e1gina principal.</p> <p>proyecto.php</p> <p>Creamos este nuevo fichero a la altura de index.php y a\u00f1adimos el siguiente contenido:</p> <pre><code>&lt;?php include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;h2&gt;T\u00edtulo de muestra&lt;/h2&gt;\n    &lt;h4&gt;&lt;a href=\"#\"&gt;A\u00f1o&lt;/a&gt;&lt;/h4&gt;\n    &lt;span&gt;Categor\u00edas: &lt;/span&gt;\n    &lt;a href=\"#\"&gt;&lt;button class=\"btn btn-sm btn-default\"&gt;Categor\u00eda 1&lt;/button&gt;&lt;/a&gt;\n    &lt;br&gt; &lt;br&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-sm\"&gt;\n            &lt;img src=\"static/images/proyecto1.jpg\" alt=\"Proyecto 1\" class=\"img-responsive\"&gt;&lt;br&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-sm\"&gt;Descripci\u00f3n&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;?php include(\"templates/footer.php\"); ?&gt;\n</code></pre> <p>Para consultar el resultado, introducimos en la barra de navegaci\u00f3n la URL \"localhost/proyecto.php\":</p> <p></p> <p>contacto.php</p> <p>Descargamos esta imagen en el directorio correspondiente (con el nombre businessman.png), creamos contacto.php a la altura de index.php, e insertamos el siguiente c\u00f3digo:</p> <pre><code>&lt;?php include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;h2 class=\"mb-5\"&gt;Contacto&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md\"&gt;\n            &lt;img src=\"static/images/businessman.png\" class=\"img-fluid rounded\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-md\"&gt;\n            &lt;h3&gt;Nombre y apellidos&lt;/h3&gt;\n            &lt;p&gt;Ciclo Superior DAW.&lt;/p&gt;\n            &lt;p&gt;Apasionado del mundo de la programaci\u00f3n en general, y de las tecnolog\u00edas web en particular.&lt;/p&gt;\n            &lt;p&gt;Si tienes cualquier tipo de pregunta, contacta conmigo por favor.&lt;/p&gt;\n            &lt;p&gt;Tel\u00e9fono: 87654321&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;?php include(\"templates/footer.php\"); ?&gt;\n</code></pre> <p>El resultado, al consultar la URL localhost/contacto.php, deber\u00eda ser el siguiente:</p> <p></p> <p>En estos momentos tenemos ya muchas cosas preparadas para poder empezar a a\u00f1adir dinamismo a nuestra aplicaci\u00f3n. En los siguientes apartados vamos a ver las diferentes estructuras que nos lo van a permitir.</p>"},{"location":"ut01/ut0101/","title":"1.1. Introducci\u00f3n","text":""},{"location":"ut01/ut0101/#duracion-estimada-de-la-unidad","title":"Duraci\u00f3n estimada de la unidad","text":"<p>4 sesiones.</p>"},{"location":"ut01/ut0101/#evaluacion","title":"Evaluaci\u00f3n","text":"Resultados de aprendizaje Criterios de evaluaci\u00f3n RA1. Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias. a) Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web. b) Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web. c) Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web. d) Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web. e) Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor. f) Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor. g) Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor. cuestionario de arranque para repasar <ul> <li> <p>[ ] \u00bfQu\u00e9 es Internet?</p> </li> <li> <p>[ ] df</p> </li> <li>[ ] \u00bfQu\u00e9 es la pila de protocolos TCP/IP?</li> <li>[ ] \u00bfQu\u00e9 protocolo de nivel de aplicaci\u00f3n se utiliza en Internet? \u00bfcu\u00e1l es la versi\u00f3n segura de este protocolo?</li> <li>[ ] \u00bfQu\u00e9 es una direcci\u00f3n IP? \u00bfqu\u00e9 es un puerto IP?</li> <li>[ ] \u00bfCu\u00e1ntas versiones del protocolo IP conoces?</li> <li>[ ] \u00bfQu\u00e9 es una URL? \u00bfmediante qu\u00e9 protocolo/servicio se relaciona un dominio con una direcci\u00f3n IP?</li> <li>[ ] \u00bfQu\u00e9 es una p\u00e1gina web? \u00bfqu\u00e9 es una aplicaci\u00f3n web? \u00bfqu\u00e9 es un sitio web? \u00bfqu\u00e9 es una arquitectura web?</li> <li>[ ] \u00bfCu\u00e1l es la diferencia entre una p\u00e1gina web est\u00e1tica y una din\u00e1mica? Las p\u00e1ginas web que has desarrollado durante el primer curso, \u00bferan est\u00e1ticas o din\u00e1micas?</li> <li>[ ] \u00bfCu\u00e1l es la diferencia entre la web 1.0 y la web 2.0?</li> <li>[ ] Un navegador web, \u00bfqu\u00e9 es exactamente? \u00bfcu\u00e1l es su funci\u00f3n? \u00bfcu\u00e1ntos conoces? \u00bfexisten diferencias entre ellos?</li> <li>[ ] \u00bfCu\u00e1l crees que es la principal diferencia entre una aplicaci\u00f3n web y una aplicaci\u00f3n nativa? \u00bfhas escuchado hablar de las aplicaciones h\u00edbridas? \u00bfconoces ejemplos de aplicaciones que tengan una versi\u00f3n web y su correspondiente nativa (app m\u00f3vil)?</li> <li>[ ] \u00bfConoces los t\u00e9rminos \"back-end\" y \"front-end\"? \u00bfcu\u00e1l corresponde al desarrollo servidor y cu\u00e1l al desarrollo en cliente? \u00bfqu\u00e9 ideas te inspira la imagen de la portada de este documento?</li> <li>[ ] \u00bfConoces los t\u00e9rminos \"back-office\" y \"front-office\"? \u00bfcu\u00e1l es la diferencia?</li> </ul>"},{"location":"ut01/ut0102/","title":"1.2. Arquitecturas web","text":"<p>Las arquitecturas web describen la relaci\u00f3n entre los distintos elementos que participan en el intercambio/procesamiento de informaci\u00f3n a trav\u00e9s de Internet, as\u00ed como sus funciones.</p> <p>La gran mayor\u00eda de las arquitecturas web en la actualidad son de tipo cliente-servidor: una comunicaci\u00f3n asim\u00e9trica en la que uno de los extremos ofrece uno o m\u00e1s servicios y el otro hace uso de ellos. \u00c9sta es la arquitectura sobre la que nos centraremos, aunque existen otras como la Punto a Punto (P2P - Peer to Peer).</p>"},{"location":"ut01/ut0102/#arquitectura-clienteservidor","title":"Arquitectura cliente\u2011servidor","text":"<p>El modelo cliente-servidor es un modelo que reparte tareas entre los proveedores de un recurso o servicio, llamados servidores, y los solicitantes/consumidores del servicio, llamados clientes .</p> <p>Lo m\u00e1s frecuente es que los clientes y los servidores se comuniquen a trav\u00e9s de una red de comunicaciones, pero ambos pueden residir en la misma m\u00e1quina (normalmente en tareas de desarrollo).</p> <p>El esquema de funcionamiento m\u00e1s b\u00e1sico del modelo cliente-servidor para una arquitectura web est\u00e1 basado en uno o varios clientes que solicitan una p\u00e1gina web a un servidor web:</p> <ol> <li>Desde el navegador web (o agente de usuario, que puede ser tambi\u00e9n una app nativa u otro servidor incluso) el usuario solicita un servicio web indicando su URL.</li> <li>El servidor recibe la petici\u00f3n mediante el protocolo de aplicaci\u00f3n HTTP, y la procesa mediante su  l\u00f3gica de negocio .</li> <li>Produce una respuesta HTTP a la petici\u00f3n, que env\u00eda al cliente. Esta respuesta puede contener ficheros de distinta naturaleza: HTML, CSS, XML, JSON, ficheros multimedia, c\u00f3digo JavaScript, etc.</li> <li>El navegador web recibe la informaci\u00f3n enviada por el servidor y la interpreta. En funci\u00f3n de la respuesta enviada, se respresenta en el navegador la respuesta al usuario (normalmente en forma de p\u00e1gina web).</li> </ol> <p>A continuaci\u00f3n se muestran las ventajas y desventajas al respecto:</p> <p>Ventajas:</p> <ul> <li>Centralizaci\u00f3n del control: los accesos, recursos y la integridad de los datos son controlados por el servidor. Esta centralizaci\u00f3n tambi\u00e9n facilita la tarea de actualizar datos u otros recursos.</li> <li>Escalabilidad : se puede aumentar la capacidad de clientes y servidores por separado. Cualquier elemento puede ser aumentado (o mejorado) en cualquier momento, o se pueden a\u00f1adir nuevos nodos a la red (clientes y/o servidores), siempre que el sistema est\u00e9 dise\u00f1ado para ello.</li> <li>Portabilidad : el hecho de que la aplicaci\u00f3n web se ejecute en un navegador web, hace que se independice el software del sistema operativo sobre el que se ejecuta. De esta forma, se aprovecha el desarrollo para las diferentes plataformas.</li> <li>F\u00e1cil  mantenimiento : al estar distribuidas las funciones y responsabilidades entre varios ordenadores independientes, es posible reemplazar, reparar, actualizar, o incluso trasladar un servidor, mientras que sus clientes no se ver\u00e1n afectados por ese cambio (o se afectar\u00e1n m\u00ednimamente). Esta independencia de los cambios tambi\u00e9n se conoce como encapsulaci\u00f3n .</li> <li>Existen  tecnolog\u00edas , suficientemente desarrolladas, dise\u00f1adas para el modelo de cliente-servidor que aseguran la seguridad en las transacciones, la usabilidad de la interfaz, y la facilidad de uso.</li> </ul> <p>Desventajas:</p> <ul> <li>La congesti\u00f3n del tr\u00e1fico ha sido siempre un problema en esta arquitectura. Cuando una gran cantidad de clientes env\u00edan peticiones simult\u00e1neas al mismo servidor, se pueden producir situaciones de sobrecarga.</li> <li>Cuando un servidor est\u00e1 ca\u00eddo, las peticiones de los clientes  no pueden ser satisfechas , ya que los recursos no est\u00e1n distribuidos.</li> <li>El software y el hardware de un servidor son generalmente muy determinantes. Normalmente se necesita  software y hardware espec\u00edfico , dependiendo del tipo de servicio web, sobre todo en el lado del servidor. Esto aumentar\u00e1 el coste. Como alternativa, se dispone de servicios web en la nube, con diversos tipos de costes dependientes de la arquitectura web.</li> </ul> <p>NOTA : estas desventajas se refieren al caso en que los recursos del servidor no est\u00e1n replicados y/o distribuidos. Actualmente existen t\u00e9cnicas de escalado horizontal y vertical que pueden subsanar estos problemas.</p> <p>Ejemplo con DevTools</p> <p>Peticiones desde el navegador</p> <p>En este apartado vamos a tratar de indagar un poco m\u00e1s en qu\u00e9 sucede detr\u00e1s de las cortinas cuando consultamos una URL. Vamos a observar, a trav\u00e9s de las herramientas de desarrollador del navegador web de Chrome (igual nos puede servir Firefox o cualquier otro), los 4 pasos que se detallaban en el apartado anterior.</p> <p>A continuaci\u00f3n abrimos las herramientas de desarrollador y vamos a la pesta\u00f1a Network (o Red):</p> Paso 1 <p>Abrimos elche.es y DevTools \u2192 More tools \u2192 Developer tools</p> <p>Pesta\u00f1aNetwork antes de refrescar</p> <p>En estos momentos a\u00fan no hay datos, porque no hemos hecho una petici\u00f3n al servidor con la ventana de herramientas de desarrollador activa. Por tanto, refrescamos la p\u00e1gina (equivalente a hacer una petici\u00f3n al servidor que gestiona www.elche.es) y pasamos al punto siguiente.</p> Paso 2 <p>El servidor recibe la petici\u00f3n mediante el protocolo de aplicaci\u00f3n HTTP, y la procesa mediante su l\u00f3gica de negocio.</p> <p>Realmente no podemos saber exactamente qu\u00e9 est\u00e1 sucediendo en el servidor durante este paso, a no ser que tuvi\u00e9semos acceso al mismo, con los privilegios y herramientas correctas, pero s\u00ed podemos averiguar muchos datos mediante herramientas como:</p> <pre><code>-[whois](https://who.is/dns/elche.es){target=_blank rel=\"noopener noreferrer\"}: nos indica, entre otros datos, que la IP del servidor es 217.13.88.8 (registro DNS de tipo A).\n\n-[builtwith](https://builtwith.com/detailed/elche.es){target=_blank rel=\"noopener noreferrer\"}: nos indica, entre otras cosas, que la plataforma web dispone de dos servidores web (Apache y nginx).\n\n**OJO**: Existe otro tipo de m\u00e9todos para conocer m\u00e1s datos sobre el servidor podr\u00eda implicar pr\u00e1cticas ilegales, en el \u00e1mbito de la ciberseguridad.\n\nEste paso se llevar\u00eda a cabo en lo que se denomina**Back-end**.\n\nVamos a ver el resultado en el siguiente paso.\n\n=== \"Paso 3\"\n\nEl servidor produce una respuesta a la petici\u00f3n del cliente, que la env\u00eda a trav\u00e9s de internet y recupera nuestro navegador.\n\nAhora, si consultamos la pesta\u00f1a Network despu\u00e9s de refrescar la URL, podremos ver que han aparecido muchos registros, el primero de los cuales tiene como nombre*www.elche.es* :\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut01/ejemplo03.png\" alt=\"ejemplo\" style=\"zoom:70%; border: 2px solid #fff2c9;\" /&gt;``&lt;/div&gt;`\n\nEste registro corresponde a la primera petici\u00f3n que hemos realizado al servidor de www.elche.es. Si pinchamos sobre \u00e9l podremos ver tanto los datos de la petici\u00f3n realizada, como la respuesta enviada por el servidor a trav\u00e9s de Internet, mediante HTTP. Se puede ver que el c\u00f3digo devuelto por el servidor es 200 (en color verde, signo de que no ha habido error), y ha respondido un servidor web nginx:\n\nDetalle de**headers**: c\u00f3digo **200 OK**, servidor **nginx**\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut01/ejemplo04.png\" alt=\"ejemplo\" style=\"zoom:70%; border: 2px solid #fff2c9;\" /&gt;``&lt;/div&gt;`\n\n&gt; *NOTA* : el servidor puede enviar tambi\u00e9n su versi\u00f3n software, pero esto podr\u00eda conllevar ataques maliciosos, dependiendo de las vulnerabilidades de dicha &gt; versi\u00f3n. Es por ello que es una buena pr\u00e1ctica configurar el servidor web para que no env\u00ede dicha versi\u00f3n (entre otros aspectos).\n\nM\u00e1s abajo, en la misma respuesta, nos indica los par\u00e1metros con que se ha realizado la petici\u00f3n. Entre \u00e9stos, podemos ver el tipo de petici\u00f3n que hemos hecho (GET), la versi\u00f3n de nuestro navegador web, el lenguaje en que queremos recibir la informaci\u00f3n, entre otros detalles:\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut01/ejemplo05.png\" alt=\"ejemplo\" style=\"zoom:70%; border: 2px solid #fff2c9;\" /&gt;``&lt;/div&gt;`\n\nLa petici\u00f3n ha tardado (en la prueba actual) 6.31 segundos en resolverse, y ha desembocado en una transferencia por parte del servidor de un total de 136 respuestas y 57.9 kB transferidos (entre otras m\u00e9tricas):\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut01/ejemplo06.png\" alt=\"ejemplo\" style=\"zoom:90%; border: 2px solid #fff2c9;\" /&gt;``&lt;/div&gt;`\n\nEl resto de registros que est\u00e1n debajo del inicial, se corresponden con todos los recursos (ficheros HTML, JavaScript, archivos multimedia, etc.) necesarios para que el navegador represente la p\u00e1gina web. Por ejemplo, si pinchamos sobre el segundo registro \"polyfiller.js\", y pinchamos sobre la pesta\u00f1a \"Preview\" del panel de la derecha, podremos ver el c\u00f3digo JavaScript que contiene este fichero transferido:\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut01/ejemplo07.png\" alt=\"ejemplo\" style=\"zoom:90%; border: 2px solid #fff2c9;\" /&gt;``&lt;/div&gt;`\n\n\"Logo-ayto-elche-nuevo.png\" podremos ver que es el logo del ayuntamiento, transferido desde el servidor:\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut01/ejemplo08.png\" alt=\"ejemplo\" style=\"zoom:90%; border: 2px solid #fff2c9;\" /&gt;``&lt;/div&gt;`\n\nTodos estos ficheros tardan un tiempo en transferirse, lo que se representa en forma de waterfall (cascada):\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut01/ejemplo09.png\" alt=\"ejemplo\" style=\"zoom:70%; border: 2px solid #fff2c9;\" /&gt;``&lt;/div&gt;`\n\nLa petici\u00f3n que m\u00e1s tarda en resolverse es la primera, seg\u00fan este gr\u00e1fico.\n\n\u00bfTe recuerda esto a alg\u00fan tipo de programa de descargas tipo BitTorrent o similares? Pues s\u00ed, en este caso se podr\u00eda pensar en el navegador web como si de un gestor de descargas se tratase (salvando las diferencias), que se encarga de recuperar todos los ficheros que necesita para representar la p\u00e1gina web que se le ha solicitado.\n\n=== \"Paso 4\"\nEl navegador web recibe la informaci\u00f3n enviada por el servidor y la interpreta. En funci\u00f3n de la respuesta enviada, se respresenta en el navegador la respuesta al usuario (normalmente en forma de p\u00e1gina web).\n\nEl navegador web es un software dise\u00f1ado para interpretar todo el contenido enviado por un servidor web, y representarlo en la pantalla para que el usuario final pueda consultar la informaci\u00f3n recibida, interaccionar con la p\u00e1gina web, o tambi\u00e9n gestionar las operaciones del usuario que requieran nuevas peticiones al servidor web (en caso de p\u00e1ginas web din\u00e1micas, o aplicaciones web).\n\nPor ello, el navegador web tomar\u00e1 todos los ficheros descargados y conformar\u00e1 la p\u00e1gina de bienvenida de www.elche.es, lo que se denomina**Front-end** :\n\nInterpretaci\u00f3n en el**front\u2011end** (p\u00e1gina renderizada por el navegador)\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;img src=\"../../img/ut01/ejemplo10.png\" alt=\"ejemplo\" style=\"zoom:70%; border: 2px solid #fff2c9;\" /&gt;``&lt;/div&gt;`\n\n\u00bfA\u00fan contin\u00faas pensando que es correcto decir \"navegar por Internet\"?\nEl cliente hace la petici\u00f3n (*request* normalmente mediante el protocolo *GET* mediante el puerto *80*/*443*) y el servidor responde (*response*).\n</code></pre>"},{"location":"ut01/ut0103/","title":"1.3. Generar p\u00e1ginas web","text":""},{"location":"ut01/ut0103/#paginas-estaticas","title":"P\u00e1ginas est\u00e1ticas","text":"<p>Una p\u00e1gina web est\u00e1tica es un documento o conjunto de documentos (generalmente: HTML, CSS, contenido multimedia, c\u00f3digo JavaScript) en el que no existe una actualizaci\u00f3n din\u00e1mica de su contenido al interactuar con el sistema (servidor, ya sea remoto o local) que provee el documento/s. Es decir, la misma petici\u00f3n a la misma URL (Uniform Resource Locator), aunque la repitamos en m\u00faltiples ocasiones a lo largo del tiempo, siempre va a devolver la misma informaci\u00f3n (a no ser que la modifique un desarrollador en el lado servidor, manualmente). Puede existir interacci\u00f3n con la p\u00e1gina web est\u00e1tica (mediante c\u00f3digo JavaScript), en forma de mensajes, eventos, actualizaciones de su apariencia...</p> <p>En este caso, un navegador web es capaz de representar la p\u00e1gina web en una m\u00e1quina local, sin necesidad de disponer de un servidor web adicional.</p>"},{"location":"ut01/ut0103/#paginas-dinamicas","title":"P\u00e1ginas din\u00e1micas","text":"<p>Una p\u00e1gina web din\u00e1mica puede contener una parte est\u00e1tica, y adem\u00e1s el contenido que se muestre depender\u00e1 del momento en el cual se realice la petici\u00f3n. Esto es debido a que el servidor conformar\u00e1 dicho contenido dependiendo de los datos de que se disponga en ese momento en un sistema de bases de datos. La comunicaci\u00f3n entre el navegador web y el servidor ser\u00e1 m\u00e1s compleja, ya que, adem\u00e1s de consultar contenidos, se podr\u00e1n realizar potencialmente operaciones de creaci\u00f3n, modificaci\u00f3n, y eliminaci\u00f3n de datos.</p> <p>Una aplicaci\u00f3n Web es una herramienta software, formada por p\u00e1ginas web din\u00e1micas (aunque tambi\u00e9n puede contener documentos web est\u00e1ticos), basada en tecnolog\u00edas web que la dotan de un car\u00e1cter din\u00e1mico (interact\u00faan con un sistema remoto) haciendo uso de servicios web (basados en la arquitectura TCP/IP), y que proporcionan al usuario un servicio o conjunto de servicios. Ser\u00eda lo m\u00e1s parecido a una aplicaci\u00f3n nativa o de escritorio, pero ejecutada en un navegador web. El hecho de ejecutarse en un navegador web las independiza del sistema operativo en el que se ejecutan, pero tambi\u00e9n presentan determinadas limitaciones debido a esta independencia.</p> <p>En este caso, un navegador web NO es capaz de representar la p\u00e1gina web en una m\u00e1quina local sin un servidor web adicional y el resto de componentes que acompa\u00f1an a esta arquitectura, como s\u00ed era el caso de una p\u00e1gina web est\u00e1tica.</p> <p>Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas:</p> <p>a) Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos.</p> <p>b) Utilizar servicios REST de terceros invocados desde JS.</p> Diferencia gr\u00e1fica entre p\u00e1gina est\u00e1tica y p\u00e1gina din\u00e1mica"},{"location":"ut01/ut0104/","title":"1.4. Modelos de programaci\u00f3n","text":"<p>Cuando hablamos de programaci\u00f3n en entorno cliente/servidor hablamos tambi\u00e9n de aplicaciones web, formadas por p\u00e1ginas web din\u00e1micas, con lo que esto implica una arquitectura web m\u00e1s compleja que la necesaria para un sitio web constituido \u00fanicamente por p\u00e1ginas web est\u00e1ticas.</p> <p>Seg\u00fan diferentes autores, los modelos presentados en este documento caen bajo la categor\u00eda de arquitecturas web. En el presente documento los consideraremos modelos de programaci\u00f3n, atendiendo a la forma en que est\u00e1n organizados y distribuidos los diferentes ficheros que contienen la l\u00f3gica de negocio de la aplicaci\u00f3n web.</p> <p>Dicho esto, actualmente encontramos dos modelos de programaci\u00f3n principales, que son los que se detallan a continuaci\u00f3n.</p>"},{"location":"ut01/ut0104/#1-modelo-vista-controlador","title":"1. Modelo-Vista-Controlador","text":"<p>Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede v\u00eda el controlador.</li> <li>Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interact\u00faa con la vista y realiza nuevas peticiones al controlador.</li> <li>Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> </ul> Modelo-Vista-Controlador (MVC) <p>Es muy importante destacar que, en este modelo, es el servidor el que lleva el peso principal tanto del procesado de la informaci\u00f3n como de su representaci\u00f3n. El cliente web, a grosso modo, se dedicar\u00e1 a enviar las peticiones al servidor, recibir la respuesta y representarla en la pantalla del usuario. La p\u00e1gina web representada (c\u00f3digo HTML, JavaScript, etc.) se habr\u00e1 predeterminado en el lado servidor.</p> <p>IMPORTANTE : con este modelo, cada petici\u00f3n del cliente al servidor implicar\u00e1 un refresco de la informaci\u00f3n que se visualiza en la pantalla, aunque su apariencia haya cambiado poco de una petici\u00f3n a la siguiente. Esto implica que se vuelvan a descargar todos los datos y ficheros que no se mantengan en la cach\u00e9 del navegador, con lo que los tiempos de respuesta ser\u00e1n mayores que si no tuvi\u00e9semos que descargar de nuevo determinada informaci\u00f3n. El usuario final apreciar\u00e1 que, por un intervalo corto de tiempo, todos los elementos de la pantalla desaparecen y despu\u00e9s se conforma de nuevo la interfaz de usuario. En este caso, se dice que la aplicaci\u00f3n no es reactiva (se realiza un refresco de toda la pantalla, aunque no se necesite).</p> <p>A este modelo de programaci\u00f3n MVC se ajustar\u00e1 el primer proyecto que realizaremos durante este curso, y la primera parte del segundo proyecto.</p> <p>Mediante este modelo se han desarrollado multitud de plataformas y aplicaciones web, aunque la tendencia es, cada vez m\u00e1s, desarrollar aplicaciones basadas en servicios REST.</p>"},{"location":"ut01/ut0104/#2-aplicaciones-basadas-en-servicios-rest","title":"2. Aplicaciones basadas en servicios REST","text":"<p>En este tipo de aplicaciones, se delega la interacci\u00f3n con el usuario (si es que existe), en aplicaciones que se descargan y/o instalan en el lado cliente (ya sea aplicaciones de escritorio, aplicaciones m\u00f3viles, o aplicaciones web). El servidor se encarga de implementar la l\u00f3gica de negocio, gestionar los datos, y enviar al cliente solo la parte de la informaci\u00f3n solicitada, normalmente en formato JSON.</p> Esquema de funcionamiento de servicios REST <p>Se llama API al conjunto de servicios web a trav\u00e9s de los cuales los clientes interact\u00faan con el servidor. Cada uno de estos servicios web se identifican por un endpoint (URL en el lado servidor), entre otros par\u00e1metros. Estos conceptos se revisar\u00e1n con m\u00e1s detenimiento en la segunda fase del segundo proyecto que se desarrollar\u00e1 durante el curso.</p> <p>Es importante notar que, a diferencia del modelo MVC, cada vez que se realice una petici\u00f3n al servidor no se refrescar\u00e1 la p\u00e1gina web por completo. La arquitectura web pemitir\u00e1 que solo se actualice una parte de la interfaz de usuario, con lo que el usuario final no experimentar\u00e1 la desaparici\u00f3n de la interfaz transitoriamente.</p> Diferencia entre ciclo de vida tradicional de una p\u00e1gina y el ciclo de vida de la arquitectura SPA <p>Este comportamiento asemeja m\u00e1s una aplicaci\u00f3n web a una aplicaci\u00f3n m\u00f3vil ( la idea general es que no instalamos una app m\u00f3vil cada vez que realizamos una acci\u00f3n, sino que solo se instala una vez ).</p> <p>Un ejemplo de este tipo de aplicaciones son las SPA ( Single Page Application ). En una SPA solo existe un fichero HTML, muy simple, y otro u otros ficheros JavaScript que se encargan de cambiar la interfaz de usuario con cada petici\u00f3n HTTP al servidor. Por tanto, la aplicaci\u00f3n se descarga una sola vez (se podr\u00eda decir que se instala en el navegador) y a partir de ah\u00ed solo se intercambian ficheros JSON con el servidor, que contienen los datos a manejar por el cliente. De esta forma, se aligera la parte visual del back-end, y cada cliente (ya sea una aplicaci\u00f3n web, m\u00f3vil, de escritorio...) tendr\u00e1 la responsabilidad de representarla en la pantalla seg\u00fan sus propias caracter\u00edsticas.</p> Modelo Renderizado SPA <p>Es de destacar tambi\u00e9n que los sistemas que implementan servicios REST no solo alimentan aplicaciones cliente, sino que tambi\u00e9n pueden interactuar con otros sistemas. \u00c9ste podr\u00e1 ser el caso de aplicaciones h\u00edbridas, que requieren de servicios externos para realizar determinadas tareas (env\u00edo de e-mails, servicios de IA, etc).</p>"},{"location":"ut01/ut0105/","title":"1.5. Decisiones de dise\u00f1o","text":"\u00bfQu\u00e9 tama\u00f1o tiene el proyecto? <p>El tama\u00f1o del proyecto influye directamente en la complejidad de la arquitectura, la elecci\u00f3n de herramientas y la planificaci\u00f3n de recursos. Para proyectos peque\u00f1os, una soluci\u00f3n simple y directa podr\u00eda ser suficiente, mientras que los proyectos m\u00e1s grandes requerir\u00e1n una arquitectura m\u00e1s escalable, pruebas m\u00e1s rigurosas y una gesti\u00f3n m\u00e1s detallada del c\u00f3digo.</p> \u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo? <p>Usar un lenguaje que ya conoces puede acelerar el desarrollo, ya que te sentir\u00e1s m\u00e1s c\u00f3modo y eficiente. Sin embargo, si el proyecto requiere caracter\u00edsticas espec\u00edficas que se manejan mejor con otro lenguaje, o si aprender uno nuevo te abre mejores oportunidades a largo plazo, puede valer la pena el esfuerzo. Debes considerar el tiempo de aprendizaje y c\u00f3mo impacta en el cronograma del proyecto.</p> \u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales? <p>Las herramientas de c\u00f3digo abierto suelen ser m\u00e1s econ\u00f3micas y flexibles, pero pueden requerir m\u00e1s soporte y mantenimiento por tu parte. Las soluciones comerciales pueden ofrecer m\u00e1s soporte y caracter\u00edsticas avanzadas, pero suelen tener un coste asociado. Deber\u00e1s evaluar el presupuesto disponible y las necesidades de soporte y funcionalidad del proyecto.</p> \u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores? <p>Si trabajas solo, puedes tomar decisiones m\u00e1s flexibles y r\u00e1pidas, adaptadas a tus preferencias y habilidades. Si trabajas en un equipo, la colaboraci\u00f3n y la coherencia en el c\u00f3digo se vuelven m\u00e1s importantes, por lo que deber\u00e1s considerar herramientas de control de versiones, gu\u00edas de estilo de c\u00f3digo, y plataformas de comunicaci\u00f3n y gesti\u00f3n de proyectos.</p> \u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario? <p>Si ya tienes servidores o gestores de bases de datos disponibles, deber\u00e1s asegurarte de que las tecnolog\u00edas elegidas sean compatibles con ellos. Si tienes libertad para elegir, podr\u00e1s seleccionar las tecnolog\u00edas que mejor se adapten a las necesidades del proyecto en t\u00e9rminos de rendimiento, escalabilidad y facilidad de uso.</p> \u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle? <p>La licencia que elijas afectar\u00e1 c\u00f3mo otros pueden usar, modificar y distribuir tu software. Si planeas mantener el control y limitar el uso comercial, una licencia m\u00e1s restrictiva como GPL puede ser adecuada. Si prefieres permitir un uso m\u00e1s libre, una licencia como MIT o Apache podr\u00eda ser mejor. Tambi\u00e9n debes considerar c\u00f3mo las licencias de las herramientas y librer\u00edas que utilices impactan en tu proyecto.</p> <p>Cada una de estas preguntas influir\u00e1 en c\u00f3mo abordas el desarrollo de tu aplicaci\u00f3n web, y reflexionar sobre ellas te ayudar\u00e1 a tomar decisiones m\u00e1s informadas y coherentes con tus objetivos.</p>"},{"location":"ut01/ut0106/","title":"1.6. Ejecuci\u00f3n del c\u00f3digo","text":"<p>Durante el primer curso del ciclo habr\u00e9is podido desarrollar diferentes programas consistentes en ficheros que a su vez contienen l\u00edneas de c\u00f3digo en un lenguaje espec\u00edfico (Java, en este caso). \u00bfQu\u00e9 se necesita para poder transformar este texto en instrucciones espec\u00edficas para el sistema operativo donde se ejecuta dicho c\u00f3digo? En este punto es donde entra en juego el concepto de  entorno de ejecuci\u00f3n .</p> <p>Los elementos de un entorno de ejecuci\u00f3n var\u00edan dependiendo del lenguaje de programaci\u00f3n que se est\u00e9 utilizando. Por lo general siempre es necesario un compilador, int\u00e9rprete o m\u00e1quina virtual y un conjunto de librer\u00edas propias del lenguaje. Pero puede constar de m\u00e1s elementos como un depurador o un bucle de eventos.</p> <p>Dicho esto, \u00bfcu\u00e1les son los mecanismos para la ejecuci\u00f3n del c\u00f3digo en el \u00e1mbito de las aplicaciones web? Para contestar a esto, primero deber\u00edamos diferenciar los diferentes lenguajes de programaci\u00f3n que se pueden utilizar, y en qu\u00e9 \u00e1mbitos (cliente o servidor). Es por ello que, el los siguientes subapartados, vamos a revisar primero algunos de los lenguajes de programaci\u00f3n m\u00e1s relevantes en el \u00e1mbito web, y a continuaci\u00f3n se detallar\u00e1 c\u00f3mo se ejecutan en el lado servidor (PHP, Python, y JavaScript) y en el cliente (JavaScript).</p>"},{"location":"ut01/ut0106/#1-lenguajes-de-programacion","title":"1. Lenguajes de programaci\u00f3n","text":"<p>Se enumeran a continuaci\u00f3n los lenguajes de programaci\u00f3n m\u00e1s populares, en los diferentes entornos:</p>"},{"location":"ut01/ut0106/#entorno-cliente","title":"Entorno Cliente","text":"Lenguaje DESCRIPCI\u00d3N JavaScript Es el lenguaje por excelencia en el desarrollo de entorno cliente. Existe un desarrollo continuo de frameworks y librer\u00edas alrededor de este lenguaje, ya no solo en la programaci\u00f3n cliente, sino en el lado servidor (como se ha visto anteriormente). Los principales frameworks para el desarrollo de aplicaciones reactivas basados en JavaScript son: React.js, Vue.js, Angular y Svelte. TypeScript TypeScript es un lenguaje de programaci\u00f3n libre y de c\u00f3digo abierto desarrollado y mantenido por Microsoft. Es un superconjunto de JavaScript, que esencialmente a\u00f1ade tipos est\u00e1ticos y objetos basados en clases. Los principales frameworks de programaci\u00f3n cliente reactivos (mencionados anteriormente) soportan el desarrollo tanto en JavaScript como TypeScript. Python Aunque much\u00edsimo menos popular, tambi\u00e9n existe la posibilidad de ejecutar Python en el navegador, como se ilustra con el proyectoPyScript."},{"location":"ut01/ut0106/#entorno-servidor","title":"Entorno Servidor","text":"Lenguaje DESCRIPCI\u00d3N PHP PHP es un lenguaje de programaci\u00f3n de uso general que se adaptaespecialmente al desarrollo web. Su \u00faltima versi\u00f3n es PHP7. Este lenguaje se puede utilizar sin ning\u00fan tipo de framework para desarrollar aplicaciones web, aunque tambi\u00e9n existen frameworks muy populares como CodeIgniter, Laravel, Symfony... Python Python es un lenguaje de alto nivel de programaci\u00f3n interpretado cuya filosof\u00eda es hacer hincapi\u00e9 en la legibilidad de su c\u00f3digo. Para programaci\u00f3n web existen varios frameworks, aunque los m\u00e1s destacados son Django y Flask. Cabe destacar que este lenguaje se utiliza en multitud de \u00e1mbitos m\u00e1s, entre ellos el de la ciberseguridad y el de la inteligencia artificial. JavaScript JavaScript es un lenguaje de programaci\u00f3n interpretado, dialecto del est\u00e1ndar ECMAScript. Aunque surgi\u00f3 para desarrollo en entorno cliente, se ha extendido tanto que han surgido numerosos frameworks en entorno servidor, siendo Nodejs el m\u00e1s popular. Ruby Ruby es un lenguaje de programaci\u00f3n interpretado y orientado a objetos. Ruby on Rails es el framework de programaci\u00f3n web basado en Ruby m\u00e1s conocido. Java Java es un lenguaje de programaci\u00f3n r\u00e1pido, seguro y fiable para codificar todo, desde aplicaciones m\u00f3viles y software empresarial hasta aplicaciones de macrodatos y tecnolog\u00edas del lado del servidor. Como frameworks web destacan Spring y Hibernate."},{"location":"ut01/ut0106/#php","title":"PHP","text":"<ul> <li>Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas.</li> <li>En un principio, lenguaje no tipado.</li> <li>Actualmente se encuentra en la versi\u00f3n 8; se recomienda al menos utilizar una versi\u00f3n superior a la 7.0.</li> <li>C\u00f3digo embebido en el HTML.</li> <li>Instrucciones entre etiquetas <code>&lt;?php</code>  y  <code>?&gt;</code>  ; para generar c\u00f3digo dentro de PHP, podemos usar la instrucci\u00f3n <code>echo</code>.</li> <li>Multitud de librer\u00edas y frameworks (Laravel, Symfony, Codeigniter, Zend, ...).</li> </ul> <p>Su documentaci\u00f3n es bastante completa:   https://www.php.net/manual/es/index.php.</p> Mapa mental de resumen de elementos del lenguaje PHP. <p>Durante las siguientes unidades vamos a estudiar PHP en profundidad.</p> <p>Por tanto, vemos que existe gran variedad de lenguajes de programaci\u00f3n, tanto en cliente como servidor, y es un \u00e1mbito en continua evoluci\u00f3n.</p> <p>\u00bfCu\u00e1l es el mejor lenguaje de programaci\u00f3n? \u00c9sta es la eterna pregunta que escuchar\u00e1s a lo largo de tu carrera como programador/a, y no hay una f\u00e1cil respuesta. Quiz\u00e1s la respuesta m\u00e1s adecuada sea la de: cada uno de ellos es bueno para una cosa, y lo mejor es tener una mentalidad abierta, no atarse a ninguno de ellos, y tener las bases de la programaci\u00f3n claras.</p> <p>Esta reflexi\u00f3n es de especial inter\u00e9s si desarrollas tus propios proyectos: la elecci\u00f3n de un lenguaje (o framework) u otro te puede conllevar al \u00e9xito o fracaso, que un proyecto te resulte rentable o no, optimizaci\u00f3n de costes o no... Por tanto, mant\u00e9n una mente abierta y piensa que los lenguajes y tecnolog\u00edas tienen car\u00e1cter pasajero, est\u00e1n para ser utilizados y no para casarse con ellos.</p>"},{"location":"ut01/ut0106/#12-ejecucion","title":"1.2. Ejecuci\u00f3n","text":"<p>La l\u00f3gica de nuestra aplicaci\u00f3n se distribuye entre el cliente y el servidor, cada uno de ellos cumple su funci\u00f3n espec\u00edfica. Con lo cual, la plataforma de ejecuci\u00f3n en estos dos \u00e1mbitos ha de ser diferente:</p> <ul> <li>Lado servidor: la l\u00f3gica programada se ejecuta en el sistema operativo en el cual reside el c\u00f3digo.</li> <li>Lado cliente: la l\u00f3gica se ejecuta en el navegador web.</li> </ul> <p>Adem\u00e1s del \u00e1mbito en que se ejecuta el c\u00f3digo, tambi\u00e9n hay que particularizar el mecanismo de ejecuci\u00f3n al lenguaje espec\u00edfico utilizado (como se ha mencionado en la discusi\u00f3n inicial de este apartado, sobre el  entorno de ejecuci\u00f3n ).</p> <p>A continuaci\u00f3n se detalla c\u00f3mo se dispara la ejecuci\u00f3n del c\u00f3digo programado, ya sea en el lado servidor ante una petici\u00f3n HTTP que proviene del cliente web, o en el propio navegador web ante una acci\u00f3n del usuario.</p> <p>Antes de ver estos ejemplos, cabe mencionar que el prop\u00f3sito de un servidor web es recibir peticiones HTTP y enviar la respuesta a dichas peticiones. Es posible que estas respuestas las proporcione el propio servidor web, o haya de recurrir a extensiones (o m\u00f3dulos) propias, o servidores de aplicaciones externos que ejecuten el c\u00f3digo y devuelvan la respuesta al servidor web (que la utilizar\u00e1 para enviar la respuesta final al cliente). Todo esto se detallar\u00e1 exhaustivamente en el m\u00f3dulo de  Despliegue de Aplicaciones Web .</p> <p>En los siguientes ejemplos se presupone que el entorno de ejecuci\u00f3n es el de producci\u00f3n (el que utilizan los usuarios finales). En el entorno de desarrollo se suelen emplear servidores web m\u00e1s ligeros que los propios frameworks de desarrollo proporcionan.</p>"},{"location":"ut01/ut0106/#php_1","title":"PHP","text":"<p>Dependiendo del servidor web, este lenguaje se puede ejecutar de los siguientes modos:</p> <ul> <li>Apache:</li> <li>Activaci\u00f3n de m\u00f3dulo interno (mod_php)</li> <li>Mediante servidor de aplicaciones (phpFPM)</li> <li>Nginx: solo existe la posibilidad de delegar la tarea de ejecuci\u00f3n del c\u00f3digo a un servidor de aplicaciones, phpFPM en este caso.</li> </ul>"},{"location":"ut01/ut0106/#python","title":"Python","text":"<p>Al igual que en el caso anterior, depender\u00e1 del servidor web que estemos utilizando:</p> <ul> <li>Apache:</li> <li>Activaci\u00f3n de m\u00f3dulo interno (libapache2-mod-wsgi-py3, para python3)</li> <li>Mediante servidor de aplicaciones (gunicorn)</li> <li>Nginx: solo existe la posibilidad de delegar la tarea de ejecuci\u00f3n del c\u00f3digo a un servidor de aplicaciones (gunicorn).</li> </ul>"},{"location":"ut01/ut0106/#javascript","title":"JavaScript","text":"<p>Como se ha mencionado anteriormente, este lenguaje, a d\u00eda de hoy, se puede ejecutar tanto en el lado cliente como en el lado servidor:</p> <ul> <li>En cliente (navegador web): los diferentes navegadores actuales incorporan un entorno de ejecuci\u00f3n mediante el cual es posible ejecutar c\u00f3digo JavaScript, no existe comunicaci\u00f3n directa con el sistema operativo. La ejecuci\u00f3n del c\u00f3digo suele responder a las acciones del usuario, y el navegador proporciona todos los recursos para que se pueda ejecutar.</li> <li>En servidor: para poder ejecutar c\u00f3digo JavaScript directamente en un sistema operativo, se ha de instalar previamente el entorno de ejecuci\u00f3n de Node.js. Este framework incorpora su propio servidor web para ser utilizado en un servidor de producci\u00f3n, aunque es posible utilizar Apache o Nginx como reverse proxy.</li> </ul>"},{"location":"ut01/ut0106/#13-integracion-con-los-lenguajes-de-marcas","title":"1.3. Integraci\u00f3n con los lenguajes de marcas","text":"<p>Durante el primer curso hemos aprendido sobre los lenguajes de marcas (HTML, entre otros) y programaci\u00f3n de prop\u00f3sito general. Cuestiones:</p> <ul> <li>\u00bfHay alguna relaci\u00f3n entre estos dos tipos de lenguajes?</li> <li>\u00bfPara qu\u00e9 querr\u00edamos relacionarlos en una aplicaci\u00f3n web?</li> </ul> <p>Una posible respuesta ser\u00eda: cada tipo tiene un objetivo diferente, y la combinaci\u00f3n de ambos nos proporciona la posibilidad de crear  p\u00e1ginas web din\u00e1micas .</p> <p>Tomemos como ejemplo la siguiente p\u00e1gina web:</p> Cada uno de los productos se visualiza en el HTML seg\u00fan el siguiente c\u00f3digo HTML. <p>\u00bfCrees que el programador web ha creado tantos bloques como productos se han recuperado? \u00bfSe puede saber a priori cu\u00e1ntos productos va a devolver la b\u00fasqueda?</p> <p>La respuesta a las dos preguntas es: no. Por tanto, la p\u00e1gina se ha de comportar de forma din\u00e1mica, en alg\u00fan momento se ha de programar la siguiente l\u00f3gica: por cada producto a mostrar crea un bloque con estas caracter\u00edsticas determinadas, sea cual sea el n\u00famero de productos a visualizar en la pantalla.</p> <p>Es aqu\u00ed donde entra la magia del binomio \"lenguaje de programaci\u00f3n\" + \"lenguaje de marcas\", mediante el cual vamos a poder a\u00f1adir sentencias de un lenguaje de programaci\u00f3n a c\u00f3digo HTML, aport\u00e1ndole un car\u00e1cter din\u00e1mico al documento web.</p> <p>Esta combinaci\u00f3n se producir\u00e1 en el lado servidor o en el lado cliente, dependiendo de si:</p> <ul> <li>Es una aplicaci\u00f3n web basada en MVC (Modelo-Vista-Controlador): la combinaci\u00f3n de los dos lenguajes se llevar\u00e1 a cabo en el lado  servidor . El lenguaje de programaci\u00f3n ser\u00e1 el empleado en el lado servidor (PHP o Python), y el documento web ser\u00e1 enviado al lado cliente desde el servidor.</li> <li>Es una aplicaci\u00f3n web basada en  servicios REST : en este caso, la combinaci\u00f3n de los dos lenguajes se llevar\u00e1 a cabo en el lado  cliente . El lenguaje de programaci\u00f3n ser\u00e1 el empleado en el lado cliente, JavaScript en nuestro caso (tambi\u00e9n podr\u00eda ser TypeScript). El cliente consumir\u00e1 los servicios web del servidor e intercambiar\u00e1n informaci\u00f3n en formato JSON. El cliente ser\u00e1 el encargado de modificar el HTML de forma din\u00e1mica.</li> </ul> <p>Veamos un ejemplo con una lista simple de productos, para el caso de MVC. En el ejemplo de la izquierda vemos que hemos de crear tantos bloques de productos como productos a representar; en el ejemplo de la derecha, se ha introducido un bucle mediante PHP que har\u00e1 que, por cada producto del array de productos, se visualice un bloque con sus datos correspondientes:</p> <p>En este caso, vemos que se ha introducido c\u00f3digo PHP con un etiquetado especial, que indica que ese bloque del fichero de marcas contiene c\u00f3digo PHP.</p> <p>A continuaci\u00f3n se muestra otro ejemplo, en este caso de integraci\u00f3n de un lenguaje de programaci\u00f3n del lado cliente con el lenguaje de marcas HTML. Se trata de un componente programado mediante el framework Vue.js:</p> <p>En este caso tambi\u00e9n vemos que existen atributos con s\u00edmbolos como \":\" o \"@\" en el etiquetado que apuntan a variables del c\u00f3digo JavaScript.</p> <p>Estos ejemplos solo ejemplifican la integraci\u00f3n de los lenguajes de marcas con un lenguaje de programaci\u00f3n, sin \u00e1nimo de profundicar m\u00e1s en este momento del curso.</p>"},{"location":"ut01/ut0106/#2-servidor-web","title":"2. Servidor web","text":"<p>Software que recibe peticiones HTTP (GET, POST, DELETE, ...). Devuelve el recurso solicitado (HTML, CSS, JS, JSON, im\u00e1genes, etc...)</p> <p>El producto m\u00e1s implantando es Apache Web Server (https://httpd.apache.org), creado en 1995.</p> <ul> <li>Software libre y multiplataforma.</li> <li>Sistema de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl.</li> <li>Utiliza el archivo <code>.htaccess</code> para su configuraci\u00f3n.</li> </ul> <p>En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx (https://www.nginx.com). Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache.</p> <p>En este enlace podemos observar una comparativa de servidores web: https://w3techs.com/technologies/history_overview/web_server/ms/q.</p>"},{"location":"ut01/ut0106/#3-servidor-de-aplicaciones","title":"3. Servidor de Aplicaciones","text":"<p>Software que ofrece servicios adicionales a los de un servidor web:</p> <ul> <li>Clustering.</li> <li>Balanceo de carga.</li> <li>Tolerancia a fallos.</li> </ul> <p>Tomcat (http://tomcat.apache.org/) es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java. Contiene un contenedor Web Java que interpreta Servlets y JSP.</p> <p>Estudio de servidores web y servidores de aplicaciones</p> <p>Tanto los servidores web como los servidores de aplicaciones los estudiaremos en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\".</p>"},{"location":"ut01/ut0107/","title":"1.7. Herramientas","text":"<p>El ecosistema de herramientas en el entorno web es amplio, rico y en constante evoluci\u00f3n. Es por ello que hacer una lista exhaustiva se hace dif\u00edcil, y puede quedar obsoleta en unos pocos meses. En este enlace se propone una muestra de estas herramientas.</p> <p>Algunas de estas herramientas te resultar\u00e1n familiares, otras las utilizar\u00e1s en tu futura vida profesional o no (dependiendo del campo en que te especialices), y otras muchas ser\u00e1n sustituidas o dejar\u00e1n de ser usadas.</p> <p>Durante este curso podr\u00e1s utilizar el IDE o editor de texto de tu elecci\u00f3n. Visual Studio Code (para cualquier lenguaje de programaci\u00f3n) o PyCharm (para Python) son la opci\u00f3n recomendada.</p> <p>Como fuentes de consulta de problemas espec\u00edficos, StackOverflow es una de las plataformas m\u00e1s utilizadas.</p> <p>Finalmente, como base para lenguajes de programaci\u00f3n y de marcado, o como repaso del primer curso del ciclo, te puedes apoyar en los manuales de W3CSchools.</p>"},{"location":"ut01/ut0108/","title":"1.8. Tecnolog\u00edas","text":"<p>Al igual que en las herramientas de programaci\u00f3n, el ecosistema de tecnolog\u00edas alrededor de las aplicaciones web tambi\u00e9n es muy variado, rico, y en constante evoluci\u00f3n. Continuamente surgen nuevas versiones de las tecnolog\u00edas existentes (que rompen con las anteriores), o tecnolog\u00edas/frameworks/librer\u00edas novedosas a los que se adhieren multitud de profesionales. Todo ello hace que la curva de aprendizaje inicial en el \u00e1mbito de las aplicaciones web sea m\u00e1s acusada en un principio.</p> <p>A continuaci\u00f3n se presentan algunas de estas tecnolog\u00edas, agrupadas por tipolog\u00eda.</p>"},{"location":"ut01/ut0108/#1-virtualizacion","title":"1. Virtualizaci\u00f3n","text":""},{"location":"ut01/ut0108/#2-servidores-web","title":"2. Servidores web","text":""},{"location":"ut01/ut0108/#3-sevidores-de-aplicaciones","title":"3. Sevidores de aplicaciones","text":""},{"location":"ut01/ut0108/#4-contenedores-servlets","title":"4. Contenedores servlets","text":""},{"location":"ut01/ut0108/#5-gestores-de-bbdd","title":"5. Gestores de BBDD","text":""},{"location":"ut01/ut0108/#6-frameworks-servidor","title":"6. Frameworks servidor","text":"<p>Frameworks backend m\u00e1s populares.</p>"},{"location":"ut01/ut0108/#7-frameworks-cliente","title":"7. Frameworks cliente","text":"<p>Frameworks frontend m\u00e1s populares.</p> <p>Las tecnolog\u00edas empleadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son:</p> perfil herramienta tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript /td&gt;  Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp <p>Perfil full-stack</p> <p>En las ofertas de trabajo, cuando hacen referencia a un Full-stack developer, est\u00e1n buscando un perfil que domina tanto el front-end como el back-end.</p>"},{"location":"ut01/ut0109/","title":"1.9. Navegadores","text":"<p>Dado que el entorno de ejecuci\u00f3n en el lado cliente es el navegador web, se ha dedicado un apartado exclusivamente para caracterizar este tipo de software.</p> <p>Los navegadores representan un software complejo, en constante evoluci\u00f3n, y en el que las diferentes opciones del mercado est\u00e1n respaldadas por motivaciones diversas (detr\u00e1s de algunos existe una empresa multinacional, otros est\u00e1n respaldados por una comunidad de desarrolladores, etc.), as\u00ed como diferentes principios de desarrollo.</p> <p>En la siguiente tabla se resumen algunas de las caracter\u00edsticas que diferencia a diferentes navegadores:</p> Criterio Comparativa Etiquetado HTML HTML Reference - Browser Support Etiquetado CSS CSS Browser Support Reference Rendimiento Browser performance Velocidad The Fastest Browser Options in 2022 Seguridad Navegadores seguros: comparativa de Chrome, Firefox, Edge y otros"},{"location":"ut01/ut0109/#2-especificaciones-oficiales","title":"2. Especificaciones oficiales","text":"<p>Dada la gran cantidad de tecnolog\u00edas y navegadores utilizados en el lado cliente, existe la voluntad de estandarizar determinados aspectos que gobiernan estas tecnolog\u00edas, en forma de especificaciones emitidas por organismos reconocidos como oficiales. Se trata de que los diferentes desarrolladores tengan suficiente libertad para ser competitivos, pero sin que el panorama se disperse excesivamente.</p> <p>A continuaci\u00f3n se citan varios de estos est\u00e1ndares:</p> <ul> <li>HTML5: del W3C (Consorcio de la World Wide Web)</li> <li>CSS: tambi\u00e9n del W3C</li> <li>ECMAScript: aplicado a JavaScript, y desarrollado por ECMA International (organizaci\u00f3n internacional basada en membres\u00edas de est\u00e1ndares para la comunicaci\u00f3n y la informaci\u00f3n)</li> </ul> <p>En este art\u00edculo se discute la necesidad de los est\u00e1ndares web, como visi\u00f3n general.</p>"},{"location":"ut01/ut0110/","title":"1.10. Puesta en marcha","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de prepararlo con las herramientas comentadas.</p> <p>Vamos a proponer dos opciones; la opci\u00f3n 1 ser\u00e1 la instalaci\u00f3n del paquete XAMPP para trabajar directamente en el equipo host; la opci\u00f3n 2 ser\u00e1 crear un contenedor con Docker.</p> <p>En realidad podr\u00edamos preparar el entorno de diferentes formas (directamente instalando en la m\u00e1quina local con el paquete XAMPP, mediante m\u00e1quina virtual con VirtualBox...) pero la utilizaci\u00f3n de Docker se ve justificada por su f\u00e1cil utilizaci\u00f3n, la profundizaci\u00f3n en esta tecnolog\u00eda se ver\u00e1 en otros m\u00f3dulos de este curso (Despliegue de aplicaciones web) y su extensa utilizaci\u00f3n en la industria (en todo tipo de entornos).</p> <p>XAMPP vs Docker en Windows</p> <p>Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajar con Windows como sistema operativo.</p> <p>Versiones</p> <p>A lo largo del curso vamos a usar <code>PHP 8.0</code>.</p>"},{"location":"ut01/ut0110/#1-opcion-1-xampp","title":"1. Opci\u00f3n 1: XAMPP","text":"<p>XAMPP ( https://www.apachefriends.org/es/index.html) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas:</p> <ul> <li>X para el sistema operativo (de ah\u00ed que se conozca tambi\u00e9n como LAMP o WAMP).</li> <li>A para Apache.</li> <li>M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web.</li> <li>P para PHP.</li> <li>P para Perl.</li> </ul> <p>Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha.</p>"},{"location":"ut01/ut0110/#2-opcion-2-docker","title":"2. Opci\u00f3n 2: Docker","text":"<p>Docker (https://www.docker.com) es un gestor de contenedores; considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo.</p> <p>El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales.</p> <p>As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker.</p> <p>Instalaci\u00f3n</p> <code>&lt;div style=\"text-align:center;\"&gt;</code><code>&lt;/div&gt;</code>"},{"location":"ut01/ut0110/#1-actualizar-el-sistema","title":"1. Actualizar el Sistema","text":"<p>Antes de comenzar, es recomendable actualizar los paquetes existentes en tu sistema:</p> <pre><code>``bash         sudo apt update         sudo apt upgrade -y         ``\n\n#### 2. Instalar las Dependencias\n    Instala las dependencias necesarias para Docker:\n\n``bash         sudo apt install -y ca-certificates curl gnupg lsb-release         ``\n\n#### 3. Agregar la Clave GPG de Docker\n    Agrega la clave GPG oficial de Docker a tu sistema:\n\n``bash         sudo mkdir -m 0755 -p /etc/apt/keyrings         curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg         ``\n\n#### 4. Agregar el Repositorio de Docker\n    A\u00f1ade el repositorio de Docker a tus fuentes de APT:\n\n``bash         echo \\           \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\           $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null         ``\n\n#### 5. Actualizar el \u00cdndice de Paquetes\n    Actualiza el \u00edndice de paquetes de APT nuevamente para incluir el nuevo repositorio:\n\n``bash         sudo apt update         ``\n\n#### 6. Instalar Docker Engine, Docker CLI y Containerd\n\nAhora, instala Docker usando el comando apt:\n\n``bash         sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin         ``\n\n#### 7. Verificar la Instalaci\u00f3n de Docker\n\nPara verificar que Docker se haya instalado correctamente, ejecuta:\n\n``bash         sudo docker --version         ``\n\nDeber\u00edas ver la versi\u00f3n de Docker instalada.\n\n#### 8. Permitir Ejecuci\u00f3n de Docker sin Sudo (Opcional)\n\nSi quieres ejecutar Docker sin usar`sudo`, agrega tu usuario al grupo `docker`:\n\n``bash         sudo usermod -aG docker $USER         ``\n\nDespu\u00e9s de ejecutar este comando, cierra la sesi\u00f3n y vuelve a iniciarla para que los cambios tengan efecto.\n\n#### 9. Probar Docker\n\nVerifica que Docker est\u00e9 funcionando correctamente ejecutando un contenedor de prueba:\n\n``bash         docker run hello-world         ``\n\nEste comando descargar\u00e1 una imagen de prueba y ejecutar\u00e1 un contenedor que deber\u00eda mostrar un mensaje de confirmaci\u00f3n en la terminal.\n\n#### 10. Instalar Docker Desktop en Ubuntu (Opcional)\n\nSi deseas usar Docker Desktop en Ubuntu, sigue estos pasos adicionales:\n\n10.1)**Descargar Docker Desktop para Linux**: Visita la p\u00e1gina de descarga de Docker Desktop y descarga la versi\u00f3n para Linux.\n\n10.2)**Instalar Docker Desktop**: Descomprime el archivo descargado y ejecuta el instalador:\n\n``bash            sudo apt-get install ./docker-desktop-&lt;version&gt;-&lt;arch&gt;.deb            ``\n\n10.3)**Ejecutar Docker Desktop**: Inicia Docker Desktop desde tu entorno gr\u00e1fico o ejecutando `docker-desktop` en la terminal.\n\n10.4)**Configurar Docker Desktop**: Cuando se inicie Docker Desktop por primera vez, puedes configurarlo para usar WSL 2 o bien ejecutar contenedores nativos en Linux.\n\n#### 11. Configurar Docker Desktop (Opcional)\n\nSi deseas hacer configuraciones adicionales como la cantidad de recursos que Docker puede usar, puedes hacerlo desde la interfaz gr\u00e1fica de Docker Desktop.\n\nCon estos pasos, deber\u00edas tener Docker y Docker Desktop completamente instalados y listos para usar en tu sistema Ubuntu.`&lt;hr&gt;`\n\nSi a\u00fan as\u00ed no se pudiera lanzar Docker Desktop en Ubuntu, podemos instalar el**contenedor Portainer** (puedes ver c\u00f3mo funciona en el siguiente punto **docker de gesti\u00f3n de dockers Portainer**).\n\n=== \"`&lt;div style=\"text-align:center;\"&gt;`&lt;img src=\"../../img/windows.png\" alt=\"windows\" width=40 height=40 \" /&gt;`&lt;/div&gt;`\"\n    #### 1. Instalaci\u00f3n de Docker-Desktop\n    Para una instalaci\u00f3n en Windows lo ideal es instalar la aplicaci\u00f3n **Docker Desktop** ( [https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop){:target=\"_blank\"}  ) en nuestros entornos de desarrollo (el cual ya incluye en n\u00facleo de *Docker* y la herramienta *Docker Compose*).\n    Esta instalaci\u00f3n requiere de un software adicional **WSL2**, el cual es un subsistema de *Linux* dentro de *Windows*; [aqu\u00ed](https://learn.microsoft.com/es-es/windows/wsl/install){:target=\"_blank\"}  podemos consultar sus m\u00e9todos de instalaci\u00f3n.\n    Por suerte, con la misma instalaci\u00f3n de *Docker Desktop*, viene tambi\u00e9n la de *WSL* (solo deberemos tener en cuenta tener el check de instalaci\u00f3n activado).\n\nCuando termine la instalaci\u00f3n, reinicia tu m\u00e1quina.`&lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;``&lt;img src=\"../../img/ut01/dockerdesktop.png\" alt=\"dockerdesktop\" style=\"zoom:70%;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;`Interfaz programa Docker Desktop`&lt;/figcaption&gt;&lt;/figure&gt;``&lt;/div&gt;`\n\n#### 2. Verificar la instalaci\u00f3n\n    Una vez Docker est\u00e9 instalado, abre**PowerShell** o **Command Prompt** y verifica la instalaci\u00f3n:\n    ``powershell         docker --version         docker-compose --version         ``\n\n#### 3. Crear o abrir el archivo`docker-compose.yml`\n    Aseg\u00farate de tener un archivo `docker-compose.yml` en el directorio en el que vas a trabajar. Este archivo define la configuraci\u00f3n de tus servicios.\n    Ejemplo de un archivo docker-compose.yml sencillo:\n    ``yaml         version: '3'         services:           web:             image: nginx             ports:               - \"8080:80\"         ``\n\n#### 4. Levantar el contenedor usando Docker Compose\n    4.1) Abre una ventana de PowerShell, Command Prompt o Terminal (si usas WSL).`&lt;br /&gt;`\n    4.2) Navega al directorio donde se encuentra tu archivo docker-compose.yml.`&lt;br /&gt;`\n    ``powershell         cd ruta/al/directorio         ``\n    4.3) Una vez est\u00e9s en el directorio adecuado, ejecuta el siguiente comando para levantar los servicios definidos en el archivo:\n    ``powershell         docker-compose up -d         ``\n\n#### 5. Verificar que los contenedores est\u00e1n corriendo\n    Despu\u00e9s de ejecutar docker-compose up, puedes verificar que los contenedores est\u00e1n en ejecuci\u00f3n con:``powershell         docker ps         ``\n        Si todo est\u00e1 correcto, deber\u00edas ver los contenedores definidos en el archivo `docker-compose.yml` listados.`&lt;br /&gt;`\n\n#### 6. Acceso a los servicios\n    Si el archivo`docker-compose.yml` incluye servicios con puertos expuestos (como en el ejemplo de Nginx), puedes acceder a ellos desde tu navegador usando localhost y el puerto definido, por ejemplo:\n    ``powershell         http://localhost:8080         ``\n</code></pre> docker de gesti\u00f3n de dockers Portainer <p>Portainer es una forma c\u00f3moda de gestionar entornos de contenedores distribuidos.</p> <pre><code>El software se instala como un contenedor Docker y, por tanto, se ejecuta pr\u00e1cticamente en cualquier lugar. Mostramos la rutina de instalaci\u00f3n y aportamos \u00fatiles consejos.\n\n### Instalar\n\n``sh     $ sudo docker volume create portainer_data     $ sudo docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest     ``\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;``&lt;img src=\"../../img/ut01/docker_portainer1.png\" alt=\"docker_portainer1\" style=\"zoom:100%;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;`Instalaci\u00f3n del contenedor Portainer desde terminal.`&lt;/figcaption&gt;&lt;/figure&gt;``&lt;/div&gt;`\n\n### Lanzar\n\nComo otro contenedor, podremos acceder a \u00e9l mediante un navegador (Firefox, Chrome, ...) introduciendo la URL:**localhost:9443**\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;``&lt;img src=\"../../img/ut01/docker_portainer2.png\" alt=\"docker_portainer2\" style=\"zoom:80%; border: 2px solid #fff2c9;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;`Acceso a docker Portainer desde el puerto 9000.`&lt;/figcaption&gt;&lt;/figure&gt;``&lt;/div&gt;`\n\nSi muestra el siguiente texto, debemos reiniciar el contenedor del Docker Portainer:\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;``&lt;img src=\"../../img/ut01/docker_portainer3.png\" alt=\"docker_portainer3\" style=\"zoom:80%; border: 2px solid #fff2c9;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;`Pesta\u00f1a indicando reiniciar el docker Portainer.`&lt;/figcaption&gt;&lt;/figure&gt;``&lt;/div&gt;`\n\nVolvemos a acceder v\u00eda**localhost:9000**:\n\n`&lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;``&lt;img src=\"../../img/ut01/docker_portainer4.png\" alt=\"docker_portainer4\" style=\"zoom:80%; border: 2px solid #fff2c9;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;`Pesta\u00f1a de inicio de docker Portainer.`&lt;/figcaption&gt;&lt;/figure&gt;``&lt;/div&gt;`\n\n### Funciona como un docker\n\nPara ver el ID de contenedor podemos listar los contenedores:\n\n``sh     $ sudo docker ps -a     ``\n\nPara parar el contenedor:\n\n``sh     $ sudo docker stop [ID]     ``\n\nPara volver a lanzar el contenedor:\n\n``sh     $ sudo docker start [ID]     ``\n</code></pre> <p>A lo largo del curso iremos creando diferentes contenedores con los servicios necesarios, de manera que cada vez s\u00f3lo trabajemos con el software m\u00ednimo.</p> <p>Respecto a <code>Docker</code>, para escribir los apuntes hemos utilizado la version <code>20.10</code> y en Docker Compose la version <code>2.19</code>.</p> <p>Finalmente, la versi\u00f3n de <code>Docker Desktop</code> que hemos utilizado es la <code>4.0</code>.</p>"},{"location":"ut01/ut0110/#21-plantilla-servidor-web-php","title":"2.1. Plantilla Servidor Web + PHP","text":"<p>Docker se basa en el uso de im\u00e1genes para crear contenedores. Docker Compose simplifica el trabajo con m\u00faltiples contenedores, y por ello, para facilitar el arranque, nos centraremos en Docker Compose utilizando una plantilla que \u00fanicamente va a contener como servicios Apache/Nginx y PHP.</p> <p>Para ello, vamos crear una carpeta de nombre <code>proyecto1</code>, y dentro de este el archivo <code>docker-compose.yaml</code> con:</p> <p>proyecto1 con distintos servidores en <code>docker-compose.yml</code></p> Apache y PHP <ul> <li>Estructura del proyecto:<code>&lt;br /&gt;</code> <code>bash         proyecto1/         \u2502         \u251c\u2500\u2500 docker-compose.yml         \u2514\u2500\u2500 src/   # Carpeta del proyecto</code></li> <li>Fichero <code>docker-compose.yml</code>:<code>&lt;br /&gt;</code></li> </ul> <pre><code>version: '3.8'\n</code></pre> <p>services: web: image: php:8.2-apache container_name: apache_php ports:</p> <ul> <li>\"8081:80\"   volumes:</li> <li>./src:/var/www/html   environment:   APACHE_RUN_USER: www-data   APACHE_RUN_GROUP: www-data   APACHE_LOG_DIR: /var/log/apache2   networks:</li> <li>webnet</li> </ul> <p>networks: webnet: driver: bridge<code>=== \"Nginx y PHP\"         * **Estructura del proyecto**:&lt;br /&gt;</code>bash proyecto2/ \u2502 \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 .docker \u2502   \u251c\u2500\u2500\u2500 nginx \u2502   \u2502   \u2514\u2500\u2500 conf.d \u2502   \u2502      \u2514\u2500\u2500 php.conf  # Archivo configuraci\u00f3n php en Nginx \u2514\u2500\u2500 src/    # Carpeta del proyecto <code>* **Fichero `docker-compose.yml`**:&lt;br /&gt;</code>yaml version: '3.8'</p> <p>services: nginx: image: nginx:1.19 ports:</p> <ul> <li>\"8082:80\"  # Aseg\u00farate de que el puerto est\u00e1 correctamente mapeado   volumes:</li> <li>./src:/var/www/php</li> <li>./.docker/nginx/conf.d:/etc/nginx/conf.d  # Configuraci\u00f3n personalizada de Nginx   depends_on:</li> <li>php   networks:</li> <li>webnet</li> </ul> <p>php: image: php:8.0-fpm working_dir: /var/www/php volumes:</p> <ul> <li>./src:/var/www/php   networks:</li> <li>webnet</li> </ul> <p>networks: webnet: driver: bridge</p> <pre><code>Aseg\u00farate de que tu archivo de configuraci\u00f3n de Nginx est\u00e1 correctamente configurado. Aqu\u00ed hay un ejemplo b\u00e1sico que debes colocar en**./.docker/nginx/conf.d/default.conf**:\n\n```yaml\nserver {\n        listen 80;\n        server_name localhost;\n\nroot /var/www/php;\n        index index.php index.html index.htm;\n\nlocation / {\n            try_files$uri $uri/ /index.php?$args;\n        }\n\nlocation ~\\.php$ {\n            include fastcgi_params;\n            fastcgi_pass php:9000;  # Aseg\u00farate de que este nombre coincide con el nombre del servicio PHP\n            fastcgi_index index.php;\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        }\n    }\n    ```\n</code></pre> <p>Dentro de la carpeta que contenga dicho archivo, hemos de crear una carpeta <code>src</code> donde colocaremos nuestro c\u00f3digo fuente.</p> <p>Para facilitar la puesta en marcha, ten\u00e9is las plantillas de:</p> <ul> <li>Apache/PHP (versi\u00f3n 2 con <code>a2enmod rewrite</code>) o</li> <li>Nginx/PHP</li> </ul> <p>disponibles para su descarga.</p> \u00d3rdenes en Docker <p>Cuando estemos listos, lanzaremos el servicio mediante:</p> <pre><code>``sh     docker-compose up -d     ``\nDocker Compose primero buscar\u00e1 la imagen definida en su sistema local, y si no puede encontrar la imagen, descargar\u00e1 la imagen desde Docker Hub. Ver\u00e1s un resultado como este:\n`&lt;div style=\"text-align:center;\"&gt;&lt;img src=\"../../img/ut01/docker-compose-up-d.png\" alt=\"holamundo\" style=\"zoom:80%; border: 2px solid #fff2c9;\" /&gt;``&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;`Descarga e instalaci\u00f3n de im\u00e1genes de docker-compose.yml`&lt;/figcaption&gt;&lt;/figure&gt;``&lt;/div&gt;`\nSi queremos ver el contenido de los archivos de **log** del servicio utilizaremos:\n\n``sh     docker-compose logs -f     ``\n\nPara**copiar un archivo** desde nuestro sistema al interior del contenedor:\n\n``sh     docker cp ./miFichero idContenedor:/tmp     ``\n\nY al rev\u00e9s, si queremos consultar un archivo contenido dentro de un contenedor, lo copiaremos a nuestro sistema:\n\n``sh     docker cp idContenedor:/tmp/archivoAConsultar.txt ./     ``\n\nFinalmente, si queremos acceder a un terminal interactivo dentro del contenedor:\n\n``sh     docker exec -it nombreContenedor bash     ``\n\nOtros comandos que podemos llegar a utilizar son:\n\n-`docker ps`: Ver los contenedores que se estan ejecutando.\n- `docker ps -a`: Ver todos los contenedores.\n- `docker start nombreContenedor`: Arrancar un contenedor.\n- `docker images`: Ver las im\u00e1genes que tenemos descargadas.\n- `docker stop $(docker ps -a -q)`: Detener todos los contenedores en ejecuci\u00f3n.\n- `docker rm $(docker ps -a -q)`: Eliminar todos los contenedores detenidos.\n</code></pre> <p>Docker stack</p> <p>Existen diversas opciones mediante Docker que ofrecen soluciones completas y empaquetadas para todo el stack de desarrollo. En posteriores sesiones podremo utilizar tanto Devilbox (http://devilbox.org) como Laradock (https://laradock.io).</p> <p>... pero quiero saber c\u00f3mo funciona ...</p> <p>En el m\u00f3dulo de \"Despliegue de aplicaciones\" estudiar\u00e9is en profundidad, adem\u00e1s de Docker, Apache y otros servicios que nos servir\u00e1n de ayuda para el desarrollo en entorno servidor.</p>"},{"location":"ut01/ut0110/#3-editor-de-codigo","title":"3. Editor de c\u00f3digo","text":"<p>En este curso vamos a emplear Visual Studio Code (https://code.visualstudio.com) como editor de c\u00f3digo fuente. Existen otras alternativas, siendo PhpStorm el IDE  m\u00e1s conocido (pero de pago). Otra posibilidad es utilizar Eclipse, aunque es un entorno bastante pesado.</p> <p>VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones:</p> <ul> <li>PHP</li> <li>PHP Debug: para la depuraci\u00f3n de c\u00f3digo PHP. Permite conectar VSCode a un servidor de depuraci\u00f3n PHP y proporciona herramientas para inspeccionar variables, establecer puntos de interrupci\u00f3n y realizar un seguimiento detallado del flujo de ejecuci\u00f3n.</li> <li>PHP IntelliSense: extensi\u00f3n fundamental, aporta mucha velocidad de escritura gracias al \u00abintellisense\u00bb. Mejora la codificaci\u00f3n al proporcionar sugerencias inteligentes de c\u00f3digo y completar autom\u00e1ticamente fragmentos de c\u00f3digo mientras escribes en PHP.</li> <li>Php Intelephense: ofrece caracter\u00edsticas avanzadas para desarrolladores PHP, como autocompletado inteligente, an\u00e1lisis est\u00e1tico y soporte para PHPDoc. Ayuda a detectar errores y a escribir c\u00f3digo m\u00e1s eficiente.</li> <li>PHP DocBlocker: simplifica la creaci\u00f3n de comentarios tipo DocBlock para sus funciones y m\u00e9todos PHP. Con solo presionar un atajo de teclado, puede generar r\u00e1pidamente documentaci\u00f3n legible y \u00fatil para tu c\u00f3digo.</li> <li>PHP Code Sniffer: asegura que el c\u00f3digo PHP cumpla con los est\u00e1ndares de codificaci\u00f3n establecidos. Puedes personalizar las reglas seg\u00fan las necesidades de tu proyecto.</li> <li>PHP CS Fixer: automatiza la correcci\u00f3n de problemas de formato en tu c\u00f3digo PHP, manteni\u00e9ndolo limpio y coherente con facilidad.</li> <li>PHP Namespace Resolver</li> <li>Docker</li> </ul> <p>En la siguiente sesi\u00f3n comenzaremos a utilizar Intelephense pero en esta sesi\u00f3n nos vamos a centrar en Docker (m\u00e1s adelante instalaremos nuevas extensiones).</p> <p>Por ejemplo, si abrimos la extensi\u00f3n de Docker, podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo:</p> Extensi\u00f3n Docker en Visual Studio Code"},{"location":"ut01/ut0110/#31-configurar-llaves-php-en-vs-code","title":"3.1. Configurar llaves PHP en VS Code","text":"<p>Ir a Archivo/Preferencias/Configurar fragmentos de usuario (File/Preferences/User Snippets) seleccionar la opci\u00f3n html y agregar el snippet en el fichero html.json:</p> <pre><code>\"php\": {\n        \"prefix\": \"php\",\n        \"body\": [\n            \"&lt;?php\",\n            \"$1\",\n            \"?&gt;\"\n        ],\n        \"description\": \"php tag\"\n    }\n</code></pre> <p>A partir de ahora podremos abreviar la introducci\u00f3n de las etiquetas <code>&lt;?php</code> y <code>?&gt;</code> en VS Code introduciendo php + TAB.</p>"},{"location":"ut01/ut0110/#4-hola-mundo","title":"4. Hola Mundo","text":"<p>Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP.</p> <p>Si nombramos el archivo como index.php, al acceder a http://localhost autom\u00e1ticamente cargar\u00e1 el resultado:</p> Php <p><code>Php     &lt;!DOCTYPE html&gt;     &lt;html lang=\"es\"&gt;     &lt;head&gt;         &lt;meta charset=\"UTF-8\"&gt;         &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;         &lt;title&gt;Hola Mundo&lt;/title&gt;     &lt;/head&gt;     &lt;body&gt;         &lt;?php             echo \"Hola Mundo\";         ?&gt;     &lt;/body&gt;     &lt;/html&gt;</code></p> Resultado <p><code>&lt;div style=\"text-align: center;\"&gt;&lt;figure&gt;``&lt;img src=\"../../img/ut01/holamundo.png\" alt=\"holamundo\" style=\"zoom:70%; border: 2px solid #fff2c9;\" /&gt;&lt;figcaption style=\"font-size: 13px; color: #bd8f04;\"&gt;</code>P\u00e1gina en php: Hola Mundo.<code>&lt;/figcaption&gt;&lt;/figure&gt;``&lt;/div&gt;</code></p>"},{"location":"ut01/ut01ac/","title":"Ejercicios","text":""},{"location":"ut01/ut01ac/#ejercicio-101","title":"Ejercicio 101","text":"<p>Busca en Internet cu\u00e1les son los tres frameworks PHP m\u00e1s utilizados, e indica:</p> <ul> <li>Nombre y URL</li> <li>A\u00f1o de creaci\u00f3n</li> <li>\u00daltima versi\u00f3n</li> </ul>"},{"location":"ut01/ut01ac/#ejercicio-102","title":"Ejercicio 102","text":"<p>Busca tres ofertas de trabajo de desarrollo de software en Infojobs en la Comunidad Valenciana que citen PHP y anota:</p> <ul> <li>Empresa + puesto + frameworks PHP + requisitos + sueldo + enlace a la oferta.</li> </ul>"},{"location":"ut01/ut01ac/#ejercicio-103","title":"Ejercicio 103","text":"<p>Instala mediante Docker la dupla Apache+Php2 (encontrar\u00e1s la descarga en la secci\u00f3n Descargas de esta unidad).</p> <p>Utiliza el puerto 8082 para Apache (en el fichero docker-compose.yml).</p> <p>Estructura del contenedor:</p> <pre><code>ApachePhp2/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 .docker/    # Carpeta de configuraci\u00f3n\n\u2502  \u2514\u2500\u2500 php.ini  # Fichero configuraci\u00f3n php\n\u2514\u2500\u2500 src/        # Carpeta del proyecto\n</code></pre>"},{"location":"ut01/ut01ac/#ejercicio-104","title":"Ejercicio 104","text":"<p>Instala (mediante Docker) la dupla Nginx+Php2  (encontrar\u00e1s la descarga en la secci\u00f3n Descargas de esta unidad).</p> <p>Utiliza el puerto 8083 para Nginx (en el fichero docker-compose.yml).</p> <pre><code>NginxPhp/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 .docker/      # Carpeta de configuraci\u00f3n\n\u2502  \u2514\u2500\u2500 nginx/    \n\u2502     \u2514\u2500\u2500 conf.d\n\u2502        \u2514\u2500\u2500 default.conf # Fichero configuraci\u00f3n de servidor \n\u2514\u2500\u2500 src/          # Carpeta del proyecto\n    \u2514\u2500\u2500 img/\n    \u2514\u2500\u2500 index.php\n    \u2514\u2500\u2500 phpinfo.php\n</code></pre>"},{"location":"ut01/ut01ac/#ejercicio-105","title":"Ejercicio 105","text":"<p>Si finalmente has instalado mediante dockers los dos servidores web, instala tambi\u00e9n el docker Portainer y echa un vistazo (haciendo varias capturas).</p> <pre><code>sudo docker volume create portainer_data\n\nsudo docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n</code></pre>"},{"location":"ut01/ut01ac/#ejercicio-106","title":"Ejercicio 106","text":"<p>Una vez arrancado el servicio PHP (mediante XAMPP o Docker), crea el archivo <code>info.php</code> y a\u00f1ade el siguiente fragmento de c\u00f3digo:</p> <pre><code>&lt;?php phpinfo() ?&gt;\n</code></pre> <p>Anota los valores de:</p> <ul> <li>Versi\u00f3n de PHP</li> <li><code>Loaded Configuration File</code></li> <li><code>memory_limit</code></li> <li><code>DOCUMENT_ROOT</code></li> </ul>"},{"location":"ut01/ut01ac/#ejercicio-107","title":"Ejercicio 107","text":"<p>En el docker del Ejercicio 103:</p> <ul> <li>Modifica el fichero <code>index.html</code> a <code>index_old.html</code>.</li> <li>Descarga el siguiente fichero index.html en la carpeta <code>src</code>.</li> </ul> <p>En el fichero index.html descargado se han utilizado las siguientes librer\u00edas para conformar la interfaz de usuario:</p> <ul> <li>Bootstrap 5.2, para el dise\u00f1o de interfaces responsivas.</li> <li>Tema Flatly basado en bootstrap, que proporciona la hoja de estilos de la interfaz.</li> <li>Font awesome 6.2, para la utilizaci\u00f3n de iconos.</li> </ul> <p>Si nos fijamos en el contenido del fichero index.html proporcionado no se diferencia en nada (salvo en la utilizaci\u00f3n de las librer\u00edas anteriores) de una de las p\u00e1ginas est\u00e1ticas programadas durante el primer curso del ciclo:</p> <p>Vamos a empezar a incrustar PHP en el c\u00f3digo HTML.</p>"},{"location":"ut01/ut01ac/#a-utilizacion-de-plantillas","title":"a) Utilizaci\u00f3n de plantillas","text":"<p>El primer paso que vamos a realizar es trocear el c\u00f3digo HTML proporcionado. \u00bfPor qu\u00e9? porque hay determinadas partes que siempre se repiten en cada una de las p\u00e1ginas: la cabecera y el pie de p\u00e1gina.</p> <p>As\u00ed, vamos a crear una carpeta <code>templates</code> (plantillas, en ingl\u00e9s) dentro de src, para almacenar todos aquellos fragmentos de c\u00f3digo HTML que podemos reutilizar de una p\u00e1gina a otra.</p> <p>Dentro de templates vamos a crear dos archivos: <code>header.php</code> y <code>footer.php</code>.</p> <p>La estructura, por el momento, queda del siguiente modo:</p> <p>En clase: vamos a analizar index.html y debatir c\u00f3mo segmentar el c\u00f3digo. A continuaci\u00f3n reorganizamos el c\u00f3digo de index.html entre footer.php y header.php.</p> <p>Una vez configuradas las plantillas, queda muy poco c\u00f3digo HTML en index.html. Vamos ahora a poner el restante del c\u00f3digo HTML en index.php y vaciar por completo index.html (tras lo cual eliminamos este fichero).</p> <p>El fichero index.php quedar\u00eda del siguiente modo:</p> <pre><code>&lt;div class=\"container\"&gt;\n\n&lt;/div&gt;\n</code></pre> <p>\u00bfC\u00f3mo podemos ahora volver a estructurar la p\u00e1gina de inicio con las plantillas? Esto se ver\u00e1 en el siguiente apartado.</p>"},{"location":"ut01/ut01ac/#b-conformacion-de-las-paginas-de-la-aplicacion","title":"b) Conformaci\u00f3n de las p\u00e1ginas de la aplicaci\u00f3n","text":"<p>Para poder estructurar las p\u00e1ginas de la aplicaci\u00f3n bas\u00e1ndonos en las plantillas, podemos utilizar la instrucci\u00f3n include. Modificando el fichero index.php, quedar\u00eda del siguiente modo:</p> <pre><code>&lt;?php  include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n\n&lt;/div&gt;\n\n&lt;?php  include(\"templates/header.php\"); ?&gt;\n</code></pre> <p>Ahora, con el contenedor Docker iniciado, si refrescamos la p\u00e1gina, volveremos a obtener el mismo resultado que con la p\u00e1gina web est\u00e1tica:</p> <p>Parece que no haya cambiado nada, pero PHP ya est\u00e1 trabajando para nosotros. Hemos pasado de una p\u00e1gina web est\u00e1tica, recogida en un solo documento, a una p\u00e1gina modular generada con PHP. En un sitio web con multitud de p\u00e1ginas esto puede ser una gran ventaja.</p> <p>ATENCI\u00d3N: el orden en que han sido cargados los ficheros es importante. Si escribi\u00e9semos el siguiente fichero index.php:</p> <p>Ahora, como buenos programadores, nos preguntamos \u00bf<code>include</code> nos sirve para todos los casos o existen otras posibilidades para incluir ficheros en PHP? Lo vemos en el siguiente apartado.</p>"},{"location":"ut01/ut01ac/#c-inclusion-de-ficheros-en-php","title":"c) Inclusi\u00f3n de ficheros en PHP","text":"<p>La idea de utilizar diferentes ficheros es la reutilizaci\u00f3n del c\u00f3digo, lo que conlleva una mayor modularidad y un mejor mantenimiento del mismo. Un fichero no tiene por qu\u00e9 ser una plantilla, como hemos visto hasta ahora, sino que tambi\u00e9n podr\u00eda ser c\u00f3digo PHP que pudi\u00e9semos llegar a utilizar en diferentes partes de la aplicaci\u00f3n. Tambi\u00e9n se pueden dar diferentes circunstancias, y es por ello que disponemos de varias opciones:</p> <ul> <li><code>include(ruta/archivo);</code> <code>include\\_once(ruta/archivo);</code></li> <li><code>require(ruta/archivo);</code> <code>require\\_once(ruta/archivo);</code></li> </ul> <p>NOTA: Si el archivo se encuentra a la misma altura (en el sistema de archivos) que el fichero en el cual se incluye, entonces solo es necesario especificar el nombre del archivo a incluir; si los dos archivos no se encuentran a la misma altura, entonces es posible especificar la ruta (absoluta o relativa) del fichero a incluir.</p> <p>Las particularidades de cada instrucci\u00f3n son:</p> <ul> <li>require: lanza un error fatal si no encuentra el archivo.</li> <li>include: si no encuentra el archivo, emite una advertencia (warning).</li> <li>Las funciones _once s\u00f3lo se cargan una vez, si ya ha sido incluida previamente, no lo vuelve a hacer, evitando bucles.</li> </ul> <p>Por ejemplo, colocamos las siguientes funciones en el archivo biblioteca.php:</p> <pre><code>&lt;?php\n  function suma(int $a, int $b) : int {\n      return $a + $b;\n  }\n\n  function resta(int $a, int $b) : int {\n      return $a - $b;\n  }\n?&gt;\n</code></pre> <p>Y posteriormente en otro archivo incluimos el anterior:</p> <pre><code>&lt;?php\n\n  include_once(\"biblioteca.php\");\n\n  echo suma(10,20);\n\n  echo resta(40,20);\n\n?&gt;\n</code></pre>"},{"location":"ut01/ut01ac/#d-completamos-el-resto-de-paginas","title":"d) Completamos el resto de p\u00e1ginas","text":"<p>En este apartado vamos a completar las p\u00e1ginas y las plantillas de la aplicaci\u00f3n para poder a\u00f1adirles posteriormente c\u00f3digo PHP.</p>"},{"location":"ut01/ut01ac/#indexphp","title":"index.php","text":"<p>Vamos a introducir un proyecto de prueba para que se pueda visualizar en la p\u00e1gina de inicio, quedar\u00eda del siguiente modo:</p> <p>Vamos a utilizar una imagen para cada proyecto. Para poder hacer esto hemos de almacenar las im\u00e1genes en la estructura de directorios, por eso creamos una carpeta static dentro de src, y dentro de static crearemos otra llamada images:</p> <p>NOTA: si has de descargar im\u00e1genes de Internet, aseg\u00farate que la licencia de dichas im\u00e1genes te lo permite. Utiliza, si es necesario, un sitio como pixabay.com para descargar im\u00e1genes con licencia libre.</p> <p>Desc\u00e1rgate una imagen en la carpeta images, ren\u00f3mbrala a projecte1.png (aqu\u00ed tienes la imagen del ejemplo projecte1.png si deseas utilizar la misma) y completa el fichero index.php con el siguiente c\u00f3digo:</p> <pre><code>&lt;?php include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;a href=\"#\"&gt;\n        &lt;div class=\"card\" style=\"width: 18rem;\"&gt;\n            &lt;img class=\"card-img-top\" src=\"static/images/projecte1.png\" alt=\"Projecte 1\"&gt;\n            &lt;div class=\"card-body\"&gt;\n                &lt;h5 class=\"card-title\"&gt;Projecte 1&lt;/h5&gt;\n                &lt;p class=\"card-text\"&gt;Descripci\u00f3 del projecte 1.&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/a&gt;\n&lt;/div&gt;\n\n&lt;?php include(\"templates/footer.php\"); ?&gt;\n</code></pre> <p>Ahora deber\u00eda aparecer un proyecto en la p\u00e1gina principal.</p>"},{"location":"ut01/ut01ac/#proyectophp","title":"proyecto.php","text":"<p>Creamos este nuevo fichero a la altura de index.php y a\u00f1adimos el siguiente contenido:</p> <pre><code>&lt;?php include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;h2&gt;T\u00edtol de mostra&lt;/h2&gt;\n    &lt;h4&gt;&lt;a href=\"#\"&gt;Any&lt;/a&gt;&lt;/h4&gt;\n    &lt;span&gt;Categories: &lt;/span&gt;\n    &lt;a href=\"#\"&gt;&lt;button class=\"btn btn-sm btn-default\"&gt;Categoria 1&lt;/button&gt;&lt;/a&gt;\n    &lt;br&gt; &lt;br&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-sm\"&gt;\n            &lt;img src=\"static/images/projecte1.png\" alt=\"Projecte 1\" class=\"img-responsive\"&gt;&lt;br&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-sm\"&gt;Descripci\u00f3&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;?php include(\"templates/footer.php\"); ?&gt;\n</code></pre> <p>Para consultar el resultado, introducimos en la barra de navegaci\u00f3n la URL localhost:8081/proyecto.php:</p>"},{"location":"ut01/ut01ac/#contactophp","title":"contacto.php","text":"<p>Descargamos esta contacte.png en el directorio correspondiente (con el nombre businessman.png), creamos contacto.php a la altura de index.php, e insertamos el siguiente c\u00f3digo:</p> <pre><code>&lt;?php include(\"templates/header.php\"); ?&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;h2 class=\"mb-5\"&gt;Contacte&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md\"&gt;\n            &lt;img src=\"static/images/contacte.png\" class=\"img-fluid rounded\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-md\"&gt;\n            &lt;h3&gt;Nom i cognoms&lt;/h3&gt;\n            &lt;p&gt;Cicle Superior DAW.&lt;/p&gt;\n            &lt;p&gt;Apasionat del mon de la programaci\u00f3 en general, i de les tecnologies web en particular.&lt;/p&gt;\n            &lt;p&gt;Si tens algun dubte contacta amb m\u00ed per favor.&lt;/p&gt;\n            &lt;p&gt;Tel\u00e8fon: 123456789&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;?php include(\"templates/footer.php\"); ?&gt;\n</code></pre> <p>El resultado, al consultar la URL localhost/contacto.php, deber\u00eda ser el siguiente:</p> <p>En estos momentos tenemos ya muchas cosas preparadas para poder empezar a a\u00f1adir dinamismo a nuestra aplicaci\u00f3n. En los siguientes apartados vamos a ver las diferentes estructuras que nos lo van a permitir.</p>"},{"location":"ut01/ut01de/","title":"Descargas","text":""},{"location":"ut01/ut01de/#plantillas-docker-de-servidores-web-php","title":"Plantillas docker de servidores web + Php","text":"<ul> <li>plantilla Apache + Php</li> <li>plantilla Apache + Php 2</li> <li>plantilla Nginx + Php</li> <li>plantilla Apache + Php + MySql + phpMyAdmin</li> <li>Xampp</li> </ul>"},{"location":"ut02/ut0201/","title":"2.1. Introducci\u00f3n","text":"<p>Duraci\u00f3n estimada: 20 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA2. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. a) Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido. b) Se han identificado las principales tecnolog\u00edas asociadas. c) Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas. d) Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar. e) Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante. f) Se han utilizado directivas para modificar el comportamiento predeterminado. g) Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje. h) Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables. RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. a) Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias. b) Se han utilizado bucles y se ha verificado su funcionamiento. c) Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos. d) Se han creado y utilizado funciones. e) Se han utilizado formularios web para interactuar con el usuario del navegador Web. f) Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario. g) Se han a\u00f1adido comentarios al c\u00f3digo. <p>\u200b   </p>"},{"location":"ut02/ut0202/","title":"2.2. PHP","text":"<ul> <li>Acr\u00f3nimo de Personal Home Page.</li> <li>Lenguaje de prop\u00f3sito general, aunque su fuerte es el desarollo web.</li> <li>Sintaxis similar a C / Java.</li> <li>El c\u00f3digo se ejecuta en el servidor (en Apache mediante <code>mod_php</code>).</li> <li>El cliente recibe el resultado generado tras interpretar el c\u00f3digo en el servidor.</li> <li>El c\u00f3digo se almacena en archivo con extensi\u00f3n <code>.php</code>.</li> </ul> <p>La \u00faltima versi\u00f3n es la 8.3, de noviembre de 2023 (y se tiene previsto la liberaci\u00f3n de PHP 8.4 para el 21 de noviembre de 2024). Adem\u00e1s de numerosas nuevas funcionalidades que iremos viendo durante el curso, tiene m\u00e1s de dos veces mejor rendimiento que PHP5.</p> <p>Su documentaci\u00f3n es extensa y est\u00e1 traducida: https://www.php.net/manual/es/.</p>"},{"location":"ut02/ut0202/#1-codigo-embebido","title":"1. C\u00f3digo embebido","text":"<p>Los bloques de c\u00f3digo se escriben entre <code>&lt;?php</code> y <code>?&gt;</code>.</p> <p>Las sentencias se separan mediante <code>;</code>.</p> Ejemplo en phpResultado <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;PHP f\u00e1cil&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- Muestra una frase con HTML --&gt;\n  Hola mundo&lt;br&gt;\n  &lt;!-- Muestra una frase con PHP --&gt;\n  &lt;?php echo \"Es muy f\u00e1cil programar en PHP.\"; ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>S\u00f3lo etiquetas de apertura</p> <p>Si nuestro c\u00f3digo s\u00f3lo va a contener c\u00f3digo PHP y nada de html, como por ejemplo, cuando codifiquemos clases o interfaces, s\u00f3lo pondremos la etiqueta de apertura, para as\u00ed indicar que es una archivo de php puro.</p>"},{"location":"ut02/ut0202/#2-generando-codigo","title":"2. Generando c\u00f3digo","text":"<p>Tenemos tres posibilidades a la hora de generar contenido en nuestros documentos PHP:</p> <ul> <li><code>echo expresi\u00f3n;</code></li> <li><code>&lt;?= expresi\u00f3n ?&gt;</code></li> <li><code>print (expresi\u00f3n);</code></li> </ul> <p>Las que vamos a utilizar son:</p> <ul> <li><code>echo</code> cuando lo hagamos dentro de un bloque de instrucciones y </li> <li><code>&lt;?=</code> cuando s\u00f3lo vayamos a mostrar el valor de una variable dentro de un fragmento HTML.</li> </ul> Ejemplo phpResultado <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Echo y print&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;&lt;?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\"; ?&gt;&lt;/p&gt;\n  &lt;p&gt;&lt;?= \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;&lt;br&gt;\n  &lt;p&gt;&lt;?php print(\"Este texto se mostrar\u00e1 en la p\u00e1gina web.\"); ?&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"ut02/ut0202/#3-comentarios","title":"3. Comentarios","text":"<p>Podemos utilizar comentarios de una l\u00ednea o de bloque:</p> Ejemplo comentariosResultado <pre><code>&lt;?php\n// Este es un comentario de una sola l\u00ednea&lt;br&gt;\n\n/*\n  Este es\n  un comentario\n  que ocupa\n  varias l\u00edneas\n*/ \n?&gt;\n</code></pre> <p></p> <p>Abrievatura en VS Code de comentarios:</p> <p>Comentario de una l\u00ednea: <code>Ctrl</code> + <code>/</code>: Comenta o descomenta la l\u00ednea actual o las l\u00edneas seleccionadas. Comentario de bloque (multil\u00ednea): <code>Shift</code> + <code>Alt</code> + <code>A</code>: Inserta o elimina un comentario de bloque alrededor del texto seleccionado.</p>"},{"location":"ut02/ut0202/#4-errores","title":"4. Errores","text":"<p>Si hay un error de ejecuci\u00f3n, se produce un Fatal Error.</p> Ejemplo de error de ejecuci\u00f3n. <p>Desde PHP 5 se lanzan como una excepci\u00f3n. M\u00e1s adelante veremos el uso de <code>try</code> / <code>catch</code>.</p>"},{"location":"ut02/ut0202/#5-variables","title":"5. Variables","text":"<ul> <li>No es necesario declararlas previamente.</li> <li>Comienzan por <code>$</code>, por ejemplo <code>$nombre</code>, seguido de un caracter en letra min\u00fascula (recomendaci\u00f3n) o gui\u00f3n bajo _. Luego ya se pueden poner n\u00fameros.</li> <li>Son case sensitive: <code>$var != $vAR</code>.</li> <li>No se declara su tipo, el tipado es din\u00e1mico. Se asigna en tiempo de ejecuci\u00f3n dependiendo del valor asignado.</li> <li>Conveniente: hay que inicializarlas, sino dan error.</li> </ul> Ejemplo variablesResultado <pre><code>&lt;?php\n     $nombre = \"Marta\";\n     $nombreCompleto = \"Marta L\u00f3pez\";\n     $numero = 123;\n     $numero2 = 456;\n     $pi = 3.14;\n     $suerte = true;\n     $sinValor;\n     $_1 = \"el primero\";\n\n     echo $sinValor;\n?&gt;\n</code></pre> <p>Tipos de datos</p> <p>Aunque a priori no hay tipos de datos, internamente PHP trabaja con:</p> <ul> <li>cuatro tipos escalares: boolean, integer, float y string, y</li> <li>cuatro tipos compuestos: array, object, callable e iterable.</li> <li>Existe un tipo especial para null (m\u00e1s informaci\u00f3n aqu\u00ed).</li> </ul>"},{"location":"ut02/ut0202/#6-constantes","title":"6. Constantes","text":"<p>Son variables cuyo valor no var\u00edan.</p> <p>Existen dos posibilidades:</p> <ul> <li><code>define(NOMBRE, valor);</code></li> <li><code>const NOMBRE;      // a partir de PHP 5.3</code></li> </ul> Ejemplo constantesResultado <pre><code>&lt;?php\n      define(\"PI\", 3.1416);\n      const IVA = 0.21;\n\n      echo PI, \" \", IVA; // No se pone el s\u00edmbolo dolar\n?&gt;\n</code></pre> <p></p> <ul> <li>Se declaran siempre en MAY\u00daSCULAS.</li> <li>Hay un conjunto de constantes ya predefinidas, tambi\u00e9n conocidas como magic constants: https://www.php.net/manual/es/language.constants.predefined.php.</li> </ul> Ejercicios a realizar <ul> <li><code>Ejercicio 201</code></li> <li><code>Ejercicio 202</code></li> </ul>"},{"location":"ca/","title":"Inici","text":"\u00cdndice de unidades tem\u00e1ticas bloque unitat tem\u00e0tica bloque IPHP UT 01 Arquitectura Web UT 02 Lenguaje PHP UT 03 PHP Orientado a Objetos UT 04 Programaci\u00f3n Web UT 05 Acceso a base de datos bloque IILaravel UT 06 Herramientas Web UT 07 Framework Laravel UT 08 Laravel: controladores UT 09 Laravel: modelo de datos UT 10 Laravel: formularios y validaciones UT 11 Laravel: servicios REST UT 12 Laravel: autenticaci\u00f3n de usuarios <p>Licencia</p> <p>Uso de estos materiales sujeto a una licencia Creative Commons CC BY-NC-SA.Derivado a partir de materiales: \u00a0\u00a0\u00a0\u00a0- Curso Desarrollo Web en Entorno Servido, de Aitor Medrano y Luis Alema\u00f1. \u00a0\u00a0\u00a0\u00a0- Curso de Laravel, de Nacho Iborra.</p>"},{"location":"ca/ut01/ut0101/","title":"1.1. Introducci\u00f3","text":"<p>Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor.</p>"},{"location":"ca/ut01/ut0102/","title":"1.2. Client/Servidor","text":"<p>Uno o varios clientes acceden a un servidor. </p> <p>Las nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes.</p> Modelo Cliente-Servidor <p>En las aplicaciones web, el cliente es el navegador web.</p> <p>El cliente hace la petici\u00f3n (request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde (response).</p>"},{"location":"ca/ut01/ut0102/#21-pagina-web-dinamica","title":"2.1. P\u00e1gina web din\u00e1mica","text":"<p>Si la p\u00e1gina web \u00fanicamente contiene HTML + CSS se considera una p\u00e1gina est\u00e1tica. Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas:</p> <p>\u200b   a) Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos.</p> <p>\u200b   b) Utilizar servicios REST de terceros invocados desde JS.</p> Diferencia gr\u00e1fica entre p\u00e1gina est\u00e1tica y p\u00e1gina din\u00e1mica <p>Las tecnolog\u00edas empleadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son:</p> perfil herramienta tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript /td&gt;  Back-end / servidor Servidor Web + BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp <p>Perfil full-stack</p> <p>En las ofertas de trabajo, cuando hacen referencia a un Full-stack developer, est\u00e1n buscando un perfil que domina tanto el front-end como el back-end.</p>"},{"location":"ca/ut01/ut0102/#22-single-page-application","title":"2.2. Single Page Application","text":"<p>A d\u00eda de hoy gran parte del desarrollo web est\u00e1 transitando de una arquitectura web cliente-servidor cl\u00e1sica, donde el cliente realiza una llamada al backend, por una arquitectura SPA (arquitectura de una sola p\u00e1gina) donde el cliente gana mucho mayor peso y sigue una programaci\u00f3n reactiva que accede a servicios remotos REST que realizan las operaciones (comunic\u00e1ndose mediante JSON).</p> Diferencia entre ciclo de vida tradicional de una p\u00e1gina y el ciclo de vida de la arquitectura SPA"},{"location":"ca/ut01/ut0103/","title":"1.3. Arquitectura de 3 capes","text":"<p>Hay que distinguir entre capas f\u00edsicas (tier) y capas l\u00f3gicas (layer).</p>"},{"location":"ca/ut01/ut0103/#31-tier","title":"3.1. Tier","text":"<p>Capa f\u00edsica (tiers) de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN.</p> <p>Ejemplo de arquitectura en tres capas f\u00edsicas (3 tier):</p> <ul> <li>Servidor Web</li> <li>Servidor de Aplicaciones</li> <li>Servidor de base de datos</li> </ul> Capas f\u00edsicas (tiers) <p>Cl\u00faster en tiers</p> <p>No confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cl\u00faster, para ofrecer tolerancia a errores y escalabilidad horizontal.</p>"},{"location":"ca/ut01/ut0103/#32-layer","title":"3.2. Layer","text":"<p>En cambio, las capas l\u00f3gicas (layers) organizan el c\u00f3digo respecto a su funcionalidad:</p> <ul> <li>Presentaci\u00f3n</li> <li>Negocio / Aplicaci\u00f3n / Proceso</li> <li>Datos / Persistencia</li> </ul> <p>Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas.</p> Capas l\u00f3gicas (layers)"},{"location":"ca/ut01/ut0104/","title":"1.4. MVC","text":"<p>Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede v\u00eda el controlador.</li> <li>Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interact\u00faa con la vista y realiza nuevas peticiones al controlador.</li> <li>Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> </ul> Modelo-Vista-Controlador (MVC)"},{"location":"ca/ut01/ut0105/","title":"1.5. Decisions de disseny","text":"\u00bfQu\u00e9 tama\u00f1o tiene el proyecto? <p>El tama\u00f1o del proyecto influye directamente en la complejidad de la arquitectura, la elecci\u00f3n de herramientas y la planificaci\u00f3n de recursos. Para proyectos peque\u00f1os, una soluci\u00f3n simple y directa podr\u00eda ser suficiente, mientras que los proyectos m\u00e1s grandes requerir\u00e1n una arquitectura m\u00e1s escalable, pruebas m\u00e1s rigurosas y una gesti\u00f3n m\u00e1s detallada del c\u00f3digo.</p> \u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo? <p>Usar un lenguaje que ya conoces puede acelerar el desarrollo, ya que te sentir\u00e1s m\u00e1s c\u00f3modo y eficiente. Sin embargo, si el proyecto requiere caracter\u00edsticas espec\u00edficas que se manejan mejor con otro lenguaje, o si aprender uno nuevo te abre mejores oportunidades a largo plazo, puede valer la pena el esfuerzo. Debes considerar el tiempo de aprendizaje y c\u00f3mo impacta en el cronograma del proyecto.</p> \u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales? <p>Las herramientas de c\u00f3digo abierto suelen ser m\u00e1s econ\u00f3micas y flexibles, pero pueden requerir m\u00e1s soporte y mantenimiento por tu parte. Las soluciones comerciales pueden ofrecer m\u00e1s soporte y caracter\u00edsticas avanzadas, pero suelen tener un coste asociado. Deber\u00e1s evaluar el presupuesto disponible y las necesidades de soporte y funcionalidad del proyecto.</p> \u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores? <p>Si trabajas solo, puedes tomar decisiones m\u00e1s flexibles y r\u00e1pidas, adaptadas a tus preferencias y habilidades. Si trabajas en un equipo, la colaboraci\u00f3n y la coherencia en el c\u00f3digo se vuelven m\u00e1s importantes, por lo que deber\u00e1s considerar herramientas de control de versiones, gu\u00edas de estilo de c\u00f3digo, y plataformas de comunicaci\u00f3n y gesti\u00f3n de proyectos.</p> \u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario? <p>Si ya tienes servidores o gestores de bases de datos disponibles, deber\u00e1s asegurarte de que las tecnolog\u00edas elegidas sean compatibles con ellos. Si tienes libertad para elegir, podr\u00e1s seleccionar las tecnolog\u00edas que mejor se adapten a las necesidades del proyecto en t\u00e9rminos de rendimiento, escalabilidad y facilidad de uso.</p> \u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle? <p>La licencia que elijas afectar\u00e1 c\u00f3mo otros pueden usar, modificar y distribuir tu software. Si planeas mantener el control y limitar el uso comercial, una licencia m\u00e1s restrictiva como GPL puede ser adecuada. Si prefieres permitir un uso m\u00e1s libre, una licencia como MIT o Apache podr\u00eda ser mejor. Tambi\u00e9n debes considerar c\u00f3mo las licencias de las herramientas y librer\u00edas que utilices impactan en tu proyecto.</p> <p>Cada una de estas preguntas influir\u00e1 en c\u00f3mo abordas el desarrollo de tu aplicaci\u00f3n web, y reflexionar sobre ellas te ayudar\u00e1 a tomar decisiones m\u00e1s informadas y coherentes con tus objetivos.</p>"},{"location":"ca/ut01/ut0106/","title":"1.6. Ferramentes","text":"<p>Software que recibe peticiones HTTP (GET, POST, DELETE, ...). Devuelve el recurso solicitado (HTML, CSS, JS, JSON, im\u00e1genes, etc...)</p> <p>El producto m\u00e1s implantando es Apache Web Server (https://httpd.apache.org), creado en 1995.</p> <ul> <li>Software libre y multiplataforma.</li> <li>Sistema de m\u00f3dulos din\u00e1micos \u2192 PHP, Python, Perl.</li> <li>Utiliza el archivo <code>.htaccess</code> para su configuraci\u00f3n.</li> </ul> <p>En la actualidad, Apache est\u00e1 perdiendo mercado respecto a Nginx (https://www.nginx.com). Se trata de un producto m\u00e1s moderno (2004) y que en determinados escenarios tiene mejor rendimiento que Apache.</p> <p>En este enlace podemos observar una comparativa de servidores web: https://w3techs.com/technologies/history_overview/web_server/ms/q.</p>"},{"location":"ca/ut01/ut0106/#2-servidor-de-aplicaciones","title":"2. Servidor de Aplicaciones","text":"<p>Software que ofrece servicios adicionales a los de un servidor web:</p> <ul> <li>Clustering.</li> <li>Balanceo de carga.</li> <li>Tolerancia a fallos.</li> </ul> <p>Tomcat (http://tomcat.apache.org/) es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java. Contiene un contenedor Web Java que interpreta Servlets y JSP.</p> <p>Estudio de servidores web y servidores de aplicaciones</p> <p>Tanto los servidores web como los servidores de aplicaciones los estudiaremos en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\".</p>"},{"location":"ca/ut01/ut0106/#3-lenguajes-en-el-servidor","title":"3. Lenguajes en el servidor","text":"<p>Las aplicaciones que generan las p\u00e1ginas web se programan en alguno de los siguientes lenguajes:</p> <ul> <li>PHP</li> <li>JavaEE: Servlets / JSP</li> <li>Python</li> <li>ASP.NET \u2192 Visual Basic .NET / C#</li> <li>Ruby</li> <li>...</li> </ul>"},{"location":"ca/ut01/ut0106/#javaee","title":"JavaEE","text":"<p>Java Enterprise Edition es la soluci\u00f3n Java para el desarrollo de aplicaciones enterprise. Ofrece una arquitectura muy completa y compleja, escalable y tolerante a fallos. Planteada para aplicaciones en grandes sistemas.</p> Capas del lenguaje Java Enterprise Edition."},{"location":"ca/ut01/ut0106/#php","title":"PHP","text":"<ul> <li>Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas.</li> <li>En un principio, lenguaje no tipado.</li> <li>Actualmente se encuentra en la versi\u00f3n 8; se recomienda al menos utilizar una versi\u00f3n superior a la 7.0.</li> <li>C\u00f3digo embebido en el HTML.</li> <li>Instrucciones entre etiquetas <code>&lt;?php</code>  y  <code>?&gt;</code>  ; para generar c\u00f3digo dentro de PHP, podemos usar la instrucci\u00f3n <code>echo</code>.</li> <li>Multitud de librer\u00edas y frameworks (Laravel, Symfony, Codeigniter, Zend, ...).</li> </ul> <p>Su documentaci\u00f3n es bastante completa:   https://www.php.net/manual/es/index.php.</p> Mapa mental de resumen de elementos del lenguaje PHP. <p>Durante las siguientes unidades vamos a estudiar PHP en profundidad.</p>"},{"location":"ca/ut01/ut0107/","title":"1.7. Posada en marxa","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con las herramientas comentadas. </p> <p>Versiones</p> <p>A lo largo del curso vamos a usar <code>PHP 8.0</code>.</p>"},{"location":"ca/ut01/ut0107/#1-opcion-1-xampp","title":"1. Opci\u00f3n 1: XAMPP","text":"<p>XAMPP ( https://www.apachefriends.org/es/index.html) es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas:</p> <ul> <li>X para el sistema operativo (de ah\u00ed que se conozca tambi\u00e9n como LAMP o WAMP).</li> <li>A para Apache.</li> <li>M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web.</li> <li>P para PHP.</li> <li>P para Perl.</li> </ul> <p>Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha.</p> <p>XAMPP vs Docker en Windows</p> <p>Si vas a trabajar con tu propio ordenador, XAMPP es una soluci\u00f3n m\u00e1s sencilla que Docker, sobre todo si trabajar con Windows como sistema operativo.</p>"},{"location":"ca/ut01/ut0107/#2-opcion-2-docker","title":"2. Opci\u00f3n 2: Docker","text":"<p>Docker (https://www.docker.com) es un gestor de contenedores; considerando un contenedor como un m\u00e9todo de virtualizaci\u00f3n del sistema operativo.</p> <p>El uso de contenedores requiere menos recursos que una m\u00e1quina virtual, por lo tanto, su lanzamiento y detenci\u00f3n son m\u00e1s r\u00e1pidos que las m\u00e1quinas virtuales.</p> <p>As\u00ed pues, Docker permite crear, probar e implementar aplicaciones r\u00e1pidamente, a partir de una serie de plantillas que se conocen como im\u00e1genes de Docker.</p> <p>Instalaci\u00f3n</p> docker de gesti\u00f3n de dockers Portainer <p>Portainer es una forma c\u00f3moda de gestionar entornos de contenedores distribuidos. </p> <p>El software se instala como un contenedor Docker y, por tanto, se ejecuta pr\u00e1cticamente en cualquier lugar. Mostramos la rutina de instalaci\u00f3n y aportamos \u00fatiles consejos.</p> <p>A lo largo del curso iremos creando diferentes contenedores con los servicios necesarios, de manera que cada vez s\u00f3lo trabajemos con el software m\u00ednimo.</p> <p>Respecto a <code>Docker</code>, para escribir los apuntes hemos utilizado la version <code>20.10</code> y en Docker Compose la version <code>2.19</code>.</p> <p>Finalmente, la versi\u00f3n de <code>Docker Desktop</code> que hemos utilizado es la <code>4.0</code>.</p>"},{"location":"ca/ut01/ut0107/#1-actualizar-el-sistema","title":"1. Actualizar el Sistema","text":"<p>Antes de comenzar, es recomendable actualizar los paquetes existentes en tu sistema:</p> <pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre>"},{"location":"ca/ut01/ut0107/#2-instalar-las-dependencias","title":"2. Instalar las Dependencias","text":"<p>Instala las dependencias necesarias para Docker:</p> <pre><code>sudo apt install -y ca-certificates curl gnupg lsb-release\n</code></pre>"},{"location":"ca/ut01/ut0107/#3-agregar-la-clave-gpg-de-docker","title":"3. Agregar la Clave GPG de Docker","text":"<p>Agrega la clave GPG oficial de Docker a tu sistema:</p> <pre><code>sudo mkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n</code></pre>"},{"location":"ca/ut01/ut0107/#4-agregar-el-repositorio-de-docker","title":"4. Agregar el Repositorio de Docker","text":"<p>A\u00f1ade el repositorio de Docker a tus fuentes de APT:</p> <pre><code>echo \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre>"},{"location":"ca/ut01/ut0107/#5-actualizar-el-indice-de-paquetes","title":"5. Actualizar el \u00cdndice de Paquetes","text":"<p>Actualiza el \u00edndice de paquetes de APT nuevamente para incluir el nuevo repositorio:</p> <pre><code>sudo apt update\n</code></pre>"},{"location":"ca/ut01/ut0107/#6-instalar-docker-engine-docker-cli-y-containerd","title":"6. Instalar Docker Engine, Docker CLI y Containerd","text":"<p>Ahora, instala Docker usando el comando apt:</p> <pre><code>sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>"},{"location":"ca/ut01/ut0107/#7-verificar-la-instalacion-de-docker","title":"7. Verificar la Instalaci\u00f3n de Docker","text":"<p>Para verificar que Docker se haya instalado correctamente, ejecuta:</p> <pre><code>sudo docker --version\n</code></pre> <p>Deber\u00edas ver la versi\u00f3n de Docker instalada.</p>"},{"location":"ca/ut01/ut0107/#8-permitir-ejecucion-de-docker-sin-sudo-opcional","title":"8. Permitir Ejecuci\u00f3n de Docker sin Sudo (Opcional)","text":"<p>Si quieres ejecutar Docker sin usar <code>sudo</code>, agrega tu usuario al grupo <code>docker</code>:</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>Despu\u00e9s de ejecutar este comando, cierra la sesi\u00f3n y vuelve a iniciarla para que los cambios tengan efecto.</p>"},{"location":"ca/ut01/ut0107/#9-probar-docker","title":"9. Probar Docker","text":"<p>Verifica que Docker est\u00e9 funcionando correctamente ejecutando un contenedor de prueba:</p> <pre><code>docker run hello-world\n</code></pre> <p>Este comando descargar\u00e1 una imagen de prueba y ejecutar\u00e1 un contenedor que deber\u00eda mostrar un mensaje de confirmaci\u00f3n en la terminal.</p>"},{"location":"ca/ut01/ut0107/#10-instalar-docker-desktop-en-ubuntu-opcional","title":"10. Instalar Docker Desktop en Ubuntu (Opcional)","text":"<p>Si deseas usar Docker Desktop en Ubuntu, sigue estos pasos adicionales:</p> <p>10.1) Descargar Docker Desktop para Linux: Visita la p\u00e1gina de descarga de Docker Desktop y descarga la versi\u00f3n para Linux.</p> <p>10.2) Instalar Docker Desktop: Descomprime el archivo descargado y ejecuta el instalador:</p> <pre><code>sudo apt-get install ./docker-desktop-&lt;version&gt;-&lt;arch&gt;.deb\n</code></pre> <p>10.3) Ejecutar Docker Desktop: Inicia Docker Desktop desde tu entorno gr\u00e1fico o ejecutando <code>docker-desktop</code> en la terminal.</p> <p>10.4) Configurar Docker Desktop: Cuando se inicie Docker Desktop por primera vez, puedes configurarlo para usar WSL 2 o bien ejecutar contenedores nativos en Linux.</p>"},{"location":"ca/ut01/ut0107/#11-configurar-docker-desktop-opcional","title":"11. Configurar Docker Desktop (Opcional)","text":"<p>Si deseas hacer configuraciones adicionales como la cantidad de recursos que Docker puede usar, puedes hacerlo desde la interfaz gr\u00e1fica de Docker Desktop.</p> <p>Con estos pasos, deber\u00edas tener Docker y Docker Desktop completamente instalados y listos para usar en tu sistema Ubuntu. </p> <p>Si a\u00fan as\u00ed no se pudiera lanzar Docker Desktop en Ubuntu, podemos instalar el contenedor Portainer (puedes ver c\u00f3mo funciona en el siguiente punto docker de gesti\u00f3n de dockers Portainer).</p>"},{"location":"ca/ut01/ut0107/#1-instalacion-de-docker-desktop","title":"1. Instalaci\u00f3n de Docker-Desktop","text":"<p>Para una instalaci\u00f3n en Windows lo ideal es instalar la aplicaci\u00f3n Docker Desktop ( https://www.docker.com/products/docker-desktop  ) en nuestros entornos de desarrollo (el cual ya incluye en n\u00facleo de Docker y la herramienta Docker Compose). Esta instalaci\u00f3n requiere de un software adicional WSL2, el cual es un subsistema de Linux dentro de Windows; aqu\u00ed  podemos consultar sus m\u00e9todos de instalaci\u00f3n.  Por suerte, con la misma instalaci\u00f3n de Docker Desktop, viene tambi\u00e9n la de WSL (solo deberemos tener en cuenta tener el check de instalaci\u00f3n activado).</p> <p>Cuando termine la instalaci\u00f3n, reinicia tu m\u00e1quina. Interfaz programa Docker Desktop</p>"},{"location":"ca/ut01/ut0107/#2-verificar-la-instalacion","title":"2. Verificar la instalaci\u00f3n","text":"<p>Una vez Docker est\u00e9 instalado, abre PowerShell o Command Prompt y verifica la instalaci\u00f3n: <pre><code>docker --version\ndocker-compose --version\n</code></pre></p>"},{"location":"ca/ut01/ut0107/#3-crear-o-abrir-el-archivo-docker-composeyml","title":"3. Crear o abrir el archivo <code>docker-compose.yml</code>","text":"<p>Aseg\u00farate de tener un archivo <code>docker-compose.yml</code> en el directorio en el que vas a trabajar. Este archivo define la configuraci\u00f3n de tus servicios. Ejemplo de un archivo docker-compose.yml sencillo: <pre><code>version: '3'\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"8080:80\"\n</code></pre></p>"},{"location":"ca/ut01/ut0107/#4-levantar-el-contenedor-usando-docker-compose","title":"4. Levantar el contenedor usando Docker Compose","text":"<p>4.1) Abre una ventana de PowerShell, Command Prompt o Terminal (si usas WSL). 4.2) Navega al directorio donde se encuentra tu archivo docker-compose.yml. <pre><code>cd ruta/al/directorio\n</code></pre> 4.3) Una vez est\u00e9s en el directorio adecuado, ejecuta el siguiente comando para levantar los servicios definidos en el archivo: <pre><code>docker-compose up -d\n</code></pre></p>"},{"location":"ca/ut01/ut0107/#5-verificar-que-los-contenedores-estan-corriendo","title":"5. Verificar que los contenedores est\u00e1n corriendo","text":"<p>Despu\u00e9s de ejecutar docker-compose up, puedes verificar que los contenedores est\u00e1n en ejecuci\u00f3n con: <pre><code>docker ps\n</code></pre>     Si todo est\u00e1 correcto, deber\u00edas ver los contenedores definidos en el archivo <code>docker-compose.yml</code> listados.</p>"},{"location":"ca/ut01/ut0107/#6-acceso-a-los-servicios","title":"6. Acceso a los servicios","text":"<p>Si el archivo <code>docker-compose.yml</code> incluye servicios con puertos expuestos (como en el ejemplo de Nginx), puedes acceder a ellos desde tu navegador usando localhost y el puerto definido, por ejemplo: <pre><code>http://localhost:8080\n</code></pre></p>"},{"location":"ca/ut01/ut0107/#instalar","title":"Instalar","text":"<pre><code>$ sudo docker volume create portainer_data\n$ sudo docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n</code></pre> <p>Instalaci\u00f3n del contenedor Portainer desde terminal.</p>"},{"location":"ca/ut01/ut0107/#lanzar","title":"Lanzar","text":"<p>Como otro contenedor, podremos acceder a \u00e9l mediante un navegador (Firefox, Chrome, ...) introduciendo la URL: localhost:9443</p> <p>Acceso a docker Portainer desde el puerto 9000.</p> <p>Si muestra el siguiente texto, debemos reiniciar el contenedor del Docker Portainer:</p> <p>Pesta\u00f1a indicando reiniciar el docker Portainer.</p> <p>Volvemos a acceder v\u00eda localhost:9000:</p> <p>Pesta\u00f1a de inicio de docker Portainer.</p>"},{"location":"ca/ut01/ut0107/#funciona-como-un-docker","title":"Funciona como un docker","text":"<p>Para ver el ID de contenedor podemos listar los contenedores:</p> <pre><code>$ sudo docker ps -a\n</code></pre> <p>Para parar el contenedor:</p> <pre><code>$ sudo docker stop [ID]\n</code></pre> <p>Para volver a lanzar el contenedor:</p> <pre><code>$ sudo docker start [ID]\n</code></pre>"},{"location":"ca/ut01/ut0107/#21-plantilla-servidor-web-php","title":"2.1. Plantilla Servidor Web + PHP","text":"<p>Docker se basa en el uso de im\u00e1genes para crear contenedores. Docker Compose simplifica el trabajo con m\u00faltiples contenedores, y por ello, para facilitar el arranque, nos centraremos en Docker Compose utilizando una plantilla que \u00fanicamente va a contener como servicios Apache/Nginx y PHP.</p> <p>Para ello, vamos crear una carpeta de nombre <code>proyecto1</code>, y dentro de este el archivo <code>docker-compose.yaml</code> con:</p> <p>proyecto1 con distintos servidores en <code>docker-compose.yml</code></p> Apache y PHPNginx y PHP <ul> <li>Estructura del proyecto: <pre><code>proyecto1/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 src/    # Carpeta del proyecto\n</code></pre></li> <li>Fichero <code>docker-compose.yml</code>: <pre><code>version: '3.8'\n\nservices:\n  web:\n    image: php:8.2-apache\n    container_name: apache_php\n    ports:\n      - \"8081:80\"\n    volumes:\n      - ./src:/var/www/html\n    environment:\n      APACHE_RUN_USER: www-data\n      APACHE_RUN_GROUP: www-data\n      APACHE_LOG_DIR: /var/log/apache2\n    networks:\n      - webnet\n\nnetworks:\n  webnet:\n    driver: bridge\n</code></pre></li> </ul> <ul> <li>Estructura del proyecto: <pre><code>proyecto2/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 .docker\n\u2502   \u251c\u2500\u2500\u2500 nginx\n\u2502   \u2502   \u2514\u2500\u2500 conf.d\n\u2502   \u2502      \u2514\u2500\u2500 php.conf  # Archivo configuraci\u00f3n php en Nginx\n\u2514\u2500\u2500 src/    # Carpeta del proyecto\n</code></pre></li> <li>Fichero <code>docker-compose.yml</code>: <pre><code>version: '3.8'\n\nservices:\n  nginx:\n    image: nginx:1.19\n    ports:\n      - \"8082:80\"  # Aseg\u00farate de que el puerto est\u00e1 correctamente mapeado\n    volumes:\n      - ./src:/var/www/php\n      - ./.docker/nginx/conf.d:/etc/nginx/conf.d  # Configuraci\u00f3n personalizada de Nginx\n    depends_on:\n      - php\n    networks:\n      - webnet\n\n  php:\n    image: php:8.0-fpm\n    working_dir: /var/www/php\n    volumes:\n      - ./src:/var/www/php\n    networks:\n      - webnet\n\nnetworks:\n  webnet:\n    driver: bridge\n</code></pre> Aseg\u00farate de que tu archivo de configuraci\u00f3n de Nginx est\u00e1 correctamente configurado. Aqu\u00ed hay un ejemplo b\u00e1sico que debes colocar en ./.docker/nginx/conf.d/default.conf:</li> </ul> <pre><code>server {\n    listen 80;\n    server_name localhost;\n\n    root /var/www/php;\n    index index.php index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ /index.php?$args;\n    }\n\n    location ~ \\.php$ {\n        include fastcgi_params;\n        fastcgi_pass php:9000;  # Aseg\u00farate de que este nombre coincide con el nombre del servicio PHP\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n}\n</code></pre> <p>Dentro de la carpeta que contenga dicho archivo, hemos de crear una carpeta <code>src</code> donde colocaremos nuestro c\u00f3digo fuente.</p> <p>Para facilitar la puesta en marcha, ten\u00e9is las plantillas de:</p> <ul> <li>Apache/PHP (versi\u00f3n 2 con <code>a2enmod rewrite</code>) o </li> <li>Nginx/PHP </li> </ul> <p>disponibles para su descarga.</p> \u00d3rdenes en Docker <p>Cuando estemos listos, lanzaremos el servicio mediante:</p> <p><pre><code>docker-compose up -d\n</code></pre> Docker Compose primero buscar\u00e1 la imagen definida en su sistema local, y si no puede encontrar la imagen, descargar\u00e1 la imagen desde Docker Hub. Ver\u00e1s un resultado como este: Descarga e instalaci\u00f3n de im\u00e1genes de docker-compose.yml Si queremos ver el contenido de los archivos de log del servicio utilizaremos:</p> <pre><code>docker-compose logs -f\n</code></pre> <p>Para copiar un archivo desde nuestro sistema al interior del contenedor:</p> <pre><code>docker cp ./miFichero idContenedor:/tmp\n</code></pre> <p>Y al rev\u00e9s, si queremos consultar un archivo contenido dentro de un contenedor, lo copiaremos a nuestro sistema:</p> <pre><code>docker cp idContenedor:/tmp/archivoAConsultar.txt ./\n</code></pre> <p>Finalmente, si queremos acceder a un terminal interactivo dentro del contenedor:</p> <pre><code>docker exec -it nombreContenedor bash\n</code></pre> <p>Otros comandos que podemos llegar a utilizar son:</p> <ul> <li><code>docker ps</code>: Ver los contenedores que se estan ejecutando.</li> <li><code>docker ps -a</code>: Ver todos los contenedores.</li> <li><code>docker start nombreContenedor</code>: Arrancar un contenedor.</li> <li><code>docker images</code>: Ver las im\u00e1genes que tenemos descargadas.</li> <li><code>docker stop $(docker ps -a -q)</code>: Detener todos los contenedores en ejecuci\u00f3n.</li> <li><code>docker rm $(docker ps -a -q)</code>: Eliminar todos los contenedores detenidos.</li> </ul> <p>Docker stack</p> <p>Existen diversas opciones mediante Docker que ofrecen soluciones completas y empaquetadas para todo el stack de desarrollo. En posteriores sesiones podremo utilizar tanto Devilbox (http://devilbox.org) como Laradock (https://laradock.io).</p> <p>... pero quiero saber c\u00f3mo funciona ...</p> <p>En el m\u00f3dulo de \"Despliegue de aplicaciones\" estudiar\u00e9is en profundidad, adem\u00e1s de Docker, Apache y otros servicios que nos servir\u00e1n de ayuda para el desarrollo en entorno servidor.</p>"},{"location":"ca/ut01/ut0107/#3-editor-de-codigo","title":"3. Editor de c\u00f3digo","text":"<p>En este curso vamos a emplear Visual Studio Code (https://code.visualstudio.com) como editor de c\u00f3digo fuente. Existen otras alternativas, siendo PhpStorm el IDE  m\u00e1s conocido (pero de pago). Otra posibilidad es utilizar Eclipse, aunque es un entorno bastante pesado.</p> <p>VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones:</p> <ul> <li>PHP</li> <li>PHP Debug: para la depuraci\u00f3n de c\u00f3digo PHP. Permite conectar VSCode a un servidor de depuraci\u00f3n PHP y proporciona herramientas para inspeccionar variables, establecer puntos de interrupci\u00f3n y realizar un seguimiento detallado del flujo de ejecuci\u00f3n.</li> <li>PHP IntelliSense: extensi\u00f3n fundamental, aporta mucha velocidad de escritura gracias al \u00abintellisense\u00bb. Mejora la codificaci\u00f3n al proporcionar sugerencias inteligentes de c\u00f3digo y completar autom\u00e1ticamente fragmentos de c\u00f3digo mientras escribes en PHP.</li> <li>Php Intelephense: ofrece caracter\u00edsticas avanzadas para desarrolladores PHP, como autocompletado inteligente, an\u00e1lisis est\u00e1tico y soporte para PHPDoc. Ayuda a detectar errores y a escribir c\u00f3digo m\u00e1s eficiente.</li> <li>PHP DocBlocker: simplifica la creaci\u00f3n de comentarios tipo DocBlock para sus funciones y m\u00e9todos PHP. Con solo presionar un atajo de teclado, puede generar r\u00e1pidamente documentaci\u00f3n legible y \u00fatil para tu c\u00f3digo.</li> <li>PHP Code Sniffer: asegura que el c\u00f3digo PHP cumpla con los est\u00e1ndares de codificaci\u00f3n establecidos. Puedes personalizar las reglas seg\u00fan las necesidades de tu proyecto.</li> <li>PHP CS Fixer: automatiza la correcci\u00f3n de problemas de formato en tu c\u00f3digo PHP, manteni\u00e9ndolo limpio y coherente con facilidad.</li> <li>PHP Namespace Resolver</li> <li>Docker</li> </ul> <p>En la siguiente sesi\u00f3n comenzaremos a utilizar Intelephense pero en esta sesi\u00f3n nos vamos a centrar en Docker (m\u00e1s adelante instalaremos nuevas extensiones).</p> <p>Por ejemplo, si abrimos la extensi\u00f3n de Docker, podr\u00e9is visualizar tanto los contenedores como las im\u00e1genes de vuestro sistema. Desde cada contenedor, mediante clic derecho, podemos iniciar/detener/reiniciar cada contenedor, as\u00ed como ver su contenido o abrir un terminal dentro del mismo:</p> Extensi\u00f3n Docker en Visual Studio Code"},{"location":"ca/ut01/ut0107/#31-configurar-llaves-php-en-vs-code","title":"3.1. Configurar llaves PHP en VS Code","text":"<p>Ir a Archivo/Preferencias/Configurar fragmentos de usuario (File/Preferences/User Snippets) seleccionar la opci\u00f3n html y agregar el snippet en el fichero html.json:</p> <pre><code>    \"php\": {\n        \"prefix\": \"php\",\n        \"body\": [\n            \"&lt;?php\",\n            \"$1\",\n            \"?&gt;\"\n        ],\n        \"description\": \"php tag\"\n    }\n</code></pre> <p>A partir de ahora podremos abreviar la introducci\u00f3n de las etiquetas <code>&lt;?php</code> y <code>?&gt;</code> en VS Code introduciendo php + TAB.</p>"},{"location":"ca/ut01/ut0107/#4-hola-mundo","title":"4. Hola Mundo","text":"<p>Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP.</p> <p>Si nombramos el archivo como index.php, al acceder a http://localhost autom\u00e1ticamente cargar\u00e1 el resultado:</p> PhpResultado <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        echo \"Hola Mundo\";\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>P\u00e1gina en php: Hola Mundo.</p>"},{"location":"ca/ut01/ut01ac/","title":"Exercicis","text":""},{"location":"ca/ut01/ut01ac/#ejercicio-103","title":"Ejercicio 103","text":"<p>Instala (mediante XAMPP o Docker) la dupla Apache+Php2.</p> <p>Utiliza el puerto 8082 para Apache (en el fichero docker-compose.yml).</p> <p>Estructura del contenedor:</p> <pre><code>ApachePhp2/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 .docker/    # Carpeta de configuraci\u00f3n\n\u2502  \u2514\u2500\u2500 php.ini  # Fichero configuraci\u00f3n php\n\u2514\u2500\u2500 src/        # Carpeta del proyecto\n</code></pre>"},{"location":"ca/ut01/ut01ac/#ejercicio-104","title":"Ejercicio 104","text":"<p>Instala (mediante Docker) la dupla Nginx+Php2.</p> <p>Utiliza el puerto 8083 para Nginx (en el fichero docker-compose.yml).</p> <pre><code>ApachePhp2/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 .docker/    # Carpeta de configuraci\u00f3n\n\u2502  \u2514\u2500\u2500 nginx    \n\u2502     \u2514\u2500\u2500 conf.d\n\u2502        \u2514\u2500\u2500 default.conf # Fichero configuraci\u00f3n de servidor Nginx\n\u2514\u2500\u2500 src/        # Carpeta del proyecto\n</code></pre>"},{"location":"ca/ut01/ut01ac/#ejercicio-105","title":"Ejercicio 105","text":"<p>Si finalmente has instalado mediante dockers los dos servidores web, instala tambi\u00e9n el docker Portainer y echa un vistazo (haciendo varias capturas).</p> <pre><code>sudo docker volume create portainer_data\nsudo docker run -d -p 8000:8000 -p 9443:9443 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n</code></pre>"},{"location":"ca/ut01/ut01ac/#ejercicio-106","title":"Ejercicio 106","text":"<p>Una vez arrancado el servicio PHP (mediante XAMPP o Docker), crea el archivo <code>info.php</code> y a\u00f1ade el siguiente fragmento de c\u00f3digo:</p> <pre><code>&lt;?php phpinfo() ?&gt;\n</code></pre> <p>Anota los valores de: </p> <ul> <li>Versi\u00f3n de PHP</li> <li><code>Loaded Configuration File</code> </li> <li><code>memory_limit</code></li> <li><code>DOCUMENT_ROOT</code></li> </ul>"},{"location":"ca/ut01/ut01de/","title":"Desc\u00e0rregues","text":""},{"location":"ca/ut02/ut0201/","title":"2.1. Introducci\u00f3","text":"<p>Duraci\u00f3n estimada: 20 sesiones.</p> Resultados de aprendizaje Criterios de evaluaci\u00f3n RA2. Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas. a) Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido. b) Se han identificado las principales tecnolog\u00edas asociadas. c) Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas. d) Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar. e) Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante. f) Se han utilizado directivas para modificar el comportamiento predeterminado. g) Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje. h) Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables. RA3. Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n. a) Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias. b) Se han utilizado bucles y se ha verificado su funcionamiento. c) Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos. d) Se han creado y utilizado funciones. e) Se han utilizado formularios web para interactuar con el usuario del navegador Web. f) Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario. g) Se han a\u00f1adido comentarios al c\u00f3digo. <p>\u200b   </p>"}]}